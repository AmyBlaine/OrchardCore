/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

$(function () {
  toggleConnectionStringAndPrefix();

  // Show hide the connection string when a provider is selected
  $("#DatabaseProvider").change(function () {
    toggleConnectionStringAndPrefix();
  });

  // Refresh the recipe description
  $("#recipes div a").on('click', function () {
    refreshDescription($(this));
  });
});

// Show or hide the connection string or table prefix section when the database provider is selected
function toggleConnectionStringAndPrefix() {
  $("#DatabaseProvider option:selected").each(function () {
    $(this).data("connection-string").toLowerCase() === "true" ? $(".connectionString").show() : $(".connectionString").hide();
    $(this).data("table-prefix").toLowerCase() === "true" ? $(".tablePrefix").show() : $(".tablePrefix").hide();
    $(this).data("connection-string").toLowerCase() === "true" ? $(".pwd").attr('required', 'required') : $(".pwd").removeAttr('required');
    $("#connectionStringHint").text($(this).data("connection-string-sample"));
  });
}

// Show the recipe description
function refreshDescription(target) {
  var recipeName = $(target).data("recipe-name");
  var recipeDisplayName = $(target).data("recipe-display-name");
  var recipeDescription = $(target).data("recipe-description");
  $("#recipeButton").text(recipeDisplayName);
  $("#RecipeName").val(recipeName);
  $("#recipeButton").attr("title", recipeDescription);
  $("#recipeButton").focus();
}
function setLocalizationUrl() {
  var culturesList = document.getElementById('culturesList');
  window.location = culturesList.options[culturesList.selectedIndex].dataset.url;
}
function togglePasswordVisibility(passwordCtl, togglePasswordCtl) {
  // toggle the type attribute
  type = passwordCtl.getAttribute('type') === 'password' ? 'text' : 'password';
  passwordCtl.setAttribute('type', type);

  // toggle the eye slash icon
  icon = togglePasswordCtl.getElementsByClassName('icon')[0];
  if (icon.getAttribute('data-icon')) {
    // if the icon is rendered as a svg
    type === 'password' ? icon.setAttribute('data-icon', 'eye') : icon.setAttribute('data-icon', 'eye-slash');
  } else {
    // if the icon is still a <i> element
    type === 'password' ? icon.classList.remove('fa-eye-slash') : icon.classList.remove('fa-eye');
    type === 'password' ? icon.classList.add('fa-eye') : icon.classList.add('fa-eye-slash');
  }
}
(function ($) {
  $.fn.strength = function (options) {
    var settings = $.extend({
      minLength: 8,
      upperCase: false,
      lowerCase: false,
      numbers: false,
      specialchars: false,
      target: '',
      style: ''
    }, options);
    var capitalletters = 0;
    var lowerletters = 0;
    var numbers = 0;
    var specialchars = 0;
    var upperCase = new RegExp('[A-Z]');
    var lowerCase = new RegExp('[a-z]');
    var number = new RegExp('[0-9]');
    var specialchar = new RegExp('[^A-Za-z0-9]');
    var valid = false;
    createProgressBar(0, '');
    function getPercentage(a, b) {
      return (b / a * 100).toFixed(0);
    }
    function getLevel(value) {
      if (value >= 100) {
        return "bg-success";
      }
      if (value >= 50) {
        return "bg-warning";
      }
      if (value == 0) {
        return ''; // grayed
      }
      return "bg-danger";
    }
    function checkStrength(value) {
      minLength = value.length >= settings.minLength ? 1 : 0;
      capitalletters = !settings.upperCase || value.match(upperCase) ? 1 : 0;
      lowerletters = !settings.lowerCase || value.match(lowerCase) ? 1 : 0;
      numbers = !settings.numbers || value.match(number) ? 1 : 0;
      specialchars = !settings.specialchars || value.match(specialchar) ? 1 : 0;
      var total = minLength + capitalletters + lowerletters + numbers + specialchars;
      var percentage = getPercentage(5, total);
      valid = percentage >= 100;
      createProgressBar(percentage, getLevel(percentage));
    }
    function createProgressBar(percentage, level) {
      var el = $('<div class="progress" value="' + percentage + '" style="' + settings.style + '" max="100" aria-describedby=""><div class="progress-bar ' + level + '" role="progress-bar" style="width: ' + percentage + '%;"></div></div>');
      var target = $(settings.target);
      target.empty();
      target.append(el);
    }
    this.bind('keyup keydown', function (event) {
      checkStrength($(this).val());
    });
    this.bind('drop', function (event) {
      checkStrength(event.originalEvent.dataTransfer.getData("text"));
    });
    this.parents('form').on('submit', function () {
      if (!valid) {
        event.preventDefault();
      }
    });
  };
})(jQuery);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/**
 * @popperjs/core v2.11.8 - MIT License
 */

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Popper = {}));
})(this, function (exports) {
  'use strict';

  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }
  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }
    return navigator.userAgent;
  }
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window,
      visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }
  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }
  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }
  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument :
    // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }
  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }
  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.

  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' ||
      // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }
  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot ||
      // step into the shadow DOM of the parent of a slotted node
      element.parentNode || (
      // DOM Element detected
      isShadowRoot(element) ? element.host : null) ||
      // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback
    );
  }
  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList :
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }
  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) ||
    // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === 'fixed') {
      return null;
    }
    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block

  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle(element);
      if (elementCss.position === 'fixed') {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.

  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
      return window;
    }
    return offsetParent || getContainingBlock(element) || window;
  }
  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }
  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }
      return pending;
    };
  }
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }
  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...

        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false

    return false;
  }
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`

  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents

  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }
  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }
  function getVariation(placement) {
    return placement.split('-')[1];
  }
  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }
  function computeOffsets(_ref) {
    var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }
    return offsets;
  }
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }
  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$strategy = _options.strategy,
      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }
    return overflowOffsets;
  }
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            return;
          } // Store the reference and popper rects to be read by modifiers

          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;
            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference, popper)) {
        return instance;
      }
      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref) {
          var name = _ref.name,
            _ref$options = _ref.options,
            options = _ref$options === void 0 ? {} : _ref$options,
            effect = _ref.effect;
          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });
            var noopFn = function noopFn() {};
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }
  var passive = {
    passive: true
  };
  function effect$2(_ref) {
    var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
    var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }
    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }
    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }
      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules

  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect$2,
    data: {}
  };
  function popperOffsets(_ref) {
    var state = _ref.state,
      name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules

  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };
  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x,
      y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';
      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);
        if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height :
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width :
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }, getWindow(popper)) : {
      x: x,
      y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state,
      options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules

  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];
        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }
  function effect$1(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules

  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$1,
    requires: ['computeStyles']
  };
  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
      skidding = _ref[0],
      distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
    var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules

  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };
  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }
  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);
          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break") break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules

  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };
  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }
  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }
  function preventOverflow(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === 'x' ? top : left;
      var _altSide = mainAxis === 'x' ? bottom : right;
      var _offset = popperOffsets[altAxis];
      var _len = altAxis === 'y' ? 'height' : 'width';
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules

  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };
  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }
  function effect(_ref2) {
    var state = _ref2.state,
      options = _ref2.options;
    var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) {
      return;
    } // CSS selector

    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules

  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state,
      name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules

  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };
  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
  var createPopper$1 = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers$1
  }); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  exports.applyStyles = applyStyles$1;
  exports.arrow = arrow$1;
  exports.computeStyles = computeStyles$1;
  exports.createPopper = createPopper;
  exports.createPopperLite = createPopper$1;
  exports.defaultModifiers = defaultModifiers;
  exports.detectOverflow = detectOverflow;
  exports.eventListeners = eventListeners;
  exports.flip = flip$1;
  exports.hide = hide$1;
  exports.offset = offset$1;
  exports.popperGenerator = popperGenerator;
  exports.popperOffsets = popperOffsets$1;
  exports.preventOverflow = preventOverflow$1;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
  * Bootstrap v5.3.3 (https://getbootstrap.com/)
  * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@popperjs/core')) : typeof define === 'function' && define.amd ? define(['@popperjs/core'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.bootstrap = factory(global.Popper));
})(this, function (Popper) {
  'use strict';

  function _interopNamespaceDefault(e) {
    var n = Object.create(null, _defineProperty({}, Symbol.toStringTag, {
      value: 'Module'
    }));
    if (e) {
      var _loop = function _loop(k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function get() {
              return e[k];
            }
          });
        }
      };
      for (var k in e) {
        _loop(k);
      }
    }
    n["default"] = e;
    return Object.freeze(n);
  }
  var Popper__namespace = /*#__PURE__*/_interopNamespaceDefault(Popper);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/data.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var elementMap = new Map();
  var Data = {
    set: function set(element, key, instance) {
      if (!elementMap.has(element)) {
        elementMap.set(element, new Map());
      }
      var instanceMap = elementMap.get(element);

      // make it clear we only want one instance per element
      // can be removed later when multiple key/instances are fine to be used
      if (!instanceMap.has(key) && instanceMap.size !== 0) {
        // eslint-disable-next-line no-console
        console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(instanceMap.keys())[0], "."));
        return;
      }
      instanceMap.set(key, instance);
    },
    get: function get(element, key) {
      if (elementMap.has(element)) {
        return elementMap.get(element).get(key) || null;
      }
      return null;
    },
    remove: function remove(element, key) {
      if (!elementMap.has(element)) {
        return;
      }
      var instanceMap = elementMap.get(element);
      instanceMap["delete"](key);

      // free up element references if there are no instances left for an element
      if (instanceMap.size === 0) {
        elementMap["delete"](element);
      }
    }
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  var MAX_UID = 1000000;
  var MILLISECONDS_MULTIPLIER = 1000;
  var TRANSITION_END = 'transitionend';

  /**
   * Properly escape IDs selectors to handle weird IDs
   * @param {string} selector
   * @returns {string}
   */
  var parseSelector = function parseSelector(selector) {
    if (selector && window.CSS && window.CSS.escape) {
      // document.querySelector needs escaping to handle IDs (html5+) containing for instance /
      selector = selector.replace(/#([^\s"#']+)/g, function (match, id) {
        return "#".concat(CSS.escape(id));
      });
    }
    return selector;
  };

  // Shout-out Angus Croll (https://goo.gl/pxwQGp)
  var toType = function toType(object) {
    if (object === null || object === undefined) {
      return "".concat(object);
    }
    return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
  };

  /**
   * Public Util API
   */

  var getUID = function getUID(prefix) {
    do {
      prefix += Math.floor(Math.random() * MAX_UID);
    } while (document.getElementById(prefix));
    return prefix;
  };
  var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {
    if (!element) {
      return 0;
    }

    // Get transition-duration of the element
    var _window$getComputedSt = window.getComputedStyle(element),
      transitionDuration = _window$getComputedSt.transitionDuration,
      transitionDelay = _window$getComputedSt.transitionDelay;
    var floatTransitionDuration = Number.parseFloat(transitionDuration);
    var floatTransitionDelay = Number.parseFloat(transitionDelay);

    // Return 0 if element or transition duration is not found
    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0;
    }

    // If multiple durations are defined, take the first
    transitionDuration = transitionDuration.split(',')[0];
    transitionDelay = transitionDelay.split(',')[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  };
  var triggerTransitionEnd = function triggerTransitionEnd(element) {
    element.dispatchEvent(new Event(TRANSITION_END));
  };
  var isElement = function isElement(object) {
    if (!object || _typeof(object) !== 'object') {
      return false;
    }
    if (typeof object.jquery !== 'undefined') {
      object = object[0];
    }
    return typeof object.nodeType !== 'undefined';
  };
  var getElement = function getElement(object) {
    // it's a jQuery object or a node element
    if (isElement(object)) {
      return object.jquery ? object[0] : object;
    }
    if (typeof object === 'string' && object.length > 0) {
      return document.querySelector(parseSelector(object));
    }
    return null;
  };
  var isVisible = function isVisible(element) {
    if (!isElement(element) || element.getClientRects().length === 0) {
      return false;
    }
    var elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible';
    // Handle `details` element as its content may falsie appear visible when it is closed
    var closedDetails = element.closest('details:not([open])');
    if (!closedDetails) {
      return elementIsVisible;
    }
    if (closedDetails !== element) {
      var summary = element.closest('summary');
      if (summary && summary.parentNode !== closedDetails) {
        return false;
      }
      if (summary === null) {
        return false;
      }
    }
    return elementIsVisible;
  };
  var isDisabled = function isDisabled(element) {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true;
    }
    if (element.classList.contains('disabled')) {
      return true;
    }
    if (typeof element.disabled !== 'undefined') {
      return element.disabled;
    }
    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
  };
  var findShadowRoot = function findShadowRoot(element) {
    if (!document.documentElement.attachShadow) {
      return null;
    }

    // Can find the shadow root otherwise it'll return the document
    if (typeof element.getRootNode === 'function') {
      var root = element.getRootNode();
      return root instanceof ShadowRoot ? root : null;
    }
    if (element instanceof ShadowRoot) {
      return element;
    }

    // when we don't find a shadow root
    if (!element.parentNode) {
      return null;
    }
    return findShadowRoot(element.parentNode);
  };
  var noop = function noop() {};

  /**
   * Trick to restart an element's animation
   *
   * @param {HTMLElement} element
   * @return void
   *
   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
   */
  var reflow = function reflow(element) {
    element.offsetHeight; // eslint-disable-line no-unused-expressions
  };
  var getjQuery = function getjQuery() {
    if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
      return window.jQuery;
    }
    return null;
  };
  var DOMContentLoadedCallbacks = [];
  var onDOMContentLoaded = function onDOMContentLoaded(callback) {
    if (document.readyState === 'loading') {
      // add listener on the first call when the document is in loading state
      if (!DOMContentLoadedCallbacks.length) {
        document.addEventListener('DOMContentLoaded', function () {
          for (var _i = 0, _DOMContentLoadedCall = DOMContentLoadedCallbacks; _i < _DOMContentLoadedCall.length; _i++) {
            var _callback = _DOMContentLoadedCall[_i];
            _callback();
          }
        });
      }
      DOMContentLoadedCallbacks.push(callback);
    } else {
      callback();
    }
  };
  var isRTL = function isRTL() {
    return document.documentElement.dir === 'rtl';
  };
  var defineJQueryPlugin = function defineJQueryPlugin(plugin) {
    onDOMContentLoaded(function () {
      var $ = getjQuery();
      /* istanbul ignore if */
      if ($) {
        var name = plugin.NAME;
        var JQUERY_NO_CONFLICT = $.fn[name];
        $.fn[name] = plugin.jQueryInterface;
        $.fn[name].Constructor = plugin;
        $.fn[name].noConflict = function () {
          $.fn[name] = JQUERY_NO_CONFLICT;
          return plugin.jQueryInterface;
        };
      }
    });
  };
  var execute = function execute(possibleCallback) {
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : possibleCallback;
    return typeof possibleCallback === 'function' ? possibleCallback.apply(void 0, _toConsumableArray(args)) : defaultValue;
  };
  var executeAfterTransition = function executeAfterTransition(callback, transitionElement) {
    var waitForTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (!waitForTransition) {
      execute(callback);
      return;
    }
    var durationPadding = 5;
    var emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    var called = false;
    var handler = function handler(_ref) {
      var target = _ref.target;
      if (target !== transitionElement) {
        return;
      }
      called = true;
      transitionElement.removeEventListener(TRANSITION_END, handler);
      execute(callback);
    };
    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(function () {
      if (!called) {
        triggerTransitionEnd(transitionElement);
      }
    }, emulatedDuration);
  };

  /**
   * Return the previous/next element of a list.
   *
   * @param {array} list    The list of elements
   * @param activeElement   The active element
   * @param shouldGetNext   Choose to get next or previous element
   * @param isCycleAllowed
   * @return {Element|elem} The proper element
   */
  var getNextActiveElement = function getNextActiveElement(list, activeElement, shouldGetNext, isCycleAllowed) {
    var listLength = list.length;
    var index = list.indexOf(activeElement);

    // if the element does not exist in the list return an element
    // depending on the direction and if cycle is allowed
    if (index === -1) {
      return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
    }
    index += shouldGetNext ? 1 : -1;
    if (isCycleAllowed) {
      index = (index + listLength) % listLength;
    }
    return list[Math.max(0, Math.min(index, listLength - 1))];
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/event-handler.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  var stripNameRegex = /\..*/;
  var stripUidRegex = /::\d+$/;
  var eventRegistry = {}; // Events storage
  var uidEvent = 1;
  var customEvents = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };
  var nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);

  /**
   * Private methods
   */

  function makeEventUid(element, uid) {
    return uid && "".concat(uid, "::").concat(uidEvent++) || element.uidEvent || uidEvent++;
  }
  function getElementEvents(element) {
    var uid = makeEventUid(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};
    return eventRegistry[uid];
  }
  function bootstrapHandler(element, fn) {
    return function handler(event) {
      hydrateObj(event, {
        delegateTarget: element
      });
      if (handler.oneOff) {
        EventHandler.off(element, event.type, fn);
      }
      return fn.apply(element, [event]);
    };
  }
  function bootstrapDelegationHandler(element, selector, fn) {
    return function handler(event) {
      var domElements = element.querySelectorAll(selector);
      for (var target = event.target; target && target !== this; target = target.parentNode) {
        var _iterator = _createForOfIteratorHelper(domElements),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var domElement = _step.value;
            if (domElement !== target) {
              continue;
            }
            hydrateObj(event, {
              delegateTarget: target
            });
            if (handler.oneOff) {
              EventHandler.off(element, event.type, selector, fn);
            }
            return fn.apply(target, [event]);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    };
  }
  function findHandler(events, callable) {
    var delegationSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    return Object.values(events).find(function (event) {
      return event.callable === callable && event.delegationSelector === delegationSelector;
    });
  }
  function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
    var isDelegated = typeof handler === 'string';
    // TODO: tooltip passes `false` instead of selector, so we need to check
    var callable = isDelegated ? delegationFunction : handler || delegationFunction;
    var typeEvent = getTypeEvent(originalTypeEvent);
    if (!nativeEvents.has(typeEvent)) {
      typeEvent = originalTypeEvent;
    }
    return [isDelegated, callable, typeEvent];
  }
  function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return;
    }
    var _normalizeParameters = normalizeParameters(originalTypeEvent, handler, delegationFunction),
      _normalizeParameters2 = _slicedToArray(_normalizeParameters, 3),
      isDelegated = _normalizeParameters2[0],
      callable = _normalizeParameters2[1],
      typeEvent = _normalizeParameters2[2];

    // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
    // this prevents the handler from being dispatched the same way as mouseover or mouseout does
    if (originalTypeEvent in customEvents) {
      var wrapFunction = function wrapFunction(fn) {
        return function (event) {
          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
            return fn.call(this, event);
          }
        };
      };
      callable = wrapFunction(callable);
    }
    var events = getElementEvents(element);
    var handlers = events[typeEvent] || (events[typeEvent] = {});
    var previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);
    if (previousFunction) {
      previousFunction.oneOff = previousFunction.oneOff && oneOff;
      return;
    }
    var uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));
    var fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
    fn.delegationSelector = isDelegated ? handler : null;
    fn.callable = callable;
    fn.oneOff = oneOff;
    fn.uidEvent = uid;
    handlers[uid] = fn;
    element.addEventListener(typeEvent, fn, isDelegated);
  }
  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    var fn = findHandler(events[typeEvent], handler, delegationSelector);
    if (!fn) {
      return;
    }
    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
    delete events[typeEvent][fn.uidEvent];
  }
  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    var storeElementEvent = events[typeEvent] || {};
    for (var _i2 = 0, _Object$entries = Object.entries(storeElementEvent); _i2 < _Object$entries.length; _i2++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
        handlerKey = _Object$entries$_i[0],
        event = _Object$entries$_i[1];
      if (handlerKey.includes(namespace)) {
        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
      }
    }
  }
  function getTypeEvent(event) {
    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
    event = event.replace(stripNameRegex, '');
    return customEvents[event] || event;
  }
  var EventHandler = {
    on: function on(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, false);
    },
    one: function one(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, true);
    },
    off: function off(element, originalTypeEvent, handler, delegationFunction) {
      if (typeof originalTypeEvent !== 'string' || !element) {
        return;
      }
      var _normalizeParameters3 = normalizeParameters(originalTypeEvent, handler, delegationFunction),
        _normalizeParameters4 = _slicedToArray(_normalizeParameters3, 3),
        isDelegated = _normalizeParameters4[0],
        callable = _normalizeParameters4[1],
        typeEvent = _normalizeParameters4[2];
      var inNamespace = typeEvent !== originalTypeEvent;
      var events = getElementEvents(element);
      var storeElementEvent = events[typeEvent] || {};
      var isNamespace = originalTypeEvent.startsWith('.');
      if (typeof callable !== 'undefined') {
        // Simplest case: handler is passed, remove that listener ONLY.
        if (!Object.keys(storeElementEvent).length) {
          return;
        }
        removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
        return;
      }
      if (isNamespace) {
        for (var _i3 = 0, _Object$keys = Object.keys(events); _i3 < _Object$keys.length; _i3++) {
          var elementEvent = _Object$keys[_i3];
          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        }
      }
      for (var _i4 = 0, _Object$entries2 = Object.entries(storeElementEvent); _i4 < _Object$entries2.length; _i4++) {
        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i4], 2),
          keyHandlers = _Object$entries2$_i[0],
          event = _Object$entries2$_i[1];
        var handlerKey = keyHandlers.replace(stripUidRegex, '');
        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
          removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
        }
      }
    },
    trigger: function trigger(element, event, args) {
      if (typeof event !== 'string' || !element) {
        return null;
      }
      var $ = getjQuery();
      var typeEvent = getTypeEvent(event);
      var inNamespace = event !== typeEvent;
      var jQueryEvent = null;
      var bubbles = true;
      var nativeDispatch = true;
      var defaultPrevented = false;
      if (inNamespace && $) {
        jQueryEvent = $.Event(event, args);
        $(element).trigger(jQueryEvent);
        bubbles = !jQueryEvent.isPropagationStopped();
        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
        defaultPrevented = jQueryEvent.isDefaultPrevented();
      }
      var evt = hydrateObj(new Event(event, {
        bubbles: bubbles,
        cancelable: true
      }), args);
      if (defaultPrevented) {
        evt.preventDefault();
      }
      if (nativeDispatch) {
        element.dispatchEvent(evt);
      }
      if (evt.defaultPrevented && jQueryEvent) {
        jQueryEvent.preventDefault();
      }
      return evt;
    }
  };
  function hydrateObj(obj) {
    var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _loop2 = function _loop2() {
      var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i5], 2),
        key = _Object$entries3$_i[0],
        value = _Object$entries3$_i[1];
      try {
        obj[key] = value;
      } catch (_unused) {
        Object.defineProperty(obj, key, {
          configurable: true,
          get: function get() {
            return value;
          }
        });
      }
    };
    for (var _i5 = 0, _Object$entries3 = Object.entries(meta); _i5 < _Object$entries3.length; _i5++) {
      _loop2();
    }
    return obj;
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/manipulator.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  function normalizeData(value) {
    if (value === 'true') {
      return true;
    }
    if (value === 'false') {
      return false;
    }
    if (value === Number(value).toString()) {
      return Number(value);
    }
    if (value === '' || value === 'null') {
      return null;
    }
    if (typeof value !== 'string') {
      return value;
    }
    try {
      return JSON.parse(decodeURIComponent(value));
    } catch (_unused) {
      return value;
    }
  }
  function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, function (chr) {
      return "-".concat(chr.toLowerCase());
    });
  }
  var Manipulator = {
    setDataAttribute: function setDataAttribute(element, key, value) {
      element.setAttribute("data-bs-".concat(normalizeDataKey(key)), value);
    },
    removeDataAttribute: function removeDataAttribute(element, key) {
      element.removeAttribute("data-bs-".concat(normalizeDataKey(key)));
    },
    getDataAttributes: function getDataAttributes(element) {
      if (!element) {
        return {};
      }
      var attributes = {};
      var bsKeys = Object.keys(element.dataset).filter(function (key) {
        return key.startsWith('bs') && !key.startsWith('bsConfig');
      });
      var _iterator2 = _createForOfIteratorHelper(bsKeys),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var key = _step2.value;
          var pureKey = key.replace(/^bs/, '');
          pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
          attributes[pureKey] = normalizeData(element.dataset[key]);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return attributes;
    },
    getDataAttribute: function getDataAttribute(element, key) {
      return normalizeData(element.getAttribute("data-bs-".concat(normalizeDataKey(key))));
    }
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/config.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Class definition
   */
  var Config = /*#__PURE__*/function () {
    function Config() {
      _classCallCheck(this, Config);
    }
    return _createClass(Config, [{
      key: "_getConfig",
      value: function _getConfig(config) {
        config = this._mergeConfigObj(config);
        config = this._configAfterMerge(config);
        this._typeCheckConfig(config);
        return config;
      }
    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        return config;
      }
    }, {
      key: "_mergeConfigObj",
      value: function _mergeConfigObj(config, element) {
        var jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse

        return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), _typeof(jsonConfig) === 'object' ? jsonConfig : {}), isElement(element) ? Manipulator.getDataAttributes(element) : {}), _typeof(config) === 'object' ? config : {});
      }
    }, {
      key: "_typeCheckConfig",
      value: function _typeCheckConfig(config) {
        var configTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.DefaultType;
        for (var _i6 = 0, _Object$entries4 = Object.entries(configTypes); _i6 < _Object$entries4.length; _i6++) {
          var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i6], 2),
            property = _Object$entries4$_i[0],
            expectedTypes = _Object$entries4$_i[1];
          var value = config[property];
          var valueType = isElement(value) ? 'element' : toType(value);
          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new TypeError("".concat(this.constructor.NAME.toUpperCase(), ": Option \"").concat(property, "\" provided type \"").concat(valueType, "\" but expected type \"").concat(expectedTypes, "\"."));
          }
        }
      }
    }], [{
      key: "Default",
      get:
      // Getters
      function get() {
        return {};
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return {};
      }
    }, {
      key: "NAME",
      get: function get() {
        throw new Error('You have to implement the static method "NAME", for each component!');
      }
    }]);
  }();
  /**
   * --------------------------------------------------------------------------
   * Bootstrap base-component.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * Constants
   */
  var VERSION = '5.3.3';

  /**
   * Class definition
   */
  var BaseComponent = /*#__PURE__*/function (_Config) {
    function BaseComponent(element, config) {
      var _this;
      _classCallCheck(this, BaseComponent);
      _this = _callSuper(this, BaseComponent);
      element = getElement(element);
      if (!element) {
        return _possibleConstructorReturn(_this);
      }
      _this._element = element;
      _this._config = _this._getConfig(config);
      Data.set(_this._element, _this.constructor.DATA_KEY, _this);
      return _this;
    }

    // Public
    _inherits(BaseComponent, _Config);
    return _createClass(BaseComponent, [{
      key: "dispose",
      value: function dispose() {
        Data.remove(this._element, this.constructor.DATA_KEY);
        EventHandler.off(this._element, this.constructor.EVENT_KEY);
        var _iterator3 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var propertyName = _step3.value;
            this[propertyName] = null;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }, {
      key: "_queueCallback",
      value: function _queueCallback(callback, element) {
        var isAnimated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        executeAfterTransition(callback, element, isAnimated);
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = this._mergeConfigObj(config, this._element);
        config = this._configAfterMerge(config);
        this._typeCheckConfig(config);
        return config;
      }

      // Static
    }], [{
      key: "getInstance",
      value: function getInstance(element) {
        return Data.get(getElement(element), this.DATA_KEY);
      }
    }, {
      key: "getOrCreateInstance",
      value: function getOrCreateInstance(element) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this.getInstance(element) || new this(element, _typeof(config) === 'object' ? config : null);
      }
    }, {
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return "bs.".concat(this.NAME);
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return ".".concat(this.DATA_KEY);
      }
    }, {
      key: "eventName",
      value: function eventName(name) {
        return "".concat(name).concat(this.EVENT_KEY);
      }
    }]);
  }(Config);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/selector-engine.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  var getSelector = function getSelector(element) {
    var selector = element.getAttribute('data-bs-target');
    if (!selector || selector === '#') {
      var hrefAttribute = element.getAttribute('href');

      // The only valid content that could double as a selector are IDs or classes,
      // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
      // `document.querySelector` will rightfully complain it is invalid.
      // See https://github.com/twbs/bootstrap/issues/32273
      if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) {
        return null;
      }

      // Just in case some CMS puts out a full URL with the anchor appended
      if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {
        hrefAttribute = "#".concat(hrefAttribute.split('#')[1]);
      }
      selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;
    }
    return selector ? selector.split(',').map(function (sel) {
      return parseSelector(sel);
    }).join(',') : null;
  };
  var SelectorEngine = {
    find: function find(selector) {
      var _ref2;
      var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
      return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(Element.prototype.querySelectorAll.call(element, selector)));
    },
    findOne: function findOne(selector) {
      var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
      return Element.prototype.querySelector.call(element, selector);
    },
    children: function children(element, selector) {
      var _ref3;
      return (_ref3 = []).concat.apply(_ref3, _toConsumableArray(element.children)).filter(function (child) {
        return child.matches(selector);
      });
    },
    parents: function parents(element, selector) {
      var parents = [];
      var ancestor = element.parentNode.closest(selector);
      while (ancestor) {
        parents.push(ancestor);
        ancestor = ancestor.parentNode.closest(selector);
      }
      return parents;
    },
    prev: function prev(element, selector) {
      var previous = element.previousElementSibling;
      while (previous) {
        if (previous.matches(selector)) {
          return [previous];
        }
        previous = previous.previousElementSibling;
      }
      return [];
    },
    // TODO: this is now unused; remove later along with prev()
    next: function next(element, selector) {
      var next = element.nextElementSibling;
      while (next) {
        if (next.matches(selector)) {
          return [next];
        }
        next = next.nextElementSibling;
      }
      return [];
    },
    focusableChildren: function focusableChildren(element) {
      var focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(function (selector) {
        return "".concat(selector, ":not([tabindex^=\"-\"])");
      }).join(',');
      return this.find(focusables, element).filter(function (el) {
        return !isDisabled(el) && isVisible(el);
      });
    },
    getSelectorFromElement: function getSelectorFromElement(element) {
      var selector = getSelector(element);
      if (selector) {
        return SelectorEngine.findOne(selector) ? selector : null;
      }
      return null;
    },
    getElementFromSelector: function getElementFromSelector(element) {
      var selector = getSelector(element);
      return selector ? SelectorEngine.findOne(selector) : null;
    },
    getMultipleElementsFromSelector: function getMultipleElementsFromSelector(element) {
      var selector = getSelector(element);
      return selector ? SelectorEngine.find(selector) : [];
    }
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/component-functions.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  var enableDismissTrigger = function enableDismissTrigger(component) {
    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hide';
    var clickEvent = "click.dismiss".concat(component.EVENT_KEY);
    var name = component.NAME;
    EventHandler.on(document, clickEvent, "[data-bs-dismiss=\"".concat(name, "\"]"), function (event) {
      if (['A', 'AREA'].includes(this.tagName)) {
        event.preventDefault();
      }
      if (isDisabled(this)) {
        return;
      }
      var target = SelectorEngine.getElementFromSelector(this) || this.closest(".".concat(name));
      var instance = component.getOrCreateInstance(target);

      // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method
      instance[method]();
    });
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap alert.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$f = 'alert';
  var DATA_KEY$a = 'bs.alert';
  var EVENT_KEY$b = ".".concat(DATA_KEY$a);
  var EVENT_CLOSE = "close".concat(EVENT_KEY$b);
  var EVENT_CLOSED = "closed".concat(EVENT_KEY$b);
  var CLASS_NAME_FADE$5 = 'fade';
  var CLASS_NAME_SHOW$8 = 'show';

  /**
   * Class definition
   */
  var Alert = /*#__PURE__*/function (_BaseComponent) {
    function Alert() {
      _classCallCheck(this, Alert);
      return _callSuper(this, Alert, arguments);
    }
    _inherits(Alert, _BaseComponent);
    return _createClass(Alert, [{
      key: "close",
      value:
      // Public
      function close() {
        var _this2 = this;
        var closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
        if (closeEvent.defaultPrevented) {
          return;
        }
        this._element.classList.remove(CLASS_NAME_SHOW$8);
        var isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
        this._queueCallback(function () {
          return _this2._destroyElement();
        }, this._element, isAnimated);
      }

      // Private
    }, {
      key: "_destroyElement",
      value: function _destroyElement() {
        this._element.remove();
        EventHandler.trigger(this._element, EVENT_CLOSED);
        this.dispose();
      }

      // Static
    }], [{
      key: "NAME",
      get:
      // Getters
      function get() {
        return NAME$f;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Alert.getOrCreateInstance(this);
          if (typeof config !== 'string') {
            return;
          }
          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }
          data[config](this);
        });
      }
    }]);
  }(BaseComponent);
  /**
   * Data API implementation
   */
  enableDismissTrigger(Alert, 'close');

  /**
   * jQuery
   */

  defineJQueryPlugin(Alert);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap button.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$e = 'button';
  var DATA_KEY$9 = 'bs.button';
  var EVENT_KEY$a = ".".concat(DATA_KEY$9);
  var DATA_API_KEY$6 = '.data-api';
  var CLASS_NAME_ACTIVE$3 = 'active';
  var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
  var EVENT_CLICK_DATA_API$6 = "click".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);

  /**
   * Class definition
   */
  var Button = /*#__PURE__*/function (_BaseComponent2) {
    function Button() {
      _classCallCheck(this, Button);
      return _callSuper(this, Button, arguments);
    }
    _inherits(Button, _BaseComponent2);
    return _createClass(Button, [{
      key: "toggle",
      value:
      // Public
      function toggle() {
        // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
        this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
      }

      // Static
    }], [{
      key: "NAME",
      get:
      // Getters
      function get() {
        return NAME$e;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Button.getOrCreateInstance(this);
          if (config === 'toggle') {
            data[config]();
          }
        });
      }
    }]);
  }(BaseComponent);
  /**
   * Data API implementation
   */
  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, function (event) {
    event.preventDefault();
    var button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
    var data = Button.getOrCreateInstance(button);
    data.toggle();
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(Button);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/swipe.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$d = 'swipe';
  var EVENT_KEY$9 = '.bs.swipe';
  var EVENT_TOUCHSTART = "touchstart".concat(EVENT_KEY$9);
  var EVENT_TOUCHMOVE = "touchmove".concat(EVENT_KEY$9);
  var EVENT_TOUCHEND = "touchend".concat(EVENT_KEY$9);
  var EVENT_POINTERDOWN = "pointerdown".concat(EVENT_KEY$9);
  var EVENT_POINTERUP = "pointerup".concat(EVENT_KEY$9);
  var POINTER_TYPE_TOUCH = 'touch';
  var POINTER_TYPE_PEN = 'pen';
  var CLASS_NAME_POINTER_EVENT = 'pointer-event';
  var SWIPE_THRESHOLD = 40;
  var Default$c = {
    endCallback: null,
    leftCallback: null,
    rightCallback: null
  };
  var DefaultType$c = {
    endCallback: '(function|null)',
    leftCallback: '(function|null)',
    rightCallback: '(function|null)'
  };

  /**
   * Class definition
   */
  var Swipe = /*#__PURE__*/function (_Config2) {
    function Swipe(element, config) {
      var _this3;
      _classCallCheck(this, Swipe);
      _this3 = _callSuper(this, Swipe);
      _this3._element = element;
      if (!element || !Swipe.isSupported()) {
        return _possibleConstructorReturn(_this3);
      }
      _this3._config = _this3._getConfig(config);
      _this3._deltaX = 0;
      _this3._supportPointerEvents = Boolean(window.PointerEvent);
      _this3._initEvents();
      return _this3;
    }

    // Getters
    _inherits(Swipe, _Config2);
    return _createClass(Swipe, [{
      key: "dispose",
      value:
      // Public
      function dispose() {
        EventHandler.off(this._element, EVENT_KEY$9);
      }

      // Private
    }, {
      key: "_start",
      value: function _start(event) {
        if (!this._supportPointerEvents) {
          this._deltaX = event.touches[0].clientX;
          return;
        }
        if (this._eventIsPointerPenTouch(event)) {
          this._deltaX = event.clientX;
        }
      }
    }, {
      key: "_end",
      value: function _end(event) {
        if (this._eventIsPointerPenTouch(event)) {
          this._deltaX = event.clientX - this._deltaX;
        }
        this._handleSwipe();
        execute(this._config.endCallback);
      }
    }, {
      key: "_move",
      value: function _move(event) {
        this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
      }
    }, {
      key: "_handleSwipe",
      value: function _handleSwipe() {
        var absDeltaX = Math.abs(this._deltaX);
        if (absDeltaX <= SWIPE_THRESHOLD) {
          return;
        }
        var direction = absDeltaX / this._deltaX;
        this._deltaX = 0;
        if (!direction) {
          return;
        }
        execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
      }
    }, {
      key: "_initEvents",
      value: function _initEvents() {
        var _this4 = this;
        if (this._supportPointerEvents) {
          EventHandler.on(this._element, EVENT_POINTERDOWN, function (event) {
            return _this4._start(event);
          });
          EventHandler.on(this._element, EVENT_POINTERUP, function (event) {
            return _this4._end(event);
          });
          this._element.classList.add(CLASS_NAME_POINTER_EVENT);
        } else {
          EventHandler.on(this._element, EVENT_TOUCHSTART, function (event) {
            return _this4._start(event);
          });
          EventHandler.on(this._element, EVENT_TOUCHMOVE, function (event) {
            return _this4._move(event);
          });
          EventHandler.on(this._element, EVENT_TOUCHEND, function (event) {
            return _this4._end(event);
          });
        }
      }
    }, {
      key: "_eventIsPointerPenTouch",
      value: function _eventIsPointerPenTouch(event) {
        return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
      }

      // Static
    }], [{
      key: "Default",
      get: function get() {
        return Default$c;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$c;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$d;
      }
    }, {
      key: "isSupported",
      value: function isSupported() {
        return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
      }
    }]);
  }(Config);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap carousel.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * Constants
   */
  var NAME$c = 'carousel';
  var DATA_KEY$8 = 'bs.carousel';
  var EVENT_KEY$8 = ".".concat(DATA_KEY$8);
  var DATA_API_KEY$5 = '.data-api';
  var ARROW_LEFT_KEY$1 = 'ArrowLeft';
  var ARROW_RIGHT_KEY$1 = 'ArrowRight';
  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var ORDER_NEXT = 'next';
  var ORDER_PREV = 'prev';
  var DIRECTION_LEFT = 'left';
  var DIRECTION_RIGHT = 'right';
  var EVENT_SLIDE = "slide".concat(EVENT_KEY$8);
  var EVENT_SLID = "slid".concat(EVENT_KEY$8);
  var EVENT_KEYDOWN$1 = "keydown".concat(EVENT_KEY$8);
  var EVENT_MOUSEENTER$1 = "mouseenter".concat(EVENT_KEY$8);
  var EVENT_MOUSELEAVE$1 = "mouseleave".concat(EVENT_KEY$8);
  var EVENT_DRAG_START = "dragstart".concat(EVENT_KEY$8);
  var EVENT_LOAD_DATA_API$3 = "load".concat(EVENT_KEY$8).concat(DATA_API_KEY$5);
  var EVENT_CLICK_DATA_API$5 = "click".concat(EVENT_KEY$8).concat(DATA_API_KEY$5);
  var CLASS_NAME_CAROUSEL = 'carousel';
  var CLASS_NAME_ACTIVE$2 = 'active';
  var CLASS_NAME_SLIDE = 'slide';
  var CLASS_NAME_END = 'carousel-item-end';
  var CLASS_NAME_START = 'carousel-item-start';
  var CLASS_NAME_NEXT = 'carousel-item-next';
  var CLASS_NAME_PREV = 'carousel-item-prev';
  var SELECTOR_ACTIVE = '.active';
  var SELECTOR_ITEM = '.carousel-item';
  var SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
  var SELECTOR_ITEM_IMG = '.carousel-item img';
  var SELECTOR_INDICATORS = '.carousel-indicators';
  var SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
  var SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
  var KEY_TO_DIRECTION = _defineProperty(_defineProperty({}, ARROW_LEFT_KEY$1, DIRECTION_RIGHT), ARROW_RIGHT_KEY$1, DIRECTION_LEFT);
  var Default$b = {
    interval: 5000,
    keyboard: true,
    pause: 'hover',
    ride: false,
    touch: true,
    wrap: true
  };
  var DefaultType$b = {
    interval: '(number|boolean)',
    // TODO:v6 remove boolean support
    keyboard: 'boolean',
    pause: '(string|boolean)',
    ride: '(boolean|string)',
    touch: 'boolean',
    wrap: 'boolean'
  };

  /**
   * Class definition
   */
  var Carousel = /*#__PURE__*/function (_BaseComponent3) {
    function Carousel(element, config) {
      var _this5;
      _classCallCheck(this, Carousel);
      _this5 = _callSuper(this, Carousel, [element, config]);
      _this5._interval = null;
      _this5._activeElement = null;
      _this5._isSliding = false;
      _this5.touchTimeout = null;
      _this5._swipeHelper = null;
      _this5._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, _this5._element);
      _this5._addEventListeners();
      if (_this5._config.ride === CLASS_NAME_CAROUSEL) {
        _this5.cycle();
      }
      return _this5;
    }

    // Getters
    _inherits(Carousel, _BaseComponent3);
    return _createClass(Carousel, [{
      key: "next",
      value:
      // Public
      function next() {
        this._slide(ORDER_NEXT);
      }
    }, {
      key: "nextWhenVisible",
      value: function nextWhenVisible() {
        // FIXME TODO use `document.visibilityState`
        // Don't call next when the page isn't visible
        // or the carousel or its parent isn't visible
        if (!document.hidden && isVisible(this._element)) {
          this.next();
        }
      }
    }, {
      key: "prev",
      value: function prev() {
        this._slide(ORDER_PREV);
      }
    }, {
      key: "pause",
      value: function pause() {
        if (this._isSliding) {
          triggerTransitionEnd(this._element);
        }
        this._clearInterval();
      }
    }, {
      key: "cycle",
      value: function cycle() {
        var _this6 = this;
        this._clearInterval();
        this._updateInterval();
        this._interval = setInterval(function () {
          return _this6.nextWhenVisible();
        }, this._config.interval);
      }
    }, {
      key: "_maybeEnableCycle",
      value: function _maybeEnableCycle() {
        var _this7 = this;
        if (!this._config.ride) {
          return;
        }
        if (this._isSliding) {
          EventHandler.one(this._element, EVENT_SLID, function () {
            return _this7.cycle();
          });
          return;
        }
        this.cycle();
      }
    }, {
      key: "to",
      value: function to(index) {
        var _this8 = this;
        var items = this._getItems();
        if (index > items.length - 1 || index < 0) {
          return;
        }
        if (this._isSliding) {
          EventHandler.one(this._element, EVENT_SLID, function () {
            return _this8.to(index);
          });
          return;
        }
        var activeIndex = this._getItemIndex(this._getActive());
        if (activeIndex === index) {
          return;
        }
        var order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;
        this._slide(order, items[index]);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        if (this._swipeHelper) {
          this._swipeHelper.dispose();
        }
        _get(_getPrototypeOf(Carousel.prototype), "dispose", this).call(this);
      }

      // Private
    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        config.defaultInterval = config.interval;
        return config;
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        var _this9 = this;
        if (this._config.keyboard) {
          EventHandler.on(this._element, EVENT_KEYDOWN$1, function (event) {
            return _this9._keydown(event);
          });
        }
        if (this._config.pause === 'hover') {
          EventHandler.on(this._element, EVENT_MOUSEENTER$1, function () {
            return _this9.pause();
          });
          EventHandler.on(this._element, EVENT_MOUSELEAVE$1, function () {
            return _this9._maybeEnableCycle();
          });
        }
        if (this._config.touch && Swipe.isSupported()) {
          this._addTouchEventListeners();
        }
      }
    }, {
      key: "_addTouchEventListeners",
      value: function _addTouchEventListeners() {
        var _this10 = this;
        var _iterator4 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var img = _step4.value;
            EventHandler.on(img, EVENT_DRAG_START, function (event) {
              return event.preventDefault();
            });
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        var endCallBack = function endCallBack() {
          if (_this10._config.pause !== 'hover') {
            return;
          }

          // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling

          _this10.pause();
          if (_this10.touchTimeout) {
            clearTimeout(_this10.touchTimeout);
          }
          _this10.touchTimeout = setTimeout(function () {
            return _this10._maybeEnableCycle();
          }, TOUCHEVENT_COMPAT_WAIT + _this10._config.interval);
        };
        var swipeConfig = {
          leftCallback: function leftCallback() {
            return _this10._slide(_this10._directionToOrder(DIRECTION_LEFT));
          },
          rightCallback: function rightCallback() {
            return _this10._slide(_this10._directionToOrder(DIRECTION_RIGHT));
          },
          endCallback: endCallBack
        };
        this._swipeHelper = new Swipe(this._element, swipeConfig);
      }
    }, {
      key: "_keydown",
      value: function _keydown(event) {
        if (/input|textarea/i.test(event.target.tagName)) {
          return;
        }
        var direction = KEY_TO_DIRECTION[event.key];
        if (direction) {
          event.preventDefault();
          this._slide(this._directionToOrder(direction));
        }
      }
    }, {
      key: "_getItemIndex",
      value: function _getItemIndex(element) {
        return this._getItems().indexOf(element);
      }
    }, {
      key: "_setActiveIndicatorElement",
      value: function _setActiveIndicatorElement(index) {
        if (!this._indicatorsElement) {
          return;
        }
        var activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
        activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
        activeIndicator.removeAttribute('aria-current');
        var newActiveIndicator = SelectorEngine.findOne("[data-bs-slide-to=\"".concat(index, "\"]"), this._indicatorsElement);
        if (newActiveIndicator) {
          newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
          newActiveIndicator.setAttribute('aria-current', 'true');
        }
      }
    }, {
      key: "_updateInterval",
      value: function _updateInterval() {
        var element = this._activeElement || this._getActive();
        if (!element) {
          return;
        }
        var elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);
        this._config.interval = elementInterval || this._config.defaultInterval;
      }
    }, {
      key: "_slide",
      value: function _slide(order) {
        var _this11 = this;
        var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        if (this._isSliding) {
          return;
        }
        var activeElement = this._getActive();
        var isNext = order === ORDER_NEXT;
        var nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);
        if (nextElement === activeElement) {
          return;
        }
        var nextElementIndex = this._getItemIndex(nextElement);
        var triggerEvent = function triggerEvent(eventName) {
          return EventHandler.trigger(_this11._element, eventName, {
            relatedTarget: nextElement,
            direction: _this11._orderToDirection(order),
            from: _this11._getItemIndex(activeElement),
            to: nextElementIndex
          });
        };
        var slideEvent = triggerEvent(EVENT_SLIDE);
        if (slideEvent.defaultPrevented) {
          return;
        }
        if (!activeElement || !nextElement) {
          // Some weirdness is happening, so we bail
          // TODO: change tests that use empty divs to avoid this check
          return;
        }
        var isCycling = Boolean(this._interval);
        this.pause();
        this._isSliding = true;
        this._setActiveIndicatorElement(nextElementIndex);
        this._activeElement = nextElement;
        var directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
        var orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
        nextElement.classList.add(orderClassName);
        reflow(nextElement);
        activeElement.classList.add(directionalClassName);
        nextElement.classList.add(directionalClassName);
        var completeCallBack = function completeCallBack() {
          nextElement.classList.remove(directionalClassName, orderClassName);
          nextElement.classList.add(CLASS_NAME_ACTIVE$2);
          activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
          _this11._isSliding = false;
          triggerEvent(EVENT_SLID);
        };
        this._queueCallback(completeCallBack, activeElement, this._isAnimated());
        if (isCycling) {
          this.cycle();
        }
      }
    }, {
      key: "_isAnimated",
      value: function _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_SLIDE);
      }
    }, {
      key: "_getActive",
      value: function _getActive() {
        return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
      }
    }, {
      key: "_getItems",
      value: function _getItems() {
        return SelectorEngine.find(SELECTOR_ITEM, this._element);
      }
    }, {
      key: "_clearInterval",
      value: function _clearInterval() {
        if (this._interval) {
          clearInterval(this._interval);
          this._interval = null;
        }
      }
    }, {
      key: "_directionToOrder",
      value: function _directionToOrder(direction) {
        if (isRTL()) {
          return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
        }
        return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
      }
    }, {
      key: "_orderToDirection",
      value: function _orderToDirection(order) {
        if (isRTL()) {
          return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }
        return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
      }

      // Static
    }], [{
      key: "Default",
      get: function get() {
        return Default$b;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$b;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$c;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Carousel.getOrCreateInstance(this, config);
          if (typeof config === 'number') {
            data.to(config);
            return;
          }
          if (typeof config === 'string') {
            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }
            data[config]();
          }
        });
      }
    }]);
  }(BaseComponent);
  /**
   * Data API implementation
   */
  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function (event) {
    var target = SelectorEngine.getElementFromSelector(this);
    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
      return;
    }
    event.preventDefault();
    var carousel = Carousel.getOrCreateInstance(target);
    var slideIndex = this.getAttribute('data-bs-slide-to');
    if (slideIndex) {
      carousel.to(slideIndex);
      carousel._maybeEnableCycle();
      return;
    }
    if (Manipulator.getDataAttribute(this, 'slide') === 'next') {
      carousel.next();
      carousel._maybeEnableCycle();
      return;
    }
    carousel.prev();
    carousel._maybeEnableCycle();
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$3, function () {
    var carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
    var _iterator5 = _createForOfIteratorHelper(carousels),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var carousel = _step5.value;
        Carousel.getOrCreateInstance(carousel);
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(Carousel);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap collapse.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$b = 'collapse';
  var DATA_KEY$7 = 'bs.collapse';
  var EVENT_KEY$7 = ".".concat(DATA_KEY$7);
  var DATA_API_KEY$4 = '.data-api';
  var EVENT_SHOW$6 = "show".concat(EVENT_KEY$7);
  var EVENT_SHOWN$6 = "shown".concat(EVENT_KEY$7);
  var EVENT_HIDE$6 = "hide".concat(EVENT_KEY$7);
  var EVENT_HIDDEN$6 = "hidden".concat(EVENT_KEY$7);
  var EVENT_CLICK_DATA_API$4 = "click".concat(EVENT_KEY$7).concat(DATA_API_KEY$4);
  var CLASS_NAME_SHOW$7 = 'show';
  var CLASS_NAME_COLLAPSE = 'collapse';
  var CLASS_NAME_COLLAPSING = 'collapsing';
  var CLASS_NAME_COLLAPSED = 'collapsed';
  var CLASS_NAME_DEEPER_CHILDREN = ":scope .".concat(CLASS_NAME_COLLAPSE, " .").concat(CLASS_NAME_COLLAPSE);
  var CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
  var WIDTH = 'width';
  var HEIGHT = 'height';
  var SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
  var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
  var Default$a = {
    parent: null,
    toggle: true
  };
  var DefaultType$a = {
    parent: '(null|element)',
    toggle: 'boolean'
  };

  /**
   * Class definition
   */
  var Collapse = /*#__PURE__*/function (_BaseComponent4) {
    function Collapse(element, config) {
      var _this12;
      _classCallCheck(this, Collapse);
      _this12 = _callSuper(this, Collapse, [element, config]);
      _this12._isTransitioning = false;
      _this12._triggerArray = [];
      var toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
      var _iterator6 = _createForOfIteratorHelper(toggleList),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var elem = _step6.value;
          var selector = SelectorEngine.getSelectorFromElement(elem);
          var filterElement = SelectorEngine.find(selector).filter(function (foundElement) {
            return foundElement === _this12._element;
          });
          if (selector !== null && filterElement.length) {
            _this12._triggerArray.push(elem);
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      _this12._initializeChildren();
      if (!_this12._config.parent) {
        _this12._addAriaAndCollapsedClass(_this12._triggerArray, _this12._isShown());
      }
      if (_this12._config.toggle) {
        _this12.toggle();
      }
      return _this12;
    }

    // Getters
    _inherits(Collapse, _BaseComponent4);
    return _createClass(Collapse, [{
      key: "toggle",
      value:
      // Public
      function toggle() {
        if (this._isShown()) {
          this.hide();
        } else {
          this.show();
        }
      }
    }, {
      key: "show",
      value: function show() {
        var _this13 = this;
        if (this._isTransitioning || this._isShown()) {
          return;
        }
        var activeChildren = [];

        // find active children
        if (this._config.parent) {
          activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter(function (element) {
            return element !== _this13._element;
          }).map(function (element) {
            return Collapse.getOrCreateInstance(element, {
              toggle: false
            });
          });
        }
        if (activeChildren.length && activeChildren[0]._isTransitioning) {
          return;
        }
        var startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);
        if (startEvent.defaultPrevented) {
          return;
        }
        var _iterator7 = _createForOfIteratorHelper(activeChildren),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var activeInstance = _step7.value;
            activeInstance.hide();
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
        var dimension = this._getDimension();
        this._element.classList.remove(CLASS_NAME_COLLAPSE);
        this._element.classList.add(CLASS_NAME_COLLAPSING);
        this._element.style[dimension] = 0;
        this._addAriaAndCollapsedClass(this._triggerArray, true);
        this._isTransitioning = true;
        var complete = function complete() {
          _this13._isTransitioning = false;
          _this13._element.classList.remove(CLASS_NAME_COLLAPSING);
          _this13._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
          _this13._element.style[dimension] = '';
          EventHandler.trigger(_this13._element, EVENT_SHOWN$6);
        };
        var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
        var scrollSize = "scroll".concat(capitalizedDimension);
        this._queueCallback(complete, this._element, true);
        this._element.style[dimension] = "".concat(this._element[scrollSize], "px");
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this14 = this;
        if (this._isTransitioning || !this._isShown()) {
          return;
        }
        var startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);
        if (startEvent.defaultPrevented) {
          return;
        }
        var dimension = this._getDimension();
        this._element.style[dimension] = "".concat(this._element.getBoundingClientRect()[dimension], "px");
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_COLLAPSING);
        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
        var _iterator8 = _createForOfIteratorHelper(this._triggerArray),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var trigger = _step8.value;
            var element = SelectorEngine.getElementFromSelector(trigger);
            if (element && !this._isShown(element)) {
              this._addAriaAndCollapsedClass([trigger], false);
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
        this._isTransitioning = true;
        var complete = function complete() {
          _this14._isTransitioning = false;
          _this14._element.classList.remove(CLASS_NAME_COLLAPSING);
          _this14._element.classList.add(CLASS_NAME_COLLAPSE);
          EventHandler.trigger(_this14._element, EVENT_HIDDEN$6);
        };
        this._element.style[dimension] = '';
        this._queueCallback(complete, this._element, true);
      }
    }, {
      key: "_isShown",
      value: function _isShown() {
        var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;
        return element.classList.contains(CLASS_NAME_SHOW$7);
      }

      // Private
    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        config.toggle = Boolean(config.toggle); // Coerce string values
        config.parent = getElement(config.parent);
        return config;
      }
    }, {
      key: "_getDimension",
      value: function _getDimension() {
        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
      }
    }, {
      key: "_initializeChildren",
      value: function _initializeChildren() {
        if (!this._config.parent) {
          return;
        }
        var children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);
        var _iterator9 = _createForOfIteratorHelper(children),
          _step9;
        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var element = _step9.value;
            var selected = SelectorEngine.getElementFromSelector(element);
            if (selected) {
              this._addAriaAndCollapsedClass([element], this._isShown(selected));
            }
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      }
    }, {
      key: "_getFirstLevelChildren",
      value: function _getFirstLevelChildren(selector) {
        var children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
        // remove children if greater depth
        return SelectorEngine.find(selector, this._config.parent).filter(function (element) {
          return !children.includes(element);
        });
      }
    }, {
      key: "_addAriaAndCollapsedClass",
      value: function _addAriaAndCollapsedClass(triggerArray, isOpen) {
        if (!triggerArray.length) {
          return;
        }
        var _iterator10 = _createForOfIteratorHelper(triggerArray),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var element = _step10.value;
            element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
            element.setAttribute('aria-expanded', isOpen);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      }

      // Static
    }], [{
      key: "Default",
      get: function get() {
        return Default$a;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$a;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$b;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        var _config = {};
        if (typeof config === 'string' && /show|hide/.test(config)) {
          _config.toggle = false;
        }
        return this.each(function () {
          var data = Collapse.getOrCreateInstance(this, _config);
          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }
            data[config]();
          }
        });
      }
    }]);
  }(BaseComponent);
  /**
   * Data API implementation
   */
  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
      event.preventDefault();
    }
    var _iterator11 = _createForOfIteratorHelper(SelectorEngine.getMultipleElementsFromSelector(this)),
      _step11;
    try {
      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
        var element = _step11.value;
        Collapse.getOrCreateInstance(element, {
          toggle: false
        }).toggle();
      }
    } catch (err) {
      _iterator11.e(err);
    } finally {
      _iterator11.f();
    }
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(Collapse);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$a = 'dropdown';
  var DATA_KEY$6 = 'bs.dropdown';
  var EVENT_KEY$6 = ".".concat(DATA_KEY$6);
  var DATA_API_KEY$3 = '.data-api';
  var ESCAPE_KEY$2 = 'Escape';
  var TAB_KEY$1 = 'Tab';
  var ARROW_UP_KEY$1 = 'ArrowUp';
  var ARROW_DOWN_KEY$1 = 'ArrowDown';
  var RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

  var EVENT_HIDE$5 = "hide".concat(EVENT_KEY$6);
  var EVENT_HIDDEN$5 = "hidden".concat(EVENT_KEY$6);
  var EVENT_SHOW$5 = "show".concat(EVENT_KEY$6);
  var EVENT_SHOWN$5 = "shown".concat(EVENT_KEY$6);
  var EVENT_CLICK_DATA_API$3 = "click".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);
  var EVENT_KEYDOWN_DATA_API = "keydown".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);
  var EVENT_KEYUP_DATA_API = "keyup".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);
  var CLASS_NAME_SHOW$6 = 'show';
  var CLASS_NAME_DROPUP = 'dropup';
  var CLASS_NAME_DROPEND = 'dropend';
  var CLASS_NAME_DROPSTART = 'dropstart';
  var CLASS_NAME_DROPUP_CENTER = 'dropup-center';
  var CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center';
  var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
  var SELECTOR_DATA_TOGGLE_SHOWN = "".concat(SELECTOR_DATA_TOGGLE$3, ".").concat(CLASS_NAME_SHOW$6);
  var SELECTOR_MENU = '.dropdown-menu';
  var SELECTOR_NAVBAR = '.navbar';
  var SELECTOR_NAVBAR_NAV = '.navbar-nav';
  var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
  var PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
  var PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
  var PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
  var PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
  var PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
  var PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
  var PLACEMENT_TOPCENTER = 'top';
  var PLACEMENT_BOTTOMCENTER = 'bottom';
  var Default$9 = {
    autoClose: true,
    boundary: 'clippingParents',
    display: 'dynamic',
    offset: [0, 2],
    popperConfig: null,
    reference: 'toggle'
  };
  var DefaultType$9 = {
    autoClose: '(boolean|string)',
    boundary: '(string|element)',
    display: 'string',
    offset: '(array|string|function)',
    popperConfig: '(null|object|function)',
    reference: '(string|element|object)'
  };

  /**
   * Class definition
   */
  var Dropdown = /*#__PURE__*/function (_BaseComponent5) {
    function Dropdown(element, config) {
      var _this15;
      _classCallCheck(this, Dropdown);
      _this15 = _callSuper(this, Dropdown, [element, config]);
      _this15._popper = null;
      _this15._parent = _this15._element.parentNode; // dropdown wrapper
      // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/
      _this15._menu = SelectorEngine.next(_this15._element, SELECTOR_MENU)[0] || SelectorEngine.prev(_this15._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, _this15._parent);
      _this15._inNavbar = _this15._detectNavbar();
      return _this15;
    }

    // Getters
    _inherits(Dropdown, _BaseComponent5);
    return _createClass(Dropdown, [{
      key: "toggle",
      value:
      // Public
      function toggle() {
        return this._isShown() ? this.hide() : this.show();
      }
    }, {
      key: "show",
      value: function show() {
        if (isDisabled(this._element) || this._isShown()) {
          return;
        }
        var relatedTarget = {
          relatedTarget: this._element
        };
        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);
        if (showEvent.defaultPrevented) {
          return;
        }
        this._createPopper();

        // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
        if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
          var _ref4;
          var _iterator12 = _createForOfIteratorHelper((_ref4 = []).concat.apply(_ref4, _toConsumableArray(document.body.children))),
            _step12;
          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var element = _step12.value;
              EventHandler.on(element, 'mouseover', noop);
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }
        }
        this._element.focus();
        this._element.setAttribute('aria-expanded', true);
        this._menu.classList.add(CLASS_NAME_SHOW$6);
        this._element.classList.add(CLASS_NAME_SHOW$6);
        EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
      }
    }, {
      key: "hide",
      value: function hide() {
        if (isDisabled(this._element) || !this._isShown()) {
          return;
        }
        var relatedTarget = {
          relatedTarget: this._element
        };
        this._completeHide(relatedTarget);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        if (this._popper) {
          this._popper.destroy();
        }
        _get(_getPrototypeOf(Dropdown.prototype), "dispose", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._inNavbar = this._detectNavbar();
        if (this._popper) {
          this._popper.update();
        }
      }

      // Private
    }, {
      key: "_completeHide",
      value: function _completeHide(relatedTarget) {
        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);
        if (hideEvent.defaultPrevented) {
          return;
        }

        // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support
        if ('ontouchstart' in document.documentElement) {
          var _ref5;
          var _iterator13 = _createForOfIteratorHelper((_ref5 = []).concat.apply(_ref5, _toConsumableArray(document.body.children))),
            _step13;
          try {
            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
              var element = _step13.value;
              EventHandler.off(element, 'mouseover', noop);
            }
          } catch (err) {
            _iterator13.e(err);
          } finally {
            _iterator13.f();
          }
        }
        if (this._popper) {
          this._popper.destroy();
        }
        this._menu.classList.remove(CLASS_NAME_SHOW$6);
        this._element.classList.remove(CLASS_NAME_SHOW$6);
        this._element.setAttribute('aria-expanded', 'false');
        Manipulator.removeDataAttribute(this._menu, 'popper');
        EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _get(_getPrototypeOf(Dropdown.prototype), "_getConfig", this).call(this, config);
        if (_typeof(config.reference) === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {
          // Popper virtual elements require a getBoundingClientRect method
          throw new TypeError("".concat(NAME$a.toUpperCase(), ": Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method."));
        }
        return config;
      }
    }, {
      key: "_createPopper",
      value: function _createPopper() {
        if (typeof Popper__namespace === 'undefined') {
          throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
        }
        var referenceElement = this._element;
        if (this._config.reference === 'parent') {
          referenceElement = this._parent;
        } else if (isElement(this._config.reference)) {
          referenceElement = getElement(this._config.reference);
        } else if (_typeof(this._config.reference) === 'object') {
          referenceElement = this._config.reference;
        }
        var popperConfig = this._getPopperConfig();
        this._popper = Popper__namespace.createPopper(referenceElement, this._menu, popperConfig);
      }
    }, {
      key: "_isShown",
      value: function _isShown() {
        return this._menu.classList.contains(CLASS_NAME_SHOW$6);
      }
    }, {
      key: "_getPlacement",
      value: function _getPlacement() {
        var parentDropdown = this._parent;
        if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
          return PLACEMENT_RIGHT;
        }
        if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
          return PLACEMENT_LEFT;
        }
        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
          return PLACEMENT_TOPCENTER;
        }
        if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
          return PLACEMENT_BOTTOMCENTER;
        }

        // We need to trim the value because custom properties can also include spaces
        var isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';
        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
          return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
        }
        return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
      }
    }, {
      key: "_detectNavbar",
      value: function _detectNavbar() {
        return this._element.closest(SELECTOR_NAVBAR) !== null;
      }
    }, {
      key: "_getOffset",
      value: function _getOffset() {
        var _this16 = this;
        var offset = this._config.offset;
        if (typeof offset === 'string') {
          return offset.split(',').map(function (value) {
            return Number.parseInt(value, 10);
          });
        }
        if (typeof offset === 'function') {
          return function (popperData) {
            return offset(popperData, _this16._element);
          };
        }
        return offset;
      }
    }, {
      key: "_getPopperConfig",
      value: function _getPopperConfig() {
        var defaultBsPopperConfig = {
          placement: this._getPlacement(),
          modifiers: [{
            name: 'preventOverflow',
            options: {
              boundary: this._config.boundary
            }
          }, {
            name: 'offset',
            options: {
              offset: this._getOffset()
            }
          }]
        };

        // Disable Popper if we have a static display or Dropdown is in Navbar
        if (this._inNavbar || this._config.display === 'static') {
          Manipulator.setDataAttribute(this._menu, 'popper', 'static'); // TODO: v6 remove
          defaultBsPopperConfig.modifiers = [{
            name: 'applyStyles',
            enabled: false
          }];
        }
        return _objectSpread(_objectSpread({}, defaultBsPopperConfig), execute(this._config.popperConfig, [defaultBsPopperConfig]));
      }
    }, {
      key: "_selectMenuItem",
      value: function _selectMenuItem(_ref6) {
        var key = _ref6.key,
          target = _ref6.target;
        var items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(function (element) {
          return isVisible(element);
        });
        if (!items.length) {
          return;
        }

        // if target isn't included in items (e.g. when expanding the dropdown)
        // allow cycling to get the last item in case key equals ARROW_UP_KEY
        getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
      }

      // Static
    }], [{
      key: "Default",
      get: function get() {
        return Default$9;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$9;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$a;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Dropdown.getOrCreateInstance(this, config);
          if (typeof config !== 'string') {
            return;
          }
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }
          data[config]();
        });
      }
    }, {
      key: "clearMenus",
      value: function clearMenus(event) {
        if (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1) {
          return;
        }
        var openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);
        var _iterator14 = _createForOfIteratorHelper(openToggles),
          _step14;
        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var toggle = _step14.value;
            var context = Dropdown.getInstance(toggle);
            if (!context || context._config.autoClose === false) {
              continue;
            }
            var composedPath = event.composedPath();
            var isMenuTarget = composedPath.includes(context._menu);
            if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {
              continue;
            }

            // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu
            if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
              continue;
            }
            var relatedTarget = {
              relatedTarget: context._element
            };
            if (event.type === 'click') {
              relatedTarget.clickEvent = event;
            }
            context._completeHide(relatedTarget);
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
      }
    }, {
      key: "dataApiKeydownHandler",
      value: function dataApiKeydownHandler(event) {
        // If not an UP | DOWN | ESCAPE key => not a dropdown command
        // If input/textarea && if key is other than ESCAPE => not a dropdown command

        var isInput = /input|textarea/i.test(event.target.tagName);
        var isEscapeEvent = event.key === ESCAPE_KEY$2;
        var isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);
        if (!isUpOrDownEvent && !isEscapeEvent) {
          return;
        }
        if (isInput && !isEscapeEvent) {
          return;
        }
        event.preventDefault();

        // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/
        var getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
        var instance = Dropdown.getOrCreateInstance(getToggleButton);
        if (isUpOrDownEvent) {
          event.stopPropagation();
          instance.show();
          instance._selectMenuItem(event);
          return;
        }
        if (instance._isShown()) {
          // else is escape and we check if it is shown
          event.stopPropagation();
          instance.hide();
          getToggleButton.focus();
        }
      }
    }]);
  }(BaseComponent);
  /**
   * Data API implementation
   */
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(Dropdown);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/backdrop.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$9 = 'backdrop';
  var CLASS_NAME_FADE$4 = 'fade';
  var CLASS_NAME_SHOW$5 = 'show';
  var EVENT_MOUSEDOWN = "mousedown.bs.".concat(NAME$9);
  var Default$8 = {
    className: 'modal-backdrop',
    clickCallback: null,
    isAnimated: false,
    isVisible: true,
    // if false, we use the backdrop helper without adding any element to the dom
    rootElement: 'body' // give the choice to place backdrop under different elements
  };
  var DefaultType$8 = {
    className: 'string',
    clickCallback: '(function|null)',
    isAnimated: 'boolean',
    isVisible: 'boolean',
    rootElement: '(element|string)'
  };

  /**
   * Class definition
   */
  var Backdrop = /*#__PURE__*/function (_Config3) {
    function Backdrop(config) {
      var _this17;
      _classCallCheck(this, Backdrop);
      _this17 = _callSuper(this, Backdrop);
      _this17._config = _this17._getConfig(config);
      _this17._isAppended = false;
      _this17._element = null;
      return _this17;
    }

    // Getters
    _inherits(Backdrop, _Config3);
    return _createClass(Backdrop, [{
      key: "show",
      value:
      // Public
      function show(callback) {
        if (!this._config.isVisible) {
          execute(callback);
          return;
        }
        this._append();
        var element = this._getElement();
        if (this._config.isAnimated) {
          reflow(element);
        }
        element.classList.add(CLASS_NAME_SHOW$5);
        this._emulateAnimation(function () {
          execute(callback);
        });
      }
    }, {
      key: "hide",
      value: function hide(callback) {
        var _this18 = this;
        if (!this._config.isVisible) {
          execute(callback);
          return;
        }
        this._getElement().classList.remove(CLASS_NAME_SHOW$5);
        this._emulateAnimation(function () {
          _this18.dispose();
          execute(callback);
        });
      }
    }, {
      key: "dispose",
      value: function dispose() {
        if (!this._isAppended) {
          return;
        }
        EventHandler.off(this._element, EVENT_MOUSEDOWN);
        this._element.remove();
        this._isAppended = false;
      }

      // Private
    }, {
      key: "_getElement",
      value: function _getElement() {
        if (!this._element) {
          var backdrop = document.createElement('div');
          backdrop.className = this._config.className;
          if (this._config.isAnimated) {
            backdrop.classList.add(CLASS_NAME_FADE$4);
          }
          this._element = backdrop;
        }
        return this._element;
      }
    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        // use getElement() with the default "body" to get a fresh Element on each instantiation
        config.rootElement = getElement(config.rootElement);
        return config;
      }
    }, {
      key: "_append",
      value: function _append() {
        var _this19 = this;
        if (this._isAppended) {
          return;
        }
        var element = this._getElement();
        this._config.rootElement.append(element);
        EventHandler.on(element, EVENT_MOUSEDOWN, function () {
          execute(_this19._config.clickCallback);
        });
        this._isAppended = true;
      }
    }, {
      key: "_emulateAnimation",
      value: function _emulateAnimation(callback) {
        executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
      }
    }], [{
      key: "Default",
      get: function get() {
        return Default$8;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$8;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$9;
      }
    }]);
  }(Config);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/focustrap.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * Constants
   */
  var NAME$8 = 'focustrap';
  var DATA_KEY$5 = 'bs.focustrap';
  var EVENT_KEY$5 = ".".concat(DATA_KEY$5);
  var EVENT_FOCUSIN$2 = "focusin".concat(EVENT_KEY$5);
  var EVENT_KEYDOWN_TAB = "keydown.tab".concat(EVENT_KEY$5);
  var TAB_KEY = 'Tab';
  var TAB_NAV_FORWARD = 'forward';
  var TAB_NAV_BACKWARD = 'backward';
  var Default$7 = {
    autofocus: true,
    trapElement: null // The element to trap focus inside of
  };
  var DefaultType$7 = {
    autofocus: 'boolean',
    trapElement: 'element'
  };

  /**
   * Class definition
   */
  var FocusTrap = /*#__PURE__*/function (_Config4) {
    function FocusTrap(config) {
      var _this20;
      _classCallCheck(this, FocusTrap);
      _this20 = _callSuper(this, FocusTrap);
      _this20._config = _this20._getConfig(config);
      _this20._isActive = false;
      _this20._lastTabNavDirection = null;
      return _this20;
    }

    // Getters
    _inherits(FocusTrap, _Config4);
    return _createClass(FocusTrap, [{
      key: "activate",
      value:
      // Public
      function activate() {
        var _this21 = this;
        if (this._isActive) {
          return;
        }
        if (this._config.autofocus) {
          this._config.trapElement.focus();
        }
        EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop
        EventHandler.on(document, EVENT_FOCUSIN$2, function (event) {
          return _this21._handleFocusin(event);
        });
        EventHandler.on(document, EVENT_KEYDOWN_TAB, function (event) {
          return _this21._handleKeydown(event);
        });
        this._isActive = true;
      }
    }, {
      key: "deactivate",
      value: function deactivate() {
        if (!this._isActive) {
          return;
        }
        this._isActive = false;
        EventHandler.off(document, EVENT_KEY$5);
      }

      // Private
    }, {
      key: "_handleFocusin",
      value: function _handleFocusin(event) {
        var trapElement = this._config.trapElement;
        if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
          return;
        }
        var elements = SelectorEngine.focusableChildren(trapElement);
        if (elements.length === 0) {
          trapElement.focus();
        } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
          elements[elements.length - 1].focus();
        } else {
          elements[0].focus();
        }
      }
    }, {
      key: "_handleKeydown",
      value: function _handleKeydown(event) {
        if (event.key !== TAB_KEY) {
          return;
        }
        this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
      }
    }], [{
      key: "Default",
      get: function get() {
        return Default$7;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$7;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$8;
      }
    }]);
  }(Config);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/scrollBar.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * Constants
   */
  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
  var SELECTOR_STICKY_CONTENT = '.sticky-top';
  var PROPERTY_PADDING = 'padding-right';
  var PROPERTY_MARGIN = 'margin-right';

  /**
   * Class definition
   */
  var ScrollBarHelper = /*#__PURE__*/function () {
    function ScrollBarHelper() {
      _classCallCheck(this, ScrollBarHelper);
      this._element = document.body;
    }

    // Public
    return _createClass(ScrollBarHelper, [{
      key: "getWidth",
      value: function getWidth() {
        // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
        var documentWidth = document.documentElement.clientWidth;
        return Math.abs(window.innerWidth - documentWidth);
      }
    }, {
      key: "hide",
      value: function hide() {
        var width = this.getWidth();
        this._disableOverFlow();
        // give padding to element to balance the hidden scrollbar width
        this._setElementAttributes(this._element, PROPERTY_PADDING, function (calculatedValue) {
          return calculatedValue + width;
        });
        // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth
        this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, function (calculatedValue) {
          return calculatedValue + width;
        });
        this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, function (calculatedValue) {
          return calculatedValue - width;
        });
      }
    }, {
      key: "reset",
      value: function reset() {
        this._resetElementAttributes(this._element, 'overflow');
        this._resetElementAttributes(this._element, PROPERTY_PADDING);
        this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);
        this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
      }
    }, {
      key: "isOverflowing",
      value: function isOverflowing() {
        return this.getWidth() > 0;
      }

      // Private
    }, {
      key: "_disableOverFlow",
      value: function _disableOverFlow() {
        this._saveInitialAttribute(this._element, 'overflow');
        this._element.style.overflow = 'hidden';
      }
    }, {
      key: "_setElementAttributes",
      value: function _setElementAttributes(selector, styleProperty, callback) {
        var _this22 = this;
        var scrollbarWidth = this.getWidth();
        var manipulationCallBack = function manipulationCallBack(element) {
          if (element !== _this22._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
            return;
          }
          _this22._saveInitialAttribute(element, styleProperty);
          var calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
          element.style.setProperty(styleProperty, "".concat(callback(Number.parseFloat(calculatedValue)), "px"));
        };
        this._applyManipulationCallback(selector, manipulationCallBack);
      }
    }, {
      key: "_saveInitialAttribute",
      value: function _saveInitialAttribute(element, styleProperty) {
        var actualValue = element.style.getPropertyValue(styleProperty);
        if (actualValue) {
          Manipulator.setDataAttribute(element, styleProperty, actualValue);
        }
      }
    }, {
      key: "_resetElementAttributes",
      value: function _resetElementAttributes(selector, styleProperty) {
        var manipulationCallBack = function manipulationCallBack(element) {
          var value = Manipulator.getDataAttribute(element, styleProperty);
          // We only want to remove the property if the value is `null`; the value can also be zero
          if (value === null) {
            element.style.removeProperty(styleProperty);
            return;
          }
          Manipulator.removeDataAttribute(element, styleProperty);
          element.style.setProperty(styleProperty, value);
        };
        this._applyManipulationCallback(selector, manipulationCallBack);
      }
    }, {
      key: "_applyManipulationCallback",
      value: function _applyManipulationCallback(selector, callBack) {
        if (isElement(selector)) {
          callBack(selector);
          return;
        }
        var _iterator15 = _createForOfIteratorHelper(SelectorEngine.find(selector, this._element)),
          _step15;
        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var sel = _step15.value;
            callBack(sel);
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
      }
    }]);
  }();
  /**
   * --------------------------------------------------------------------------
   * Bootstrap modal.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * Constants
   */
  var NAME$7 = 'modal';
  var DATA_KEY$4 = 'bs.modal';
  var EVENT_KEY$4 = ".".concat(DATA_KEY$4);
  var DATA_API_KEY$2 = '.data-api';
  var ESCAPE_KEY$1 = 'Escape';
  var EVENT_HIDE$4 = "hide".concat(EVENT_KEY$4);
  var EVENT_HIDE_PREVENTED$1 = "hidePrevented".concat(EVENT_KEY$4);
  var EVENT_HIDDEN$4 = "hidden".concat(EVENT_KEY$4);
  var EVENT_SHOW$4 = "show".concat(EVENT_KEY$4);
  var EVENT_SHOWN$4 = "shown".concat(EVENT_KEY$4);
  var EVENT_RESIZE$1 = "resize".concat(EVENT_KEY$4);
  var EVENT_CLICK_DISMISS = "click.dismiss".concat(EVENT_KEY$4);
  var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss".concat(EVENT_KEY$4);
  var EVENT_KEYDOWN_DISMISS$1 = "keydown.dismiss".concat(EVENT_KEY$4);
  var EVENT_CLICK_DATA_API$2 = "click".concat(EVENT_KEY$4).concat(DATA_API_KEY$2);
  var CLASS_NAME_OPEN = 'modal-open';
  var CLASS_NAME_FADE$3 = 'fade';
  var CLASS_NAME_SHOW$4 = 'show';
  var CLASS_NAME_STATIC = 'modal-static';
  var OPEN_SELECTOR$1 = '.modal.show';
  var SELECTOR_DIALOG = '.modal-dialog';
  var SELECTOR_MODAL_BODY = '.modal-body';
  var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
  var Default$6 = {
    backdrop: true,
    focus: true,
    keyboard: true
  };
  var DefaultType$6 = {
    backdrop: '(boolean|string)',
    focus: 'boolean',
    keyboard: 'boolean'
  };

  /**
   * Class definition
   */
  var Modal = /*#__PURE__*/function (_BaseComponent6) {
    function Modal(element, config) {
      var _this23;
      _classCallCheck(this, Modal);
      _this23 = _callSuper(this, Modal, [element, config]);
      _this23._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, _this23._element);
      _this23._backdrop = _this23._initializeBackDrop();
      _this23._focustrap = _this23._initializeFocusTrap();
      _this23._isShown = false;
      _this23._isTransitioning = false;
      _this23._scrollBar = new ScrollBarHelper();
      _this23._addEventListeners();
      return _this23;
    }

    // Getters
    _inherits(Modal, _BaseComponent6);
    return _createClass(Modal, [{
      key: "toggle",
      value:
      // Public
      function toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
      }
    }, {
      key: "show",
      value: function show(relatedTarget) {
        var _this24 = this;
        if (this._isShown || this._isTransitioning) {
          return;
        }
        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
          relatedTarget: relatedTarget
        });
        if (showEvent.defaultPrevented) {
          return;
        }
        this._isShown = true;
        this._isTransitioning = true;
        this._scrollBar.hide();
        document.body.classList.add(CLASS_NAME_OPEN);
        this._adjustDialog();
        this._backdrop.show(function () {
          return _this24._showElement(relatedTarget);
        });
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this25 = this;
        if (!this._isShown || this._isTransitioning) {
          return;
        }
        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);
        if (hideEvent.defaultPrevented) {
          return;
        }
        this._isShown = false;
        this._isTransitioning = true;
        this._focustrap.deactivate();
        this._element.classList.remove(CLASS_NAME_SHOW$4);
        this._queueCallback(function () {
          return _this25._hideModal();
        }, this._element, this._isAnimated());
      }
    }, {
      key: "dispose",
      value: function dispose() {
        EventHandler.off(window, EVENT_KEY$4);
        EventHandler.off(this._dialog, EVENT_KEY$4);
        this._backdrop.dispose();
        this._focustrap.deactivate();
        _get(_getPrototypeOf(Modal.prototype), "dispose", this).call(this);
      }
    }, {
      key: "handleUpdate",
      value: function handleUpdate() {
        this._adjustDialog();
      }

      // Private
    }, {
      key: "_initializeBackDrop",
      value: function _initializeBackDrop() {
        return new Backdrop({
          isVisible: Boolean(this._config.backdrop),
          // 'static' option will be translated to true, and booleans will keep their value,
          isAnimated: this._isAnimated()
        });
      }
    }, {
      key: "_initializeFocusTrap",
      value: function _initializeFocusTrap() {
        return new FocusTrap({
          trapElement: this._element
        });
      }
    }, {
      key: "_showElement",
      value: function _showElement(relatedTarget) {
        var _this26 = this;
        // try to append dynamic modal
        if (!document.body.contains(this._element)) {
          document.body.append(this._element);
        }
        this._element.style.display = 'block';
        this._element.removeAttribute('aria-hidden');
        this._element.setAttribute('aria-modal', true);
        this._element.setAttribute('role', 'dialog');
        this._element.scrollTop = 0;
        var modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
        if (modalBody) {
          modalBody.scrollTop = 0;
        }
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_SHOW$4);
        var transitionComplete = function transitionComplete() {
          if (_this26._config.focus) {
            _this26._focustrap.activate();
          }
          _this26._isTransitioning = false;
          EventHandler.trigger(_this26._element, EVENT_SHOWN$4, {
            relatedTarget: relatedTarget
          });
        };
        this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        var _this27 = this;
        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, function (event) {
          if (event.key !== ESCAPE_KEY$1) {
            return;
          }
          if (_this27._config.keyboard) {
            _this27.hide();
            return;
          }
          _this27._triggerBackdropTransition();
        });
        EventHandler.on(window, EVENT_RESIZE$1, function () {
          if (_this27._isShown && !_this27._isTransitioning) {
            _this27._adjustDialog();
          }
        });
        EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, function (event) {
          // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks
          EventHandler.one(_this27._element, EVENT_CLICK_DISMISS, function (event2) {
            if (_this27._element !== event.target || _this27._element !== event2.target) {
              return;
            }
            if (_this27._config.backdrop === 'static') {
              _this27._triggerBackdropTransition();
              return;
            }
            if (_this27._config.backdrop) {
              _this27.hide();
            }
          });
        });
      }
    }, {
      key: "_hideModal",
      value: function _hideModal() {
        var _this28 = this;
        this._element.style.display = 'none';
        this._element.setAttribute('aria-hidden', true);
        this._element.removeAttribute('aria-modal');
        this._element.removeAttribute('role');
        this._isTransitioning = false;
        this._backdrop.hide(function () {
          document.body.classList.remove(CLASS_NAME_OPEN);
          _this28._resetAdjustments();
          _this28._scrollBar.reset();
          EventHandler.trigger(_this28._element, EVENT_HIDDEN$4);
        });
      }
    }, {
      key: "_isAnimated",
      value: function _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_FADE$3);
      }
    }, {
      key: "_triggerBackdropTransition",
      value: function _triggerBackdropTransition() {
        var _this29 = this;
        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);
        if (hideEvent.defaultPrevented) {
          return;
        }
        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
        var initialOverflowY = this._element.style.overflowY;
        // return if the following background transition hasn't yet completed
        if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {
          return;
        }
        if (!isModalOverflowing) {
          this._element.style.overflowY = 'hidden';
        }
        this._element.classList.add(CLASS_NAME_STATIC);
        this._queueCallback(function () {
          _this29._element.classList.remove(CLASS_NAME_STATIC);
          _this29._queueCallback(function () {
            _this29._element.style.overflowY = initialOverflowY;
          }, _this29._dialog);
        }, this._dialog);
        this._element.focus();
      }

      /**
       * The following methods are used to handle overflowing modals
       */
    }, {
      key: "_adjustDialog",
      value: function _adjustDialog() {
        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
        var scrollbarWidth = this._scrollBar.getWidth();
        var isBodyOverflowing = scrollbarWidth > 0;
        if (isBodyOverflowing && !isModalOverflowing) {
          var property = isRTL() ? 'paddingLeft' : 'paddingRight';
          this._element.style[property] = "".concat(scrollbarWidth, "px");
        }
        if (!isBodyOverflowing && isModalOverflowing) {
          var _property = isRTL() ? 'paddingRight' : 'paddingLeft';
          this._element.style[_property] = "".concat(scrollbarWidth, "px");
        }
      }
    }, {
      key: "_resetAdjustments",
      value: function _resetAdjustments() {
        this._element.style.paddingLeft = '';
        this._element.style.paddingRight = '';
      }

      // Static
    }], [{
      key: "Default",
      get: function get() {
        return Default$6;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$6;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$7;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config, relatedTarget) {
        return this.each(function () {
          var data = Modal.getOrCreateInstance(this, config);
          if (typeof config !== 'string') {
            return;
          }
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }
          data[config](relatedTarget);
        });
      }
    }]);
  }(BaseComponent);
  /**
   * Data API implementation
   */
  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {
    var _this30 = this;
    var target = SelectorEngine.getElementFromSelector(this);
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }
    EventHandler.one(target, EVENT_SHOW$4, function (showEvent) {
      if (showEvent.defaultPrevented) {
        // only register focus restorer if modal will actually get shown
        return;
      }
      EventHandler.one(target, EVENT_HIDDEN$4, function () {
        if (isVisible(_this30)) {
          _this30.focus();
        }
      });
    });

    // avoid conflict when clicking modal toggler while another one is open
    var alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
    if (alreadyOpen) {
      Modal.getInstance(alreadyOpen).hide();
    }
    var data = Modal.getOrCreateInstance(target);
    data.toggle(this);
  });
  enableDismissTrigger(Modal);

  /**
   * jQuery
   */

  defineJQueryPlugin(Modal);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap offcanvas.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$6 = 'offcanvas';
  var DATA_KEY$3 = 'bs.offcanvas';
  var EVENT_KEY$3 = ".".concat(DATA_KEY$3);
  var DATA_API_KEY$1 = '.data-api';
  var EVENT_LOAD_DATA_API$2 = "load".concat(EVENT_KEY$3).concat(DATA_API_KEY$1);
  var ESCAPE_KEY = 'Escape';
  var CLASS_NAME_SHOW$3 = 'show';
  var CLASS_NAME_SHOWING$1 = 'showing';
  var CLASS_NAME_HIDING = 'hiding';
  var CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
  var OPEN_SELECTOR = '.offcanvas.show';
  var EVENT_SHOW$3 = "show".concat(EVENT_KEY$3);
  var EVENT_SHOWN$3 = "shown".concat(EVENT_KEY$3);
  var EVENT_HIDE$3 = "hide".concat(EVENT_KEY$3);
  var EVENT_HIDE_PREVENTED = "hidePrevented".concat(EVENT_KEY$3);
  var EVENT_HIDDEN$3 = "hidden".concat(EVENT_KEY$3);
  var EVENT_RESIZE = "resize".concat(EVENT_KEY$3);
  var EVENT_CLICK_DATA_API$1 = "click".concat(EVENT_KEY$3).concat(DATA_API_KEY$1);
  var EVENT_KEYDOWN_DISMISS = "keydown.dismiss".concat(EVENT_KEY$3);
  var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
  var Default$5 = {
    backdrop: true,
    keyboard: true,
    scroll: false
  };
  var DefaultType$5 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    scroll: 'boolean'
  };

  /**
   * Class definition
   */
  var Offcanvas = /*#__PURE__*/function (_BaseComponent7) {
    function Offcanvas(element, config) {
      var _this31;
      _classCallCheck(this, Offcanvas);
      _this31 = _callSuper(this, Offcanvas, [element, config]);
      _this31._isShown = false;
      _this31._backdrop = _this31._initializeBackDrop();
      _this31._focustrap = _this31._initializeFocusTrap();
      _this31._addEventListeners();
      return _this31;
    }

    // Getters
    _inherits(Offcanvas, _BaseComponent7);
    return _createClass(Offcanvas, [{
      key: "toggle",
      value:
      // Public
      function toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
      }
    }, {
      key: "show",
      value: function show(relatedTarget) {
        var _this32 = this;
        if (this._isShown) {
          return;
        }
        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
          relatedTarget: relatedTarget
        });
        if (showEvent.defaultPrevented) {
          return;
        }
        this._isShown = true;
        this._backdrop.show();
        if (!this._config.scroll) {
          new ScrollBarHelper().hide();
        }
        this._element.setAttribute('aria-modal', true);
        this._element.setAttribute('role', 'dialog');
        this._element.classList.add(CLASS_NAME_SHOWING$1);
        var completeCallBack = function completeCallBack() {
          if (!_this32._config.scroll || _this32._config.backdrop) {
            _this32._focustrap.activate();
          }
          _this32._element.classList.add(CLASS_NAME_SHOW$3);
          _this32._element.classList.remove(CLASS_NAME_SHOWING$1);
          EventHandler.trigger(_this32._element, EVENT_SHOWN$3, {
            relatedTarget: relatedTarget
          });
        };
        this._queueCallback(completeCallBack, this._element, true);
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this33 = this;
        if (!this._isShown) {
          return;
        }
        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
        if (hideEvent.defaultPrevented) {
          return;
        }
        this._focustrap.deactivate();
        this._element.blur();
        this._isShown = false;
        this._element.classList.add(CLASS_NAME_HIDING);
        this._backdrop.hide();
        var completeCallback = function completeCallback() {
          _this33._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);
          _this33._element.removeAttribute('aria-modal');
          _this33._element.removeAttribute('role');
          if (!_this33._config.scroll) {
            new ScrollBarHelper().reset();
          }
          EventHandler.trigger(_this33._element, EVENT_HIDDEN$3);
        };
        this._queueCallback(completeCallback, this._element, true);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this._backdrop.dispose();
        this._focustrap.deactivate();
        _get(_getPrototypeOf(Offcanvas.prototype), "dispose", this).call(this);
      }

      // Private
    }, {
      key: "_initializeBackDrop",
      value: function _initializeBackDrop() {
        var _this34 = this;
        var clickCallback = function clickCallback() {
          if (_this34._config.backdrop === 'static') {
            EventHandler.trigger(_this34._element, EVENT_HIDE_PREVENTED);
            return;
          }
          _this34.hide();
        };

        // 'static' option will be translated to true, and booleans will keep their value
        var isVisible = Boolean(this._config.backdrop);
        return new Backdrop({
          className: CLASS_NAME_BACKDROP,
          isVisible: isVisible,
          isAnimated: true,
          rootElement: this._element.parentNode,
          clickCallback: isVisible ? clickCallback : null
        });
      }
    }, {
      key: "_initializeFocusTrap",
      value: function _initializeFocusTrap() {
        return new FocusTrap({
          trapElement: this._element
        });
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        var _this35 = this;
        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, function (event) {
          if (event.key !== ESCAPE_KEY) {
            return;
          }
          if (_this35._config.keyboard) {
            _this35.hide();
            return;
          }
          EventHandler.trigger(_this35._element, EVENT_HIDE_PREVENTED);
        });
      }

      // Static
    }], [{
      key: "Default",
      get: function get() {
        return Default$5;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$5;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$6;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Offcanvas.getOrCreateInstance(this, config);
          if (typeof config !== 'string') {
            return;
          }
          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }
          data[config](this);
        });
      }
    }]);
  }(BaseComponent);
  /**
   * Data API implementation
   */
  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {
    var _this36 = this;
    var target = SelectorEngine.getElementFromSelector(this);
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    EventHandler.one(target, EVENT_HIDDEN$3, function () {
      // focus on trigger when it is closed
      if (isVisible(_this36)) {
        _this36.focus();
      }
    });

    // avoid conflict when clicking a toggler of an offcanvas, while another is open
    var alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
    if (alreadyOpen && alreadyOpen !== target) {
      Offcanvas.getInstance(alreadyOpen).hide();
    }
    var data = Offcanvas.getOrCreateInstance(target);
    data.toggle(this);
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$2, function () {
    var _iterator16 = _createForOfIteratorHelper(SelectorEngine.find(OPEN_SELECTOR)),
      _step16;
    try {
      for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
        var selector = _step16.value;
        Offcanvas.getOrCreateInstance(selector).show();
      }
    } catch (err) {
      _iterator16.e(err);
    } finally {
      _iterator16.f();
    }
  });
  EventHandler.on(window, EVENT_RESIZE, function () {
    var _iterator17 = _createForOfIteratorHelper(SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]')),
      _step17;
    try {
      for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
        var element = _step17.value;
        if (getComputedStyle(element).position !== 'fixed') {
          Offcanvas.getOrCreateInstance(element).hide();
        }
      }
    } catch (err) {
      _iterator17.e(err);
    } finally {
      _iterator17.f();
    }
  });
  enableDismissTrigger(Offcanvas);

  /**
   * jQuery
   */

  defineJQueryPlugin(Offcanvas);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  // js-docs-start allow-list
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  var DefaultAllowlist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    dd: [],
    div: [],
    dl: [],
    dt: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  // js-docs-end allow-list

  var uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);

  /**
   * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation
   * contexts.
   *
   * Shout-out to Angular https://github.com/angular/angular/blob/15.2.8/packages/core/src/sanitization/url_sanitizer.ts#L38
   */
  // eslint-disable-next-line unicorn/better-regex
  var SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i;
  var allowedAttribute = function allowedAttribute(attribute, allowedAttributeList) {
    var attributeName = attribute.nodeName.toLowerCase();
    if (allowedAttributeList.includes(attributeName)) {
      if (uriAttributes.has(attributeName)) {
        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue));
      }
      return true;
    }

    // Check if a regular expression validates the attribute.
    return allowedAttributeList.filter(function (attributeRegex) {
      return attributeRegex instanceof RegExp;
    }).some(function (regex) {
      return regex.test(attributeName);
    });
  };
  function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
    var _ref7;
    if (!unsafeHtml.length) {
      return unsafeHtml;
    }
    if (sanitizeFunction && typeof sanitizeFunction === 'function') {
      return sanitizeFunction(unsafeHtml);
    }
    var domParser = new window.DOMParser();
    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    var elements = (_ref7 = []).concat.apply(_ref7, _toConsumableArray(createdDocument.body.querySelectorAll('*')));
    var _iterator18 = _createForOfIteratorHelper(elements),
      _step18;
    try {
      for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
        var _ref8;
        var element = _step18.value;
        var elementName = element.nodeName.toLowerCase();
        if (!Object.keys(allowList).includes(elementName)) {
          element.remove();
          continue;
        }
        var attributeList = (_ref8 = []).concat.apply(_ref8, _toConsumableArray(element.attributes));
        var allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);
        var _iterator19 = _createForOfIteratorHelper(attributeList),
          _step19;
        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var attribute = _step19.value;
            if (!allowedAttribute(attribute, allowedAttributes)) {
              element.removeAttribute(attribute.nodeName);
            }
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }
      }
    } catch (err) {
      _iterator18.e(err);
    } finally {
      _iterator18.f();
    }
    return createdDocument.body.innerHTML;
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/template-factory.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$5 = 'TemplateFactory';
  var Default$4 = {
    allowList: DefaultAllowlist,
    content: {},
    // { selector : text ,  selector2 : text2 , }
    extraClass: '',
    html: false,
    sanitize: true,
    sanitizeFn: null,
    template: '<div></div>'
  };
  var DefaultType$4 = {
    allowList: 'object',
    content: 'object',
    extraClass: '(string|function)',
    html: 'boolean',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    template: 'string'
  };
  var DefaultContentType = {
    entry: '(string|element|function|null)',
    selector: '(string|element)'
  };

  /**
   * Class definition
   */
  var TemplateFactory = /*#__PURE__*/function (_Config5) {
    function TemplateFactory(config) {
      var _this37;
      _classCallCheck(this, TemplateFactory);
      _this37 = _callSuper(this, TemplateFactory);
      _this37._config = _this37._getConfig(config);
      return _this37;
    }

    // Getters
    _inherits(TemplateFactory, _Config5);
    return _createClass(TemplateFactory, [{
      key: "getContent",
      value:
      // Public
      function getContent() {
        var _this38 = this;
        return Object.values(this._config.content).map(function (config) {
          return _this38._resolvePossibleFunction(config);
        }).filter(Boolean);
      }
    }, {
      key: "hasContent",
      value: function hasContent() {
        return this.getContent().length > 0;
      }
    }, {
      key: "changeContent",
      value: function changeContent(content) {
        this._checkContent(content);
        this._config.content = _objectSpread(_objectSpread({}, this._config.content), content);
        return this;
      }
    }, {
      key: "toHtml",
      value: function toHtml() {
        var templateWrapper = document.createElement('div');
        templateWrapper.innerHTML = this._maybeSanitize(this._config.template);
        for (var _i7 = 0, _Object$entries5 = Object.entries(this._config.content); _i7 < _Object$entries5.length; _i7++) {
          var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i7], 2),
            selector = _Object$entries5$_i[0],
            text = _Object$entries5$_i[1];
          this._setContent(templateWrapper, text, selector);
        }
        var template = templateWrapper.children[0];
        var extraClass = this._resolvePossibleFunction(this._config.extraClass);
        if (extraClass) {
          var _template$classList;
          (_template$classList = template.classList).add.apply(_template$classList, _toConsumableArray(extraClass.split(' ')));
        }
        return template;
      }

      // Private
    }, {
      key: "_typeCheckConfig",
      value: function _typeCheckConfig(config) {
        _get(_getPrototypeOf(TemplateFactory.prototype), "_typeCheckConfig", this).call(this, config);
        this._checkContent(config.content);
      }
    }, {
      key: "_checkContent",
      value: function _checkContent(arg) {
        for (var _i8 = 0, _Object$entries6 = Object.entries(arg); _i8 < _Object$entries6.length; _i8++) {
          var _Object$entries6$_i = _slicedToArray(_Object$entries6[_i8], 2),
            selector = _Object$entries6$_i[0],
            content = _Object$entries6$_i[1];
          _get(_getPrototypeOf(TemplateFactory.prototype), "_typeCheckConfig", this).call(this, {
            selector: selector,
            entry: content
          }, DefaultContentType);
        }
      }
    }, {
      key: "_setContent",
      value: function _setContent(template, content, selector) {
        var templateElement = SelectorEngine.findOne(selector, template);
        if (!templateElement) {
          return;
        }
        content = this._resolvePossibleFunction(content);
        if (!content) {
          templateElement.remove();
          return;
        }
        if (isElement(content)) {
          this._putElementInTemplate(getElement(content), templateElement);
          return;
        }
        if (this._config.html) {
          templateElement.innerHTML = this._maybeSanitize(content);
          return;
        }
        templateElement.textContent = content;
      }
    }, {
      key: "_maybeSanitize",
      value: function _maybeSanitize(arg) {
        return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
      }
    }, {
      key: "_resolvePossibleFunction",
      value: function _resolvePossibleFunction(arg) {
        return execute(arg, [this]);
      }
    }, {
      key: "_putElementInTemplate",
      value: function _putElementInTemplate(element, templateElement) {
        if (this._config.html) {
          templateElement.innerHTML = '';
          templateElement.append(element);
          return;
        }
        templateElement.textContent = element.textContent;
      }
    }], [{
      key: "Default",
      get: function get() {
        return Default$4;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$4;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$5;
      }
    }]);
  }(Config);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap tooltip.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * Constants
   */
  var NAME$4 = 'tooltip';
  var DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);
  var CLASS_NAME_FADE$2 = 'fade';
  var CLASS_NAME_MODAL = 'modal';
  var CLASS_NAME_SHOW$2 = 'show';
  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
  var SELECTOR_MODAL = ".".concat(CLASS_NAME_MODAL);
  var EVENT_MODAL_HIDE = 'hide.bs.modal';
  var TRIGGER_HOVER = 'hover';
  var TRIGGER_FOCUS = 'focus';
  var TRIGGER_CLICK = 'click';
  var TRIGGER_MANUAL = 'manual';
  var EVENT_HIDE$2 = 'hide';
  var EVENT_HIDDEN$2 = 'hidden';
  var EVENT_SHOW$2 = 'show';
  var EVENT_SHOWN$2 = 'shown';
  var EVENT_INSERTED = 'inserted';
  var EVENT_CLICK$1 = 'click';
  var EVENT_FOCUSIN$1 = 'focusin';
  var EVENT_FOCUSOUT$1 = 'focusout';
  var EVENT_MOUSEENTER = 'mouseenter';
  var EVENT_MOUSELEAVE = 'mouseleave';
  var AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: isRTL() ? 'left' : 'right',
    BOTTOM: 'bottom',
    LEFT: isRTL() ? 'right' : 'left'
  };
  var Default$3 = {
    allowList: DefaultAllowlist,
    animation: true,
    boundary: 'clippingParents',
    container: false,
    customClass: '',
    delay: 0,
    fallbackPlacements: ['top', 'right', 'bottom', 'left'],
    html: false,
    offset: [0, 6],
    placement: 'top',
    popperConfig: null,
    sanitize: true,
    sanitizeFn: null,
    selector: false,
    template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div>' + '</div>',
    title: '',
    trigger: 'hover focus'
  };
  var DefaultType$3 = {
    allowList: 'object',
    animation: 'boolean',
    boundary: '(string|element)',
    container: '(string|element|boolean)',
    customClass: '(string|function)',
    delay: '(number|object)',
    fallbackPlacements: 'array',
    html: 'boolean',
    offset: '(array|string|function)',
    placement: '(string|function)',
    popperConfig: '(null|object|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    selector: '(string|boolean)',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string'
  };

  /**
   * Class definition
   */
  var Tooltip = /*#__PURE__*/function (_BaseComponent8) {
    function Tooltip(element, config) {
      var _this39;
      _classCallCheck(this, Tooltip);
      if (typeof Popper__namespace === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
      }
      _this39 = _callSuper(this, Tooltip, [element, config]);

      // Private
      _this39._isEnabled = true;
      _this39._timeout = 0;
      _this39._isHovered = null;
      _this39._activeTrigger = {};
      _this39._popper = null;
      _this39._templateFactory = null;
      _this39._newContent = null;

      // Protected
      _this39.tip = null;
      _this39._setListeners();
      if (!_this39._config.selector) {
        _this39._fixTitle();
      }
      return _this39;
    }

    // Getters
    _inherits(Tooltip, _BaseComponent8);
    return _createClass(Tooltip, [{
      key: "enable",
      value:
      // Public
      function enable() {
        this._isEnabled = true;
      }
    }, {
      key: "disable",
      value: function disable() {
        this._isEnabled = false;
      }
    }, {
      key: "toggleEnabled",
      value: function toggleEnabled() {
        this._isEnabled = !this._isEnabled;
      }
    }, {
      key: "toggle",
      value: function toggle() {
        if (!this._isEnabled) {
          return;
        }
        this._activeTrigger.click = !this._activeTrigger.click;
        if (this._isShown()) {
          this._leave();
          return;
        }
        this._enter();
      }
    }, {
      key: "dispose",
      value: function dispose() {
        clearTimeout(this._timeout);
        EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
        if (this._element.getAttribute('data-bs-original-title')) {
          this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'));
        }
        this._disposePopper();
        _get(_getPrototypeOf(Tooltip.prototype), "dispose", this).call(this);
      }
    }, {
      key: "show",
      value: function show() {
        var _this40 = this;
        if (this._element.style.display === 'none') {
          throw new Error('Please use show on visible elements');
        }
        if (!(this._isWithContent() && this._isEnabled)) {
          return;
        }
        var showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
        var shadowRoot = findShadowRoot(this._element);
        var isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);
        if (showEvent.defaultPrevented || !isInTheDom) {
          return;
        }

        // TODO: v6 remove this or make it optional
        this._disposePopper();
        var tip = this._getTipElement();
        this._element.setAttribute('aria-describedby', tip.getAttribute('id'));
        var container = this._config.container;
        if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
          container.append(tip);
          EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
        }
        this._popper = this._createPopper(tip);
        tip.classList.add(CLASS_NAME_SHOW$2);

        // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
        if ('ontouchstart' in document.documentElement) {
          var _ref9;
          var _iterator20 = _createForOfIteratorHelper((_ref9 = []).concat.apply(_ref9, _toConsumableArray(document.body.children))),
            _step20;
          try {
            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
              var element = _step20.value;
              EventHandler.on(element, 'mouseover', noop);
            }
          } catch (err) {
            _iterator20.e(err);
          } finally {
            _iterator20.f();
          }
        }
        var complete = function complete() {
          EventHandler.trigger(_this40._element, _this40.constructor.eventName(EVENT_SHOWN$2));
          if (_this40._isHovered === false) {
            _this40._leave();
          }
          _this40._isHovered = false;
        };
        this._queueCallback(complete, this.tip, this._isAnimated());
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this41 = this;
        if (!this._isShown()) {
          return;
        }
        var hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));
        if (hideEvent.defaultPrevented) {
          return;
        }
        var tip = this._getTipElement();
        tip.classList.remove(CLASS_NAME_SHOW$2);

        // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support
        if ('ontouchstart' in document.documentElement) {
          var _ref10;
          var _iterator21 = _createForOfIteratorHelper((_ref10 = []).concat.apply(_ref10, _toConsumableArray(document.body.children))),
            _step21;
          try {
            for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
              var element = _step21.value;
              EventHandler.off(element, 'mouseover', noop);
            }
          } catch (err) {
            _iterator21.e(err);
          } finally {
            _iterator21.f();
          }
        }
        this._activeTrigger[TRIGGER_CLICK] = false;
        this._activeTrigger[TRIGGER_FOCUS] = false;
        this._activeTrigger[TRIGGER_HOVER] = false;
        this._isHovered = null; // it is a trick to support manual triggering

        var complete = function complete() {
          if (_this41._isWithActiveTrigger()) {
            return;
          }
          if (!_this41._isHovered) {
            _this41._disposePopper();
          }
          _this41._element.removeAttribute('aria-describedby');
          EventHandler.trigger(_this41._element, _this41.constructor.eventName(EVENT_HIDDEN$2));
        };
        this._queueCallback(complete, this.tip, this._isAnimated());
      }
    }, {
      key: "update",
      value: function update() {
        if (this._popper) {
          this._popper.update();
        }
      }

      // Protected
    }, {
      key: "_isWithContent",
      value: function _isWithContent() {
        return Boolean(this._getTitle());
      }
    }, {
      key: "_getTipElement",
      value: function _getTipElement() {
        if (!this.tip) {
          this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
        }
        return this.tip;
      }
    }, {
      key: "_createTipElement",
      value: function _createTipElement(content) {
        var tip = this._getTemplateFactory(content).toHtml();

        // TODO: remove this check in v6
        if (!tip) {
          return null;
        }
        tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
        // TODO: v6 the following can be achieved with CSS only
        tip.classList.add("bs-".concat(this.constructor.NAME, "-auto"));
        var tipId = getUID(this.constructor.NAME).toString();
        tip.setAttribute('id', tipId);
        if (this._isAnimated()) {
          tip.classList.add(CLASS_NAME_FADE$2);
        }
        return tip;
      }
    }, {
      key: "setContent",
      value: function setContent(content) {
        this._newContent = content;
        if (this._isShown()) {
          this._disposePopper();
          this.show();
        }
      }
    }, {
      key: "_getTemplateFactory",
      value: function _getTemplateFactory(content) {
        if (this._templateFactory) {
          this._templateFactory.changeContent(content);
        } else {
          this._templateFactory = new TemplateFactory(_objectSpread(_objectSpread({}, this._config), {}, {
            // the `content` var has to be after `this._config`
            // to override config.content in case of popover
            content: content,
            extraClass: this._resolvePossibleFunction(this._config.customClass)
          }));
        }
        return this._templateFactory;
      }
    }, {
      key: "_getContentForTemplate",
      value: function _getContentForTemplate() {
        return _defineProperty({}, SELECTOR_TOOLTIP_INNER, this._getTitle());
      }
    }, {
      key: "_getTitle",
      value: function _getTitle() {
        return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title');
      }

      // Private
    }, {
      key: "_initializeOnDelegatedTarget",
      value: function _initializeOnDelegatedTarget(event) {
        return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
      }
    }, {
      key: "_isAnimated",
      value: function _isAnimated() {
        return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
      }
    }, {
      key: "_isShown",
      value: function _isShown() {
        return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
      }
    }, {
      key: "_createPopper",
      value: function _createPopper(tip) {
        var placement = execute(this._config.placement, [this, tip, this._element]);
        var attachment = AttachmentMap[placement.toUpperCase()];
        return Popper__namespace.createPopper(this._element, tip, this._getPopperConfig(attachment));
      }
    }, {
      key: "_getOffset",
      value: function _getOffset() {
        var _this42 = this;
        var offset = this._config.offset;
        if (typeof offset === 'string') {
          return offset.split(',').map(function (value) {
            return Number.parseInt(value, 10);
          });
        }
        if (typeof offset === 'function') {
          return function (popperData) {
            return offset(popperData, _this42._element);
          };
        }
        return offset;
      }
    }, {
      key: "_resolvePossibleFunction",
      value: function _resolvePossibleFunction(arg) {
        return execute(arg, [this._element]);
      }
    }, {
      key: "_getPopperConfig",
      value: function _getPopperConfig(attachment) {
        var _this43 = this;
        var defaultBsPopperConfig = {
          placement: attachment,
          modifiers: [{
            name: 'flip',
            options: {
              fallbackPlacements: this._config.fallbackPlacements
            }
          }, {
            name: 'offset',
            options: {
              offset: this._getOffset()
            }
          }, {
            name: 'preventOverflow',
            options: {
              boundary: this._config.boundary
            }
          }, {
            name: 'arrow',
            options: {
              element: ".".concat(this.constructor.NAME, "-arrow")
            }
          }, {
            name: 'preSetPlacement',
            enabled: true,
            phase: 'beforeMain',
            fn: function fn(data) {
              // Pre-set Popper's placement attribute in order to read the arrow sizes properly.
              // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement
              _this43._getTipElement().setAttribute('data-popper-placement', data.state.placement);
            }
          }]
        };
        return _objectSpread(_objectSpread({}, defaultBsPopperConfig), execute(this._config.popperConfig, [defaultBsPopperConfig]));
      }
    }, {
      key: "_setListeners",
      value: function _setListeners() {
        var _this44 = this;
        var triggers = this._config.trigger.split(' ');
        var _iterator22 = _createForOfIteratorHelper(triggers),
          _step22;
        try {
          for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
            var trigger = _step22.value;
            if (trigger === 'click') {
              EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, function (event) {
                var context = _this44._initializeOnDelegatedTarget(event);
                context.toggle();
              });
            } else if (trigger !== TRIGGER_MANUAL) {
              var eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
              var eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
              EventHandler.on(this._element, eventIn, this._config.selector, function (event) {
                var context = _this44._initializeOnDelegatedTarget(event);
                context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
                context._enter();
              });
              EventHandler.on(this._element, eventOut, this._config.selector, function (event) {
                var context = _this44._initializeOnDelegatedTarget(event);
                context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
                context._leave();
              });
            }
          }
        } catch (err) {
          _iterator22.e(err);
        } finally {
          _iterator22.f();
        }
        this._hideModalHandler = function () {
          if (_this44._element) {
            _this44.hide();
          }
        };
        EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
      }
    }, {
      key: "_fixTitle",
      value: function _fixTitle() {
        var title = this._element.getAttribute('title');
        if (!title) {
          return;
        }
        if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {
          this._element.setAttribute('aria-label', title);
        }
        this._element.setAttribute('data-bs-original-title', title); // DO NOT USE IT. Is only for backwards compatibility
        this._element.removeAttribute('title');
      }
    }, {
      key: "_enter",
      value: function _enter() {
        var _this45 = this;
        if (this._isShown() || this._isHovered) {
          this._isHovered = true;
          return;
        }
        this._isHovered = true;
        this._setTimeout(function () {
          if (_this45._isHovered) {
            _this45.show();
          }
        }, this._config.delay.show);
      }
    }, {
      key: "_leave",
      value: function _leave() {
        var _this46 = this;
        if (this._isWithActiveTrigger()) {
          return;
        }
        this._isHovered = false;
        this._setTimeout(function () {
          if (!_this46._isHovered) {
            _this46.hide();
          }
        }, this._config.delay.hide);
      }
    }, {
      key: "_setTimeout",
      value: function _setTimeout(handler, timeout) {
        clearTimeout(this._timeout);
        this._timeout = setTimeout(handler, timeout);
      }
    }, {
      key: "_isWithActiveTrigger",
      value: function _isWithActiveTrigger() {
        return Object.values(this._activeTrigger).includes(true);
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        var dataAttributes = Manipulator.getDataAttributes(this._element);
        for (var _i9 = 0, _Object$keys2 = Object.keys(dataAttributes); _i9 < _Object$keys2.length; _i9++) {
          var dataAttribute = _Object$keys2[_i9];
          if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
            delete dataAttributes[dataAttribute];
          }
        }
        config = _objectSpread(_objectSpread({}, dataAttributes), _typeof(config) === 'object' && config ? config : {});
        config = this._mergeConfigObj(config);
        config = this._configAfterMerge(config);
        this._typeCheckConfig(config);
        return config;
      }
    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        config.container = config.container === false ? document.body : getElement(config.container);
        if (typeof config.delay === 'number') {
          config.delay = {
            show: config.delay,
            hide: config.delay
          };
        }
        if (typeof config.title === 'number') {
          config.title = config.title.toString();
        }
        if (typeof config.content === 'number') {
          config.content = config.content.toString();
        }
        return config;
      }
    }, {
      key: "_getDelegateConfig",
      value: function _getDelegateConfig() {
        var config = {};
        for (var _i10 = 0, _Object$entries7 = Object.entries(this._config); _i10 < _Object$entries7.length; _i10++) {
          var _Object$entries7$_i = _slicedToArray(_Object$entries7[_i10], 2),
            key = _Object$entries7$_i[0],
            value = _Object$entries7$_i[1];
          if (this.constructor.Default[key] !== value) {
            config[key] = value;
          }
        }
        config.selector = false;
        config.trigger = 'manual';

        // In the future can be replaced with:
        // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
        // `Object.fromEntries(keysWithDifferentValues)`
        return config;
      }
    }, {
      key: "_disposePopper",
      value: function _disposePopper() {
        if (this._popper) {
          this._popper.destroy();
          this._popper = null;
        }
        if (this.tip) {
          this.tip.remove();
          this.tip = null;
        }
      }

      // Static
    }], [{
      key: "Default",
      get: function get() {
        return Default$3;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$3;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$4;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Tooltip.getOrCreateInstance(this, config);
          if (typeof config !== 'string') {
            return;
          }
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }
          data[config]();
        });
      }
    }]);
  }(BaseComponent);
  /**
   * jQuery
   */
  defineJQueryPlugin(Tooltip);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap popover.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$3 = 'popover';
  var SELECTOR_TITLE = '.popover-header';
  var SELECTOR_CONTENT = '.popover-body';
  var Default$2 = _objectSpread(_objectSpread({}, Tooltip.Default), {}, {
    content: '',
    offset: [0, 8],
    placement: 'right',
    template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div>' + '</div>',
    trigger: 'click'
  });
  var DefaultType$2 = _objectSpread(_objectSpread({}, Tooltip.DefaultType), {}, {
    content: '(null|string|element|function)'
  });

  /**
   * Class definition
   */
  var Popover = /*#__PURE__*/function (_Tooltip) {
    function Popover() {
      _classCallCheck(this, Popover);
      return _callSuper(this, Popover, arguments);
    }
    _inherits(Popover, _Tooltip);
    return _createClass(Popover, [{
      key: "_isWithContent",
      value:
      // Overrides
      function _isWithContent() {
        return this._getTitle() || this._getContent();
      }

      // Private
    }, {
      key: "_getContentForTemplate",
      value: function _getContentForTemplate() {
        return _defineProperty(_defineProperty({}, SELECTOR_TITLE, this._getTitle()), SELECTOR_CONTENT, this._getContent());
      }
    }, {
      key: "_getContent",
      value: function _getContent() {
        return this._resolvePossibleFunction(this._config.content);
      }

      // Static
    }], [{
      key: "Default",
      get:
      // Getters
      function get() {
        return Default$2;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$2;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$3;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Popover.getOrCreateInstance(this, config);
          if (typeof config !== 'string') {
            return;
          }
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }
          data[config]();
        });
      }
    }]);
  }(Tooltip);
  /**
   * jQuery
   */
  defineJQueryPlugin(Popover);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap scrollspy.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$2 = 'scrollspy';
  var DATA_KEY$2 = 'bs.scrollspy';
  var EVENT_KEY$2 = ".".concat(DATA_KEY$2);
  var DATA_API_KEY = '.data-api';
  var EVENT_ACTIVATE = "activate".concat(EVENT_KEY$2);
  var EVENT_CLICK = "click".concat(EVENT_KEY$2);
  var EVENT_LOAD_DATA_API$1 = "load".concat(EVENT_KEY$2).concat(DATA_API_KEY);
  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
  var CLASS_NAME_ACTIVE$1 = 'active';
  var SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
  var SELECTOR_TARGET_LINKS = '[href]';
  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
  var SELECTOR_NAV_LINKS = '.nav-link';
  var SELECTOR_NAV_ITEMS = '.nav-item';
  var SELECTOR_LIST_ITEMS = '.list-group-item';
  var SELECTOR_LINK_ITEMS = "".concat(SELECTOR_NAV_LINKS, ", ").concat(SELECTOR_NAV_ITEMS, " > ").concat(SELECTOR_NAV_LINKS, ", ").concat(SELECTOR_LIST_ITEMS);
  var SELECTOR_DROPDOWN = '.dropdown';
  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
  var Default$1 = {
    offset: null,
    // TODO: v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: '0px 0px -25%',
    smoothScroll: false,
    target: null,
    threshold: [0.1, 0.5, 1]
  };
  var DefaultType$1 = {
    offset: '(number|null)',
    // TODO v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: 'string',
    smoothScroll: 'boolean',
    target: 'element',
    threshold: 'array'
  };

  /**
   * Class definition
   */
  var ScrollSpy = /*#__PURE__*/function (_BaseComponent9) {
    function ScrollSpy(element, config) {
      var _this47;
      _classCallCheck(this, ScrollSpy);
      _this47 = _callSuper(this, ScrollSpy, [element, config]);

      // this._element is the observablesContainer and config.target the menu links wrapper
      _this47._targetLinks = new Map();
      _this47._observableSections = new Map();
      _this47._rootElement = getComputedStyle(_this47._element).overflowY === 'visible' ? null : _this47._element;
      _this47._activeTarget = null;
      _this47._observer = null;
      _this47._previousScrollData = {
        visibleEntryTop: 0,
        parentScrollTop: 0
      };
      _this47.refresh(); // initialize
      return _this47;
    }

    // Getters
    _inherits(ScrollSpy, _BaseComponent9);
    return _createClass(ScrollSpy, [{
      key: "refresh",
      value:
      // Public
      function refresh() {
        this._initializeTargetsAndObservables();
        this._maybeEnableSmoothScroll();
        if (this._observer) {
          this._observer.disconnect();
        } else {
          this._observer = this._getNewObserver();
        }
        var _iterator23 = _createForOfIteratorHelper(this._observableSections.values()),
          _step23;
        try {
          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
            var section = _step23.value;
            this._observer.observe(section);
          }
        } catch (err) {
          _iterator23.e(err);
        } finally {
          _iterator23.f();
        }
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this._observer.disconnect();
        _get(_getPrototypeOf(ScrollSpy.prototype), "dispose", this).call(this);
      }

      // Private
    }, {
      key: "_configAfterMerge",
      value: function _configAfterMerge(config) {
        // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case
        config.target = getElement(config.target) || document.body;

        // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only
        config.rootMargin = config.offset ? "".concat(config.offset, "px 0px -30%") : config.rootMargin;
        if (typeof config.threshold === 'string') {
          config.threshold = config.threshold.split(',').map(function (value) {
            return Number.parseFloat(value);
          });
        }
        return config;
      }
    }, {
      key: "_maybeEnableSmoothScroll",
      value: function _maybeEnableSmoothScroll() {
        var _this48 = this;
        if (!this._config.smoothScroll) {
          return;
        }

        // unregister any previous listeners
        EventHandler.off(this._config.target, EVENT_CLICK);
        EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, function (event) {
          var observableSection = _this48._observableSections.get(event.target.hash);
          if (observableSection) {
            event.preventDefault();
            var root = _this48._rootElement || window;
            var height = observableSection.offsetTop - _this48._element.offsetTop;
            if (root.scrollTo) {
              root.scrollTo({
                top: height,
                behavior: 'smooth'
              });
              return;
            }

            // Chrome 60 doesn't support `scrollTo`
            root.scrollTop = height;
          }
        });
      }
    }, {
      key: "_getNewObserver",
      value: function _getNewObserver() {
        var _this49 = this;
        var options = {
          root: this._rootElement,
          threshold: this._config.threshold,
          rootMargin: this._config.rootMargin
        };
        return new IntersectionObserver(function (entries) {
          return _this49._observerCallback(entries);
        }, options);
      }

      // The logic of selection
    }, {
      key: "_observerCallback",
      value: function _observerCallback(entries) {
        var _this50 = this;
        var targetElement = function targetElement(entry) {
          return _this50._targetLinks.get("#".concat(entry.target.id));
        };
        var activate = function activate(entry) {
          _this50._previousScrollData.visibleEntryTop = entry.target.offsetTop;
          _this50._process(targetElement(entry));
        };
        var parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
        var userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
        this._previousScrollData.parentScrollTop = parentScrollTop;
        var _iterator24 = _createForOfIteratorHelper(entries),
          _step24;
        try {
          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
            var entry = _step24.value;
            if (!entry.isIntersecting) {
              this._activeTarget = null;
              this._clearActiveClass(targetElement(entry));
              continue;
            }
            var entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;
            // if we are scrolling down, pick the bigger offsetTop
            if (userScrollsDown && entryIsLowerThanPrevious) {
              activate(entry);
              // if parent isn't scrolled, let's keep the first visible item, breaking the iteration
              if (!parentScrollTop) {
                return;
              }
              continue;
            }

            // if we are scrolling up, pick the smallest offsetTop
            if (!userScrollsDown && !entryIsLowerThanPrevious) {
              activate(entry);
            }
          }
        } catch (err) {
          _iterator24.e(err);
        } finally {
          _iterator24.f();
        }
      }
    }, {
      key: "_initializeTargetsAndObservables",
      value: function _initializeTargetsAndObservables() {
        this._targetLinks = new Map();
        this._observableSections = new Map();
        var targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);
        var _iterator25 = _createForOfIteratorHelper(targetLinks),
          _step25;
        try {
          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
            var anchor = _step25.value;
            // ensure that the anchor has an id and is not disabled
            if (!anchor.hash || isDisabled(anchor)) {
              continue;
            }
            var observableSection = SelectorEngine.findOne(decodeURI(anchor.hash), this._element);

            // ensure that the observableSection exists & is visible
            if (isVisible(observableSection)) {
              this._targetLinks.set(decodeURI(anchor.hash), anchor);
              this._observableSections.set(anchor.hash, observableSection);
            }
          }
        } catch (err) {
          _iterator25.e(err);
        } finally {
          _iterator25.f();
        }
      }
    }, {
      key: "_process",
      value: function _process(target) {
        if (this._activeTarget === target) {
          return;
        }
        this._clearActiveClass(this._config.target);
        this._activeTarget = target;
        target.classList.add(CLASS_NAME_ACTIVE$1);
        this._activateParents(target);
        EventHandler.trigger(this._element, EVENT_ACTIVATE, {
          relatedTarget: target
        });
      }
    }, {
      key: "_activateParents",
      value: function _activateParents(target) {
        // Activate dropdown parents
        if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
          SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
          return;
        }
        var _iterator26 = _createForOfIteratorHelper(SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)),
          _step26;
        try {
          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
            var listGroup = _step26.value;
            // Set triggered links parents as active
            // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
            var _iterator27 = _createForOfIteratorHelper(SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)),
              _step27;
            try {
              for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
                var item = _step27.value;
                item.classList.add(CLASS_NAME_ACTIVE$1);
              }
            } catch (err) {
              _iterator27.e(err);
            } finally {
              _iterator27.f();
            }
          }
        } catch (err) {
          _iterator26.e(err);
        } finally {
          _iterator26.f();
        }
      }
    }, {
      key: "_clearActiveClass",
      value: function _clearActiveClass(parent) {
        parent.classList.remove(CLASS_NAME_ACTIVE$1);
        var activeNodes = SelectorEngine.find("".concat(SELECTOR_TARGET_LINKS, ".").concat(CLASS_NAME_ACTIVE$1), parent);
        var _iterator28 = _createForOfIteratorHelper(activeNodes),
          _step28;
        try {
          for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
            var node = _step28.value;
            node.classList.remove(CLASS_NAME_ACTIVE$1);
          }
        } catch (err) {
          _iterator28.e(err);
        } finally {
          _iterator28.f();
        }
      }

      // Static
    }], [{
      key: "Default",
      get: function get() {
        return Default$1;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$1;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$2;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = ScrollSpy.getOrCreateInstance(this, config);
          if (typeof config !== 'string') {
            return;
          }
          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }
          data[config]();
        });
      }
    }]);
  }(BaseComponent);
  /**
   * Data API implementation
   */
  EventHandler.on(window, EVENT_LOAD_DATA_API$1, function () {
    var _iterator29 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_DATA_SPY)),
      _step29;
    try {
      for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
        var spy = _step29.value;
        ScrollSpy.getOrCreateInstance(spy);
      }
    } catch (err) {
      _iterator29.e(err);
    } finally {
      _iterator29.f();
    }
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(ScrollSpy);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap tab.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME$1 = 'tab';
  var DATA_KEY$1 = 'bs.tab';
  var EVENT_KEY$1 = ".".concat(DATA_KEY$1);
  var EVENT_HIDE$1 = "hide".concat(EVENT_KEY$1);
  var EVENT_HIDDEN$1 = "hidden".concat(EVENT_KEY$1);
  var EVENT_SHOW$1 = "show".concat(EVENT_KEY$1);
  var EVENT_SHOWN$1 = "shown".concat(EVENT_KEY$1);
  var EVENT_CLICK_DATA_API = "click".concat(EVENT_KEY$1);
  var EVENT_KEYDOWN = "keydown".concat(EVENT_KEY$1);
  var EVENT_LOAD_DATA_API = "load".concat(EVENT_KEY$1);
  var ARROW_LEFT_KEY = 'ArrowLeft';
  var ARROW_RIGHT_KEY = 'ArrowRight';
  var ARROW_UP_KEY = 'ArrowUp';
  var ARROW_DOWN_KEY = 'ArrowDown';
  var HOME_KEY = 'Home';
  var END_KEY = 'End';
  var CLASS_NAME_ACTIVE = 'active';
  var CLASS_NAME_FADE$1 = 'fade';
  var CLASS_NAME_SHOW$1 = 'show';
  var CLASS_DROPDOWN = 'dropdown';
  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
  var SELECTOR_DROPDOWN_MENU = '.dropdown-menu';
  var NOT_SELECTOR_DROPDOWN_TOGGLE = ":not(".concat(SELECTOR_DROPDOWN_TOGGLE, ")");
  var SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
  var SELECTOR_OUTER = '.nav-item, .list-group-item';
  var SELECTOR_INNER = ".nav-link".concat(NOT_SELECTOR_DROPDOWN_TOGGLE, ", .list-group-item").concat(NOT_SELECTOR_DROPDOWN_TOGGLE, ", [role=\"tab\"]").concat(NOT_SELECTOR_DROPDOWN_TOGGLE);
  var SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]'; // TODO: could only be `tab` in v6
  var SELECTOR_INNER_ELEM = "".concat(SELECTOR_INNER, ", ").concat(SELECTOR_DATA_TOGGLE);
  var SELECTOR_DATA_TOGGLE_ACTIVE = ".".concat(CLASS_NAME_ACTIVE, "[data-bs-toggle=\"tab\"], .").concat(CLASS_NAME_ACTIVE, "[data-bs-toggle=\"pill\"], .").concat(CLASS_NAME_ACTIVE, "[data-bs-toggle=\"list\"]");

  /**
   * Class definition
   */
  var Tab = /*#__PURE__*/function (_BaseComponent10) {
    function Tab(element) {
      var _this51;
      _classCallCheck(this, Tab);
      _this51 = _callSuper(this, Tab, [element]);
      _this51._parent = _this51._element.closest(SELECTOR_TAB_PANEL);
      if (!_this51._parent) {
        return _possibleConstructorReturn(_this51);
        // TODO: should throw exception in v6
        // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)
      }

      // Set up initial aria attributes
      _this51._setInitialAttributes(_this51._parent, _this51._getChildren());
      EventHandler.on(_this51._element, EVENT_KEYDOWN, function (event) {
        return _this51._keydown(event);
      });
      return _this51;
    }

    // Getters
    _inherits(Tab, _BaseComponent10);
    return _createClass(Tab, [{
      key: "show",
      value:
      // Public
      function show() {
        // Shows this elem and deactivate the active sibling if exists
        var innerElem = this._element;
        if (this._elemIsActive(innerElem)) {
          return;
        }

        // Search for active tab on same parent to deactivate it
        var active = this._getActiveElem();
        var hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
          relatedTarget: innerElem
        }) : null;
        var showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
          relatedTarget: active
        });
        if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {
          return;
        }
        this._deactivate(active, innerElem);
        this._activate(innerElem, active);
      }

      // Private
    }, {
      key: "_activate",
      value: function _activate(element, relatedElem) {
        var _this52 = this;
        if (!element) {
          return;
        }
        element.classList.add(CLASS_NAME_ACTIVE);
        this._activate(SelectorEngine.getElementFromSelector(element)); // Search and activate/show the proper section

        var complete = function complete() {
          if (element.getAttribute('role') !== 'tab') {
            element.classList.add(CLASS_NAME_SHOW$1);
            return;
          }
          element.removeAttribute('tabindex');
          element.setAttribute('aria-selected', true);
          _this52._toggleDropDown(element, true);
          EventHandler.trigger(element, EVENT_SHOWN$1, {
            relatedTarget: relatedElem
          });
        };
        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
      }
    }, {
      key: "_deactivate",
      value: function _deactivate(element, relatedElem) {
        var _this53 = this;
        if (!element) {
          return;
        }
        element.classList.remove(CLASS_NAME_ACTIVE);
        element.blur();
        this._deactivate(SelectorEngine.getElementFromSelector(element)); // Search and deactivate the shown section too

        var complete = function complete() {
          if (element.getAttribute('role') !== 'tab') {
            element.classList.remove(CLASS_NAME_SHOW$1);
            return;
          }
          element.setAttribute('aria-selected', false);
          element.setAttribute('tabindex', '-1');
          _this53._toggleDropDown(element, false);
          EventHandler.trigger(element, EVENT_HIDDEN$1, {
            relatedTarget: relatedElem
          });
        };
        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
      }
    }, {
      key: "_keydown",
      value: function _keydown(event) {
        if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY, HOME_KEY, END_KEY].includes(event.key)) {
          return;
        }
        event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page
        event.preventDefault();
        var children = this._getChildren().filter(function (element) {
          return !isDisabled(element);
        });
        var nextActiveElement;
        if ([HOME_KEY, END_KEY].includes(event.key)) {
          nextActiveElement = children[event.key === HOME_KEY ? 0 : children.length - 1];
        } else {
          var isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);
          nextActiveElement = getNextActiveElement(children, event.target, isNext, true);
        }
        if (nextActiveElement) {
          nextActiveElement.focus({
            preventScroll: true
          });
          Tab.getOrCreateInstance(nextActiveElement).show();
        }
      }
    }, {
      key: "_getChildren",
      value: function _getChildren() {
        // collection of inner elements
        return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
      }
    }, {
      key: "_getActiveElem",
      value: function _getActiveElem() {
        var _this54 = this;
        return this._getChildren().find(function (child) {
          return _this54._elemIsActive(child);
        }) || null;
      }
    }, {
      key: "_setInitialAttributes",
      value: function _setInitialAttributes(parent, children) {
        this._setAttributeIfNotExists(parent, 'role', 'tablist');
        var _iterator30 = _createForOfIteratorHelper(children),
          _step30;
        try {
          for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
            var child = _step30.value;
            this._setInitialAttributesOnChild(child);
          }
        } catch (err) {
          _iterator30.e(err);
        } finally {
          _iterator30.f();
        }
      }
    }, {
      key: "_setInitialAttributesOnChild",
      value: function _setInitialAttributesOnChild(child) {
        child = this._getInnerElement(child);
        var isActive = this._elemIsActive(child);
        var outerElem = this._getOuterElement(child);
        child.setAttribute('aria-selected', isActive);
        if (outerElem !== child) {
          this._setAttributeIfNotExists(outerElem, 'role', 'presentation');
        }
        if (!isActive) {
          child.setAttribute('tabindex', '-1');
        }
        this._setAttributeIfNotExists(child, 'role', 'tab');

        // set attributes to the related panel too
        this._setInitialAttributesOnTargetPanel(child);
      }
    }, {
      key: "_setInitialAttributesOnTargetPanel",
      value: function _setInitialAttributesOnTargetPanel(child) {
        var target = SelectorEngine.getElementFromSelector(child);
        if (!target) {
          return;
        }
        this._setAttributeIfNotExists(target, 'role', 'tabpanel');
        if (child.id) {
          this._setAttributeIfNotExists(target, 'aria-labelledby', "".concat(child.id));
        }
      }
    }, {
      key: "_toggleDropDown",
      value: function _toggleDropDown(element, open) {
        var outerElem = this._getOuterElement(element);
        if (!outerElem.classList.contains(CLASS_DROPDOWN)) {
          return;
        }
        var toggle = function toggle(selector, className) {
          var element = SelectorEngine.findOne(selector, outerElem);
          if (element) {
            element.classList.toggle(className, open);
          }
        };
        toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
        toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
        outerElem.setAttribute('aria-expanded', open);
      }
    }, {
      key: "_setAttributeIfNotExists",
      value: function _setAttributeIfNotExists(element, attribute, value) {
        if (!element.hasAttribute(attribute)) {
          element.setAttribute(attribute, value);
        }
      }
    }, {
      key: "_elemIsActive",
      value: function _elemIsActive(elem) {
        return elem.classList.contains(CLASS_NAME_ACTIVE);
      }

      // Try to get the inner element (usually the .nav-link)
    }, {
      key: "_getInnerElement",
      value: function _getInnerElement(elem) {
        return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
      }

      // Try to get the outer element (usually the .nav-item)
    }, {
      key: "_getOuterElement",
      value: function _getOuterElement(elem) {
        return elem.closest(SELECTOR_OUTER) || elem;
      }

      // Static
    }], [{
      key: "NAME",
      get: function get() {
        return NAME$1;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Tab.getOrCreateInstance(this);
          if (typeof config !== 'string') {
            return;
          }
          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }
          data[config]();
        });
      }
    }]);
  }(BaseComponent);
  /**
   * Data API implementation
   */
  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    Tab.getOrCreateInstance(this).show();
  });

  /**
   * Initialize on focus
   */
  EventHandler.on(window, EVENT_LOAD_DATA_API, function () {
    var _iterator31 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)),
      _step31;
    try {
      for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
        var element = _step31.value;
        Tab.getOrCreateInstance(element);
      }
    } catch (err) {
      _iterator31.e(err);
    } finally {
      _iterator31.f();
    }
  });
  /**
   * jQuery
   */

  defineJQueryPlugin(Tab);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap toast.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  var NAME = 'toast';
  var DATA_KEY = 'bs.toast';
  var EVENT_KEY = ".".concat(DATA_KEY);
  var EVENT_MOUSEOVER = "mouseover".concat(EVENT_KEY);
  var EVENT_MOUSEOUT = "mouseout".concat(EVENT_KEY);
  var EVENT_FOCUSIN = "focusin".concat(EVENT_KEY);
  var EVENT_FOCUSOUT = "focusout".concat(EVENT_KEY);
  var EVENT_HIDE = "hide".concat(EVENT_KEY);
  var EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
  var EVENT_SHOW = "show".concat(EVENT_KEY);
  var EVENT_SHOWN = "shown".concat(EVENT_KEY);
  var CLASS_NAME_FADE = 'fade';
  var CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility
  var CLASS_NAME_SHOW = 'show';
  var CLASS_NAME_SHOWING = 'showing';
  var DefaultType = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
  };
  var Default = {
    animation: true,
    autohide: true,
    delay: 5000
  };

  /**
   * Class definition
   */
  var Toast = /*#__PURE__*/function (_BaseComponent11) {
    function Toast(element, config) {
      var _this55;
      _classCallCheck(this, Toast);
      _this55 = _callSuper(this, Toast, [element, config]);
      _this55._timeout = null;
      _this55._hasMouseInteraction = false;
      _this55._hasKeyboardInteraction = false;
      _this55._setListeners();
      return _this55;
    }

    // Getters
    _inherits(Toast, _BaseComponent11);
    return _createClass(Toast, [{
      key: "show",
      value:
      // Public
      function show() {
        var _this56 = this;
        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
        if (showEvent.defaultPrevented) {
          return;
        }
        this._clearTimeout();
        if (this._config.animation) {
          this._element.classList.add(CLASS_NAME_FADE);
        }
        var complete = function complete() {
          _this56._element.classList.remove(CLASS_NAME_SHOWING);
          EventHandler.trigger(_this56._element, EVENT_SHOWN);
          _this56._maybeScheduleHide();
        };
        this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);
        this._queueCallback(complete, this._element, this._config.animation);
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this57 = this;
        if (!this.isShown()) {
          return;
        }
        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
        if (hideEvent.defaultPrevented) {
          return;
        }
        var complete = function complete() {
          _this57._element.classList.add(CLASS_NAME_HIDE); // @deprecated
          _this57._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);
          EventHandler.trigger(_this57._element, EVENT_HIDDEN);
        };
        this._element.classList.add(CLASS_NAME_SHOWING);
        this._queueCallback(complete, this._element, this._config.animation);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this._clearTimeout();
        if (this.isShown()) {
          this._element.classList.remove(CLASS_NAME_SHOW);
        }
        _get(_getPrototypeOf(Toast.prototype), "dispose", this).call(this);
      }
    }, {
      key: "isShown",
      value: function isShown() {
        return this._element.classList.contains(CLASS_NAME_SHOW);
      }

      // Private
    }, {
      key: "_maybeScheduleHide",
      value: function _maybeScheduleHide() {
        var _this58 = this;
        if (!this._config.autohide) {
          return;
        }
        if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
          return;
        }
        this._timeout = setTimeout(function () {
          _this58.hide();
        }, this._config.delay);
      }
    }, {
      key: "_onInteraction",
      value: function _onInteraction(event, isInteracting) {
        switch (event.type) {
          case 'mouseover':
          case 'mouseout':
            {
              this._hasMouseInteraction = isInteracting;
              break;
            }
          case 'focusin':
          case 'focusout':
            {
              this._hasKeyboardInteraction = isInteracting;
              break;
            }
        }
        if (isInteracting) {
          this._clearTimeout();
          return;
        }
        var nextElement = event.relatedTarget;
        if (this._element === nextElement || this._element.contains(nextElement)) {
          return;
        }
        this._maybeScheduleHide();
      }
    }, {
      key: "_setListeners",
      value: function _setListeners() {
        var _this59 = this;
        EventHandler.on(this._element, EVENT_MOUSEOVER, function (event) {
          return _this59._onInteraction(event, true);
        });
        EventHandler.on(this._element, EVENT_MOUSEOUT, function (event) {
          return _this59._onInteraction(event, false);
        });
        EventHandler.on(this._element, EVENT_FOCUSIN, function (event) {
          return _this59._onInteraction(event, true);
        });
        EventHandler.on(this._element, EVENT_FOCUSOUT, function (event) {
          return _this59._onInteraction(event, false);
        });
      }
    }, {
      key: "_clearTimeout",
      value: function _clearTimeout() {
        clearTimeout(this._timeout);
        this._timeout = null;
      }

      // Static
    }], [{
      key: "Default",
      get: function get() {
        return Default;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Toast.getOrCreateInstance(this, config);
          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }
            data[config](this);
          }
        });
      }
    }]);
  }(BaseComponent);
  /**
   * Data API implementation
   */
  enableDismissTrigger(Toast);

  /**
   * jQuery
   */

  defineJQueryPlugin(Toast);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap index.umd.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  var index_umd = {
    Alert: Alert,
    Button: Button,
    Carousel: Carousel,
    Collapse: Collapse,
    Dropdown: Dropdown,
    Modal: Modal,
    Offcanvas: Offcanvas,
    Popover: Popover,
    ScrollSpy: ScrollSpy,
    Tab: Tab,
    Toast: Toast,
    Tooltip: Tooltip
  };
  return index_umd;
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
 * jQuery JavaScript Library v3.7.1
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-08-28T13:37Z
 */
(function (global, factory) {
  "use strict";

  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket trac-14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }
      return factory(w);
    };
  } else {
    factory(global);
  }

  // Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];
  var getProto = Object.getPrototypeOf;
  var _slice = arr.slice;
  var flat = arr.flat ? function (array) {
    return arr.flat.call(array);
  } : function (array) {
    return arr.concat.apply([], array);
  };
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};
  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
    // Plus for old WebKit, typeof returns "function" for HTML collections
    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
    return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
  };
  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };
  var document = window.document;
  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };
  function DOMEval(code, node, doc) {
    doc = doc || document;
    var i,
      val,
      script = doc.createElement("script");
    script.text = code;
    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || node.getAttribute && node.getAttribute(i);
        if (val) {
          script.setAttribute(i, val);
        }
      }
    }
    doc.head.appendChild(script).parentNode.removeChild(script);
  }
  function toType(obj) {
    if (obj == null) {
      return obj + "";
    }

    // Support: Android <=2.3 only (functionish RegExp)
    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module

  var version = "3.7.1",
    rhtmlSuffix = /HTML$/i,
    // Define a local copy of jQuery
    jQuery = function jQuery(selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new jQuery.fn.init(selector, context);
    };
  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return _slice.call(this);
      }

      // Return just the one element from the set
      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems);

      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;

      // Return the newly-formed element set
      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return jQuery.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    even: function even() {
      return this.pushStack(jQuery.grep(this, function (_elem, i) {
        return (i + 1) % 2;
      }));
    },
    odd: function odd() {
      return this.pushStack(jQuery.grep(this, function (_elem, i) {
        return i % 2;
      }));
    },
    eq: function eq(i) {
      var len = this.length,
        j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };
  jQuery.extend = jQuery.fn.extend = function () {
    var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

    // Handle a deep copy situation
    if (typeof target === "boolean") {
      deep = target;

      // Skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if (_typeof(target) !== "object" && !isFunction(target)) {
      target = {};
    }

    // Extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }
    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name];

          // Prevent Object.prototype pollution
          // Prevent never-ending loop
          if (name === "__proto__" || target === copy) {
            continue;
          }

          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            src = target[name];

            // Ensure proper type for the source value
            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }
            copyIsArray = false;

            // Never move original objects, clone them
            target[name] = jQuery.extend(deep, clone, copy);

            // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }

    // Return the modified object
    return target;
  };
  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isPlainObject: function isPlainObject(obj) {
      var proto, Ctor;

      // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects
      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }
      proto = getProto(obj);

      // Objects with no prototype (e.g., `Object.create( null )`) are plain
      if (!proto) {
        return true;
      }

      // Objects with prototype are plain iff they were constructed by a global Object function
      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function isEmptyObject(obj) {
      var name;
      for (name in obj) {
        return false;
      }
      return true;
    },
    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function globalEval(code, options, doc) {
      DOMEval(code, {
        nonce: options && options.nonce
      }, doc);
    },
    each: function each(obj, callback) {
      var length,
        i = 0;
      if (isArrayLike(obj)) {
        length = obj.length;
        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }
      return obj;
    },
    // Retrieve the text value of an array of DOM nodes
    text: function text(elem) {
      var node,
        ret = "",
        i = 0,
        nodeType = elem.nodeType;
      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += jQuery.text(node);
        }
      }
      if (nodeType === 1 || nodeType === 11) {
        return elem.textContent;
      }
      if (nodeType === 9) {
        return elem.documentElement.textContent;
      }
      if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      }

      // Do not include comment or processing instruction nodes

      return ret;
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];
      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }
      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    isXMLDoc: function isXMLDoc(elem) {
      var namespace = elem && elem.namespaceURI,
        docElem = elem && (elem.ownerDocument || elem).documentElement;

      // Assume HTML when documentElement doesn't yet exist, such as inside
      // document fragments.
      return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function merge(first, second) {
      var len = +second.length,
        j = 0,
        i = first.length;
      for (; j < len; j++) {
        first[i++] = second[j];
      }
      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert;

      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }
      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
        value,
        i = 0,
        ret = [];

      // Go through the array, translating each of the items to their new values
      if (isArrayLike(elems)) {
        length = elems.length;
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }

        // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }
      }

      // Flatten any nested arrays
      return flat(ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });
  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  }

  // Populate the class2type map
  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });
  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
      type = toType(obj);
    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }
    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }
  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }
  var pop = arr.pop;
  var sort = arr.sort;
  var splice = arr.splice;
  var whitespace = "[\\x20\\t\\r\\n\\f]";
  var rtrimCSS = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g");

  // Note: an element does not contain itself
  jQuery.contains = function (a, b) {
    var bup = b && b.parentNode;
    return a === bup || !!(bup && bup.nodeType === 1 && (
    // Support: IE 9 - 11+
    // IE doesn't have `contains` on SVG.
    a.contains ? a.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
  };

  // CSS string/identifier serialization
  // https://drafts.csswg.org/cssom/#common-serializing-idioms
  var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
  function fcssescape(ch, asCodePoint) {
    if (asCodePoint) {
      // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
      if (ch === "\0") {
        return "\uFFFD";
      }

      // Control characters and (dependent upon position) numbers get escaped as code points
      return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
    }

    // Other potentially-special ASCII characters get backslash-escaped
    return "\\" + ch;
  }
  jQuery.escapeSelector = function (sel) {
    return (sel + "").replace(rcssescape, fcssescape);
  };
  var preferredDoc = document,
    pushNative = push;
  (function () {
    var i,
      Expr,
      outermostContext,
      sortInput,
      hasDuplicate,
      push = pushNative,
      // Local document vars
      document,
      documentElement,
      documentIsHTML,
      rbuggyQSA,
      matches,
      // Instance-specific data
      expando = jQuery.expando,
      dirruns = 0,
      done = 0,
      classCache = createCache(),
      tokenCache = createCache(),
      compilerCache = createCache(),
      nonnativeSelectorCache = createCache(),
      sortOrder = function sortOrder(a, b) {
        if (a === b) {
          hasDuplicate = true;
        }
        return 0;
      },
      booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" + "loop|multiple|open|readonly|required|scoped",
      // Regular expressions

      // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
      identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
      // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
      attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
      // Operator (capture 2)
      "*([*^$|!~]?=)" + whitespace +
      // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
      "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
      pseudos = ":(" + identifier + ")(?:\\((" +
      // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
      // 1. quoted (capture 3; capture 4 or capture 5)
      "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
      // 2. simple (capture 6)
      "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
      // 3. anything else (capture 2)
      ".*" + ")\\)|)",
      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
      rwhitespace = new RegExp(whitespace + "+", "g"),
      rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
      rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
      rdescend = new RegExp(whitespace + "|>"),
      rpseudo = new RegExp(pseudos),
      ridentifier = new RegExp("^" + identifier + "$"),
      matchExpr = {
        ID: new RegExp("^#(" + identifier + ")"),
        CLASS: new RegExp("^\\.(" + identifier + ")"),
        TAG: new RegExp("^(" + identifier + "|[*])"),
        ATTR: new RegExp("^" + attributes),
        PSEUDO: new RegExp("^" + pseudos),
        CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
        bool: new RegExp("^(?:" + booleans + ")$", "i"),
        // For use in libraries implementing .is()
        // We use this for POS matching in `select`
        needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
      },
      rinputs = /^(?:input|select|textarea|button)$/i,
      rheader = /^h\d$/i,
      // Easily-parseable/retrievable ID or TAG or CLASS selectors
      rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
      rsibling = /[+~]/,
      // CSS escapes
      // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
      runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"),
      funescape = function funescape(escape, nonHex) {
        var high = "0x" + escape.slice(1) - 0x10000;
        if (nonHex) {
          // Strip the backslash prefix from a non-hex escape sequence
          return nonHex;
        }

        // Replace a hexadecimal escape sequence with the encoded Unicode code point
        // Support: IE <=11+
        // For values outside the Basic Multilingual Plane (BMP), manually construct a
        // surrogate pair
        return high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
      },
      // Used for iframes; see `setDocument`.
      // Support: IE 9 - 11+, Edge 12 - 18+
      // Removing the function wrapper causes a "Permission Denied"
      // error in IE/Edge.
      unloadHandler = function unloadHandler() {
        setDocument();
      },
      inDisabledFieldset = addCombinator(function (elem) {
        return elem.disabled === true && nodeName(elem, "fieldset");
      }, {
        dir: "parentNode",
        next: "legend"
      });

    // Support: IE <=9 only
    // Accessing document.activeElement can throw unexpectedly
    // https://bugs.jquery.com/ticket/13393
    function safeActiveElement() {
      try {
        return document.activeElement;
      } catch (err) {}
    }

    // Optimize for push.apply( _, NodeList )
    try {
      push.apply(arr = _slice.call(preferredDoc.childNodes), preferredDoc.childNodes);

      // Support: Android <=4.0
      // Detect silently failing push.apply
      // eslint-disable-next-line no-unused-expressions
      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: function apply(target, els) {
          pushNative.apply(target, _slice.call(els));
        },
        call: function call(target) {
          pushNative.apply(target, _slice.call(arguments, 1));
        }
      };
    }
    function find(selector, context, results, seed) {
      var m,
        i,
        elem,
        nid,
        match,
        groups,
        newSelector,
        newContext = context && context.ownerDocument,
        // nodeType defaults to 9, since context defaults to document
        nodeType = context ? context.nodeType : 9;
      results = results || [];

      // Return early from calls with invalid selector or context
      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      }

      // Try to shortcut find operations (as opposed to filters) in HTML documents
      if (!seed) {
        setDocument(context);
        context = context || document;
        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE 9 only
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    push.call(results, elem);
                    return results;
                  }
                } else {
                  return results;
                }

                // Element context
              } else {
                // Support: IE 9 only
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && find.contains(context, elem) && elem.id === m) {
                  push.call(results, elem);
                  return results;
                }
              }

              // Type selector
            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results;

              // Class selector
            } else if ((m = match[3]) && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          }

          // Take advantage of querySelectorAll
          if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
            newSelector = selector;
            newContext = context;

            // qSA considers elements outside a scoping root when evaluating child or
            // descendant combinators, which is not what we want.
            // In such cases, we work around the behavior by prefixing every selector in the
            // list with an ID selector referencing the scope context.
            // The technique has to be used as well when a leading combinator is used
            // as such selectors are not recognized by querySelectorAll.
            // Thanks to Andrew Dupont for this technique.
            if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
              // Expand context for sibling selectors
              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;

              // We can use :scope instead of the ID hack if the browser
              // supports it & if we're not changing the context.
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when
              // strict-comparing two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              if (newContext != context || !support.scope) {
                // Capture the context ID, setting it first if necessary
                if (nid = context.getAttribute("id")) {
                  nid = jQuery.escapeSelector(nid);
                } else {
                  context.setAttribute("id", nid = expando);
                }
              }

              // Prefix every selector in the list
              groups = tokenize(selector);
              i = groups.length;
              while (i--) {
                groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
              }
              newSelector = groups.join(",");
            }
            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {
              nonnativeSelectorCache(selector, true);
            } finally {
              if (nid === expando) {
                context.removeAttribute("id");
              }
            }
          }
        }
      }

      // All others
      return select(selector.replace(rtrimCSS, "$1"), context, results, seed);
    }

    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */
    function createCache() {
      var keys = [];
      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties
        // (see https://github.com/jquery/sizzle/issues/157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }
        return cache[key + " "] = value;
      }
      return cache;
    }

    /**
     * Mark a function for special use by jQuery selector module
     * @param {Function} fn The function to mark
     */
    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }

    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */
    function assert(fn) {
      var el = document.createElement("fieldset");
      try {
        return !!fn(el);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        }

        // release memory in IE
        el = null;
      }
    }

    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */
    function createInputPseudo(type) {
      return function (elem) {
        return nodeName(elem, "input") && elem.type === type;
      };
    }

    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */
    function createButtonPseudo(type) {
      return function (elem) {
        return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;
      };
    }

    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */
    function createDisabledPseudo(disabled) {
      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
      return function (elem) {
        // Only certain elements can match :enabled or :disabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
        if ("form" in elem) {
          // Check for inherited disabledness on relevant non-disabled elements:
          // * listed form-associated elements in a disabled fieldset
          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
          // * option elements in a disabled optgroup
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
          // All such elements have a "form" property.
          if (elem.parentNode && elem.disabled === false) {
            // Option elements defer to a parent optgroup if present
            if ("label" in elem) {
              if ("label" in elem.parentNode) {
                return elem.parentNode.disabled === disabled;
              } else {
                return elem.disabled === disabled;
              }
            }

            // Support: IE 6 - 11+
            // Use the isDisabled shortcut property to check for disabled fieldset ancestors
            return elem.isDisabled === disabled ||
            // Where there is no isDisabled, check manually
            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
          }
          return elem.disabled === disabled;

          // Try to winnow out elements that can't be disabled before trusting the disabled property.
          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
          // even exist on them, let alone have a boolean value.
        } else if ("label" in elem) {
          return elem.disabled === disabled;
        }

        // Remaining elements are neither :enabled nor :disabled
        return false;
      };
    }

    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */
    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
            matchIndexes = fn([], seed.length, argument),
            i = matchIndexes.length;

          // Match elements found at the specified indexes
          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }

    /**
     * Checks a node for validity as a jQuery selector context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */
    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    }

    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [node] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */
    function setDocument(node) {
      var subWindow,
        doc = node ? node.ownerDocument || node : preferredDoc;

      // Return early if doc is invalid or already selected
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      }

      // Update global variables
      document = doc;
      documentElement = document.documentElement;
      documentIsHTML = !jQuery.isXMLDoc(document);

      // Support: iOS 7 only, IE 9 - 11+
      // Older browsers didn't support unprefixed `matches`.
      matches = documentElement.matches || documentElement.webkitMatchesSelector || documentElement.msMatchesSelector;

      // Support: IE 9 - 11+, Edge 12 - 18+
      // Accessing iframe documents after unload throws "permission denied" errors
      // (see trac-13936).
      // Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
      // all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
      if (documentElement.msMatchesSelector &&
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
        // Support: IE 9 - 11+, Edge 12 - 18+
        subWindow.addEventListener("unload", unloadHandler);
      }

      // Support: IE <10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programmatically-set names,
      // so use a roundabout getElementsByName test
      support.getById = assert(function (el) {
        documentElement.appendChild(el).id = jQuery.expando;
        return !document.getElementsByName || !document.getElementsByName(jQuery.expando).length;
      });

      // Support: IE 9 only
      // Check to see if it's possible to do matchesSelector
      // on a disconnected node.
      support.disconnectedMatch = assert(function (el) {
        return matches.call(el, "*");
      });

      // Support: IE 9 - 11+, Edge 12 - 18+
      // IE/Edge don't support the :scope pseudo-class.
      support.scope = assert(function () {
        return document.querySelectorAll(":scope");
      });

      // Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
      // Make sure the `:has()` argument is parsed unforgivingly.
      // We include `*` in the test to detect buggy implementations that are
      // _selectively_ forgiving (specifically when the list includes at least
      // one valid selector).
      // Note that we treat complete lack of support for `:has()` as if it were
      // spec-compliant support, which is fine because use of `:has()` in such
      // environments will fail in the qSA path and fall back to jQuery traversal
      // anyway.
      support.cssHas = assert(function () {
        try {
          document.querySelector(":has(*,:jqfake)");
          return false;
        } catch (e) {
          return true;
        }
      });

      // ID filter and find
      if (support.getById) {
        Expr.filter.ID = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };
        Expr.find.ID = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var elem = context.getElementById(id);
            return elem ? [elem] : [];
          }
        };
      } else {
        Expr.filter.ID = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        };

        // Support: IE 6 - 7 only
        // getElementById is not reliable as a find shortcut
        Expr.find.ID = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var node,
              i,
              elems,
              elem = context.getElementById(id);
            if (elem) {
              // Verify the id attribute
              node = elem.getAttributeNode("id");
              if (node && node.value === id) {
                return [elem];
              }

              // Fall back on getElementsByName
              elems = context.getElementsByName(id);
              i = 0;
              while (elem = elems[i++]) {
                node = elem.getAttributeNode("id");
                if (node && node.value === id) {
                  return [elem];
                }
              }
            }
            return [];
          }
        };
      }

      // Tag
      Expr.find.TAG = function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag);

          // DocumentFragment nodes don't have gEBTN
        } else {
          return context.querySelectorAll(tag);
        }
      };

      // Class
      Expr.find.CLASS = function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };

      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */

      // QSA and matchesSelector support

      rbuggyQSA = [];

      // Build QSA regex
      // Regex strategy adopted from Diego Perini
      assert(function (el) {
        var input;
        documentElement.appendChild(el).innerHTML = "<a id='" + expando + "' href='' disabled='disabled'></a>" + "<select id='" + expando + "-\r\\' disabled='disabled'>" + "<option selected=''></option></select>";

        // Support: iOS <=7 - 8 only
        // Boolean attributes and "value" are not treated correctly in some XML documents
        if (!el.querySelectorAll("[selected]").length) {
          rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
        }

        // Support: iOS <=7 - 8 only
        if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
          rbuggyQSA.push("~=");
        }

        // Support: iOS 8 only
        // https://bugs.webkit.org/show_bug.cgi?id=136851
        // In-page `selector#id sibling-combinator selector` fails
        if (!el.querySelectorAll("a#" + expando + "+*").length) {
          rbuggyQSA.push(".#.+[+~]");
        }

        // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
        // In some of the document kinds, these selectors wouldn't work natively.
        // This is probably OK but for backwards compatibility we want to maintain
        // handling them through jQuery traversal in jQuery 3.x.
        if (!el.querySelectorAll(":checked").length) {
          rbuggyQSA.push(":checked");
        }

        // Support: Windows 8 Native Apps
        // The type and name attributes are restricted during .innerHTML assignment
        input = document.createElement("input");
        input.setAttribute("type", "hidden");
        el.appendChild(input).setAttribute("name", "D");

        // Support: IE 9 - 11+
        // IE's :disabled selector does not pick up the children of disabled fieldsets
        // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
        // In some of the document kinds, these selectors wouldn't work natively.
        // This is probably OK but for backwards compatibility we want to maintain
        // handling them through jQuery traversal in jQuery 3.x.
        documentElement.appendChild(el).disabled = true;
        if (el.querySelectorAll(":disabled").length !== 2) {
          rbuggyQSA.push(":enabled", ":disabled");
        }

        // Support: IE 11+, Edge 15 - 18+
        // IE 11/Edge don't find elements on a `[name='']` query in some cases.
        // Adding a temporary attribute to the document before the selection works
        // around the issue.
        // Interestingly, IE 10 & older don't seem to have the issue.
        input = document.createElement("input");
        input.setAttribute("name", "");
        el.appendChild(input);
        if (!el.querySelectorAll("[name='']").length) {
          rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
        }
      });
      if (!support.cssHas) {
        // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
        // Our regular `try-catch` mechanism fails to detect natively-unsupported
        // pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
        // in browsers that parse the `:has()` argument as a forgiving selector list.
        // https://drafts.csswg.org/selectors/#relational now requires the argument
        // to be parsed unforgivingly, but browsers have not yet fully adjusted.
        rbuggyQSA.push(":has");
      }
      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));

      /* Sorting
      ---------------------------------------------------------------------- */

      // Document order sorting
      sortOrder = function sortOrder(a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        // Sort on method existence if only one input has compareDocumentPosition
        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
        if (compare) {
          return compare;
        }

        // Calculate position if both inputs belong to the same document
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) :
        // Otherwise we know they are disconnected
        1;

        // Disconnected nodes
        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if (a === document || a.ownerDocument == preferredDoc && find.contains(preferredDoc, a)) {
            return -1;
          }

          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if (b === document || b.ownerDocument == preferredDoc && find.contains(preferredDoc, b)) {
            return 1;
          }

          // Maintain original order
          return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
        }
        return compare & 4 ? -1 : 1;
      };
      return document;
    }
    find.matches = function (expr, elements) {
      return find(expr, null, null, elements);
    };
    find.matchesSelector = function (elem, expr) {
      setDocument(elem);
      if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr);

          // IE 9's matchesSelector returns false on disconnected nodes
          if (ret || support.disconnectedMatch ||
          // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {
          nonnativeSelectorCache(expr, true);
        }
      }
      return find(expr, document, null, [elem]).length > 0;
    };
    find.contains = function (context, elem) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((context.ownerDocument || context) != document) {
        setDocument(context);
      }
      return jQuery.contains(context, elem);
    };
    find.attr = function (elem, name) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((elem.ownerDocument || elem) != document) {
        setDocument(elem);
      }
      var fn = Expr.attrHandle[name.toLowerCase()],
        // Don't get fooled by Object.prototype properties (see trac-13807)
        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      if (val !== undefined) {
        return val;
      }
      return elem.getAttribute(name);
    };
    find.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };

    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */
    jQuery.uniqueSort = function (results) {
      var elem,
        duplicates = [],
        j = 0,
        i = 0;

      // Unless we *know* we can detect duplicates, assume their presence
      //
      // Support: Android <=4.0+
      // Testing for detecting duplicates is unpredictable so instead assume we can't
      // depend on duplicate detection in all browsers without a stable sort.
      hasDuplicate = !support.sortStable;
      sortInput = !support.sortStable && _slice.call(results, 0);
      sort.call(results, sortOrder);
      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }
        while (j--) {
          splice.call(results, duplicates[j], 1);
        }
      }

      // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225
      sortInput = null;
      return results;
    };
    jQuery.fn.uniqueSort = function () {
      return this.pushStack(jQuery.uniqueSort(_slice.apply(this)));
    };
    Expr = jQuery.expr = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        ATTR: function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape);

          // Move the given value to match[3] whether quoted or unquoted
          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }
          return match.slice(0, 4);
        },
        CHILD: function CHILD(match) {
          /* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */
          match[1] = match[1].toLowerCase();
          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              find.error(match[0]);
            }

            // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1
            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd");

            // other types prohibit arguments
          } else if (match[3]) {
            find.error(match[0]);
          }
          return match;
        },
        PSEUDO: function PSEUDO(match) {
          var excess,
            unquoted = !match[6] && match[2];
          if (matchExpr.CHILD.test(match[0])) {
            return null;
          }

          // Accept quoted arguments as-is
          if (match[3]) {
            match[2] = match[4] || match[5] || "";

            // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && (
          // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && (
          // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          }

          // Return only captures needed by the pseudo filter method (type and argument)
          return match.slice(0, 3);
        }
      },
      filter: {
        TAG: function TAG(nodeNameSelector) {
          var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return nodeName(elem, expectedNodeName);
          };
        },
        CLASS: function CLASS(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        ATTR: function ATTR(name, operator, check) {
          return function (elem) {
            var result = find.attr(elem, name);
            if (result == null) {
              return operator === "!=";
            }
            if (!operator) {
              return true;
            }
            result += "";
            if (operator === "=") {
              return result === check;
            }
            if (operator === "!=") {
              return result !== check;
            }
            if (operator === "^=") {
              return check && result.indexOf(check) === 0;
            }
            if (operator === "*=") {
              return check && result.indexOf(check) > -1;
            }
            if (operator === "$=") {
              return check && result.slice(-check.length) === check;
            }
            if (operator === "~=") {
              return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;
            }
            if (operator === "|=") {
              return result === check || result.slice(0, check.length + 1) === check + "-";
            }
            return false;
          };
        },
        CHILD: function CHILD(type, what, _argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
            forward = type.slice(-4) !== "last",
            ofType = what === "of-type";
          return first === 1 && last === 0 ?
          // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, _context, xml) {
            var cache,
              outerCache,
              node,
              nodeIndex,
              start,
              dir = simple !== forward ? "nextSibling" : "previousSibling",
              parent = elem.parentNode,
              name = ofType && elem.nodeName.toLowerCase(),
              useCache = !xml && !ofType,
              diff = false;
            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;
                  while (node = node[dir]) {
                    if (ofType ? nodeName(node, name) : node.nodeType === 1) {
                      return false;
                    }
                  }

                  // Reverse direction for :only-* (if we haven't yet done so)
                  start = dir = type === "only" && !start && "nextSibling";
                }
                return true;
              }
              start = [forward ? parent.firstChild : parent.lastChild];

              // non-xml :nth-child(...) stores cache data on `parent`
              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                outerCache = parent[expando] || (parent[expando] = {});
                cache = outerCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];
                while (node = ++nodeIndex && node && node[dir] || (
                // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    outerCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  cache = outerCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                }

                // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? nodeName(node, name) : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {});
                        outerCache[type] = [dirruns, diff];
                      }
                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              }

              // Incorporate the offset, then check against cycle size
              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        PSEUDO: function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // https://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);

          // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as jQuery does
          if (fn[expando]) {
            return fn(argument);
          }

          // But maintain support for old signatures
          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                matched = fn(seed, argument),
                i = matched.length;
              while (i--) {
                idx = indexOf.call(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }
          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        not: markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
            results = [],
            matcher = compile(selector.replace(rtrimCSS, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {
            var elem,
              unmatched = matcher(seed, null, xml, []),
              i = seed.length;

            // Match elements unmatched by `matcher`
            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, _context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results);

            // Don't keep the element
            // (see https://github.com/jquery/sizzle/issues/299)
            input[0] = null;
            return !results.pop();
          };
        }),
        has: markFunction(function (selector) {
          return function (elem) {
            return find(selector, elem).length > 0;
          };
        }),
        contains: markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || jQuery.text(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // https://www.w3.org/TR/selectors/#lang-pseudo
        lang: markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            find.error("unsupported lang: " + lang);
          }
          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;
            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);
            return false;
          };
        }),
        // Miscellaneous
        target: function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        root: function root(elem) {
          return elem === documentElement;
        },
        focus: function focus(elem) {
          return elem === safeActiveElement() && document.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        enabled: createDisabledPseudo(false),
        disabled: createDisabledPseudo(true),
        checked: function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;
        },
        selected: function selected(elem) {
          // Support: IE <=11+
          // Accessing the selectedIndex property
          // forces the browser to treat the default option as
          // selected when in an optgroup.
          if (elem.parentNode) {
            // eslint-disable-next-line no-unused-expressions
            elem.parentNode.selectedIndex;
          }
          return elem.selected === true;
        },
        // Contents
        empty: function empty(elem) {
          // https://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }
          return true;
        },
        parent: function parent(elem) {
          return !Expr.pseudos.empty(elem);
        },
        // Element/input types
        header: function header(elem) {
          return rheader.test(elem.nodeName);
        },
        input: function input(elem) {
          return rinputs.test(elem.nodeName);
        },
        button: function button(elem) {
          return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");
        },
        text: function text(elem) {
          var attr;
          return nodeName(elem, "input") && elem.type === "text" && (
          // Support: IE <10 only
          // New HTML5 attribute values (e.g., "search") appear
          // with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        first: createPositionalPseudo(function () {
          return [0];
        }),
        last: createPositionalPseudo(function (_matchIndexes, length) {
          return [length - 1];
        }),
        eq: createPositionalPseudo(function (_matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        even: createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        odd: createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        lt: createPositionalPseudo(function (matchIndexes, length, argument) {
          var i;
          if (argument < 0) {
            i = argument + length;
          } else if (argument > length) {
            i = length;
          } else {
            i = argument;
          }
          for (; --i >= 0;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        gt: createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;
          for (; ++i < length;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        })
      }
    };
    Expr.pseudos.nth = Expr.pseudos.eq;

    // Add button/input type pseudos
    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }
    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    }

    // Easy API for creating new setFilters
    function setFilters() {}
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();
    function tokenize(selector, parseOnly) {
      var matched,
        match,
        tokens,
        type,
        soFar,
        groups,
        preFilters,
        cached = tokenCache[selector + " "];
      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }
      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;
      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }
          groups.push(tokens = []);
        }
        matched = false;

        // Combinators
        if (match = rleadingCombinator.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrimCSS, " ")
          });
          soFar = soFar.slice(matched.length);
        }

        // Filters
        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }
        if (!matched) {
          break;
        }
      }

      // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens
      if (parseOnly) {
        return soFar.length;
      }
      return soFar ? find.error(selector) :
      // Cache the tokens
      tokenCache(selector, groups).slice(0);
    }
    function toSelector(tokens) {
      var i = 0,
        len = tokens.length,
        selector = "";
      for (; i < len; i++) {
        selector += tokens[i].value;
      }
      return selector;
    }
    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
        skip = combinator.next,
        key = skip || dir,
        checkNonElements = base && key === "parentNode",
        doneName = done++;
      return combinator.first ?
      // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }
        return false;
      } :
      // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
          outerCache,
          newCache = [dirruns, doneName];

        // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {});
              if (skip && nodeName(elem, skip)) {
                elem = elem[dir] || elem;
              } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                outerCache[key] = newCache;

                // A match means we're done; a fail means we have to keep checking
                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }
        return false;
      };
    }
    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;
        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }
        return true;
      } : matchers[0];
    }
    function multipleContexts(selector, contexts, results) {
      var i = 0,
        len = contexts.length;
      for (; i < len; i++) {
        find(selector, contexts[i], results);
      }
      return results;
    }
    function condense(unmatched, map, filter, context, xml) {
      var elem,
        newUnmatched = [],
        i = 0,
        len = unmatched.length,
        mapped = map != null;
      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);
            if (mapped) {
              map.push(i);
            }
          }
        }
      }
      return newUnmatched;
    }
    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }
      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }
      return markFunction(function (seed, results, context, xml) {
        var temp,
          i,
          elem,
          matcherOut,
          preMap = [],
          postMap = [],
          preexisting = results.length,
          // Get initial elements from seed or context
          elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
          // Prefilter to get matcher input, preserving a map for seed-results synchronization
          matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems;
        if (matcher) {
          // If we have a postFinder, or filtered seed, or non-seed postFilter
          // or preexisting results,
          matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ?
          // ...intermediate processing is necessary
          [] :
          // ...otherwise use results directly
          results;

          // Find primary matches
          matcher(matcherIn, matcherOut, context, xml);
        } else {
          matcherOut = matcherIn;
        }

        // Apply postFilter
        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml);

          // Un-match failing elements by moving them back to matcherIn
          i = temp.length;
          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }
        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;
              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }
              postFinder(null, matcherOut = [], temp, xml);
            }

            // Move matched elements from seed to results to keep them synchronized
            i = matcherOut.length;
            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          }

          // Add elements to results, through postFinder if defined
        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }
    function matcherFromTokens(tokens) {
      var checkContext,
        matcher,
        j,
        len = tokens.length,
        leadingRelative = Expr.relative[tokens[0].type],
        implicitRelative = leadingRelative || Expr.relative[" "],
        i = leadingRelative ? 1 : 0,
        // The foundational matcher ensures that elements are reachable from top-level context(s)
        matchContext = addCombinator(function (elem) {
          return elem === checkContext;
        }, implicitRelative, true),
        matchAnyContext = addCombinator(function (elem) {
          return indexOf.call(checkContext, elem) > -1;
        }, implicitRelative, true),
        matchers = [function (elem, context, xml) {
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          var ret = !leadingRelative && (xml || context != outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));

          // Avoid hanging onto element
          // (see https://github.com/jquery/sizzle/issues/299)
          checkContext = null;
          return ret;
        }];
      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

          // Return special upon seeing a positional matcher
          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;
            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }
            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrimCSS, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }
          matchers.push(matcher);
        }
      }
      return elementMatcher(matchers);
    }
    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
        byElement = elementMatchers.length > 0,
        superMatcher = function superMatcher(seed, context, xml, results, outermost) {
          var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
            elems = seed || byElement && Expr.find.TAG("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
            dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;
          if (outermost) {
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            outermostContext = context == document || context || outermost;
          }

          // Add elements passing elementMatchers directly to results
          // Support: iOS <=7 - 9 only
          // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
          // elements by id. (see trac-14142)
          for (; i !== len && (elem = elems[i]) != null; i++) {
            if (byElement && elem) {
              j = 0;

              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              if (!context && elem.ownerDocument != document) {
                setDocument(elem);
                xml = !documentIsHTML;
              }
              while (matcher = elementMatchers[j++]) {
                if (matcher(elem, context || document, xml)) {
                  push.call(results, elem);
                  break;
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
              }
            }

            // Track unmatched elements for set filters
            if (bySet) {
              // They will have gone through all possible matchers
              if (elem = !matcher && elem) {
                matchedCount--;
              }

              // Lengthen the array for every element, matched or not
              if (seed) {
                unmatched.push(elem);
              }
            }
          }

          // `i` is now the count of elements visited above, and adding it to `matchedCount`
          // makes the latter nonnegative.
          matchedCount += i;

          // Apply set filters to unmatched elements
          // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
          // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
          // no element matchers and no seed.
          // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
          // case, which will result in a "00" `matchedCount` that differs from `i` but is also
          // numerically zero.
          if (bySet && i !== matchedCount) {
            j = 0;
            while (matcher = setMatchers[j++]) {
              matcher(unmatched, setMatched, context, xml);
            }
            if (seed) {
              // Reintegrate element matches to eliminate the need for sorting
              if (matchedCount > 0) {
                while (i--) {
                  if (!(unmatched[i] || setMatched[i])) {
                    setMatched[i] = pop.call(results);
                  }
                }
              }

              // Discard index placeholder values to get only actual matches
              setMatched = condense(setMatched);
            }

            // Add matches to results
            push.apply(results, setMatched);

            // Seedless set matches succeeding multiple successful matchers stipulate sorting
            if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
              jQuery.uniqueSort(results);
            }
          }

          // Override manipulation of globals by nested matchers
          if (outermost) {
            dirruns = dirrunsUnique;
            outermostContext = contextBackup;
          }
          return unmatched;
        };
      return bySet ? markFunction(superMatcher) : superMatcher;
    }
    function compile(selector, match /* Internal Use Only */) {
      var i,
        setMatchers = [],
        elementMatchers = [],
        cached = compilerCache[selector + " "];
      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }
        i = match.length;
        while (i--) {
          cached = matcherFromTokens(match[i]);
          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        }

        // Cache the compiled function
        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

        // Save selector and tokenization
        cached.selector = selector;
      }
      return cached;
    }

    /**
     * A low-level selection function that works with jQuery's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with jQuery selector compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */
    function select(selector, context, results, seed) {
      var i,
        tokens,
        token,
        type,
        find,
        compiled = typeof selector === "function" && selector,
        match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || [];

      // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)
      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);
        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0];
          if (!context) {
            return results;

            // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }
          selector = selector.slice(tokens.shift().value.length);
        }

        // Fetch a seed set for right-to-left matching
        i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
        while (i--) {
          token = tokens[i];

          // Abort if we hit a combinator
          if (Expr.relative[type = token.type]) {
            break;
          }
          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);
              if (!selector) {
                push.apply(results, seed);
                return results;
              }
              break;
            }
          }
        }
      }

      // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above
      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }

    // One-time assignments

    // Support: Android <=4.0 - 4.1+
    // Sort stability
    support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

    // Initialize against the default document
    setDocument();

    // Support: Android <=4.0 - 4.1+
    // Detached nodes confoundingly follow *each other*
    support.sortDetached = assert(function (el) {
      // Should return 1, but returns 4 (following)
      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
    });
    jQuery.find = find;

    // Deprecated
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = jQuery.uniqueSort;

    // These have always been private, but they used to be documented as part of
    // Sizzle so let's maintain them for now for backwards compatibility purposes.
    find.compile = compile;
    find.select = select;
    find.setDocument = setDocument;
    find.tokenize = tokenize;
    find.escape = jQuery.escapeSelector;
    find.getText = jQuery.text;
    find.isXML = jQuery.isXMLDoc;
    find.selectors = jQuery.expr;
    find.support = jQuery.support;
    find.uniqueSort = jQuery.uniqueSort;

    /* eslint-enable */
  })();
  var dir = function dir(elem, _dir, until) {
    var matched = [],
      truncate = until !== undefined;
    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }
        matched.push(elem);
      }
    }
    return matched;
  };
  var _siblings = function siblings(n, elem) {
    var matched = [];
    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }
    return matched;
  };
  var rneedsContext = jQuery.expr.match.needsContext;
  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }

    // Single element
    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    }

    // Arraylike of elements (jQuery, arguments, Array)
    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    }

    // Filtered directly for both simple and complex selectors
    return jQuery.filter(qualifier, elements, not);
  }
  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];
    if (not) {
      expr = ":not(" + expr + ")";
    }
    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }
    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };
  jQuery.fn.extend({
    find: function find(selector) {
      var i,
        ret,
        len = this.length,
        self = this;
      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }
      ret = this.pushStack([]);
      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }
      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this,
      // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  });

  // Initialize a jQuery object

  // A central reference to the root jQuery(document)
  var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
    // Strict HTML recognition (trac-11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
    init = jQuery.fn.init = function (selector, context, root) {
      var match, elem;

      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }

      // Method init() accepts an alternate rootjQuery
      // so migrate can support jQuery.sub (gh-2101)
      root = root || rootjQuery;

      // Handle HTML strings
      if (typeof selector === "string") {
        if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [null, selector, null];
        } else {
          match = rquickExpr.exec(selector);
        }

        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof jQuery ? context[0] : context;

            // Option to run scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (isFunction(this[match])) {
                  this[match](context[match]);

                  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }
            return this;

            // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);
            if (elem) {
              // Inject the element directly into the jQuery object
              this[0] = elem;
              this.length = 1;
            }
            return this;
          }

          // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || root).find(selector);

          // HANDLE: $(expr, context)
          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }

        // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this[0] = selector;
        this.length = 1;
        return this;

        // HANDLE: $(function)
        // Shortcut for document ready
      } else if (isFunction(selector)) {
        return root.ready !== undefined ? root.ready(selector) :
        // Execute immediately if ready is not present
        selector(jQuery);
      }
      return jQuery.makeArray(selector, this);
    };

  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;

  // Initialize central reference
  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };
  jQuery.fn.extend({
    has: function has(target) {
      var targets = jQuery(target, this),
        l = targets.length;
      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
        i = 0,
        l = this.length,
        matched = [],
        targets = typeof selectors !== "string" && jQuery(selectors);

      // Positional selectors never match, since there's no _selection_ context
      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :
            // Don't pass non-elements to jQuery#find
            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }
      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }

      // Index in selector
      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      }

      // Locate the position of the desired element
      return indexOf.call(this,
      // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });
  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}
    return cur;
  }
  jQuery.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, _i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, _i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, _i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      if (elem.contentDocument != null &&
      // Support: IE 11+
      // <object> elements with no `data` attribute has an object
      // `contentDocument` with a `null` prototype.
      getProto(elem.contentDocument)) {
        return elem.contentDocument;
      }

      // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.
      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }
      return jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);
      if (name.slice(-5) !== "Until") {
        selector = until;
      }
      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }
      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        }

        // Reverse order for parents* and prev-derivatives
        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }
      return this.pushStack(matched);
    };
  });
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

  // Convert String-formatted options into Object-formatted ones
  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }

  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);
    var
      // Flag to know if list is currently firing
      firing,
      // Last fire value for non-forgettable lists
      memory,
      // Flag to know if list was already fired
      _fired,
      // Flag to prevent firing
      _locked,
      // Actual callback list
      list = [],
      // Queue of execution data for repeatable lists
      queue = [],
      // Index of currently firing callback (modified by add/remove as needed)
      firingIndex = -1,
      // Fire callbacks
      fire = function fire() {
        // Enforce single-firing
        _locked = _locked || options.once;

        // Execute callbacks for all pending executions,
        // respecting firingIndex overrides and runtime changes
        _fired = firing = true;
        for (; queue.length; firingIndex = -1) {
          memory = queue.shift();
          while (++firingIndex < list.length) {
            // Run callback and check for early termination
            if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
              // Jump to end and forget the data so .add doesn't re-fire
              firingIndex = list.length;
              memory = false;
            }
          }
        }

        // Forget the data if we're done with it
        if (!options.memory) {
          memory = false;
        }
        firing = false;

        // Clean up if we're done firing for good
        if (_locked) {
          // Keep an empty list if we have data for future add calls
          if (memory) {
            list = [];

            // Otherwise, this object is spent
          } else {
            list = "";
          }
        }
      },
      // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function add() {
          if (list) {
            // If we have memory from a past run, we should fire after adding
            if (memory && !firing) {
              firingIndex = list.length - 1;
              queue.push(memory);
            }
            (function add(args) {
              jQuery.each(args, function (_, arg) {
                if (isFunction(arg)) {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && toType(arg) !== "string") {
                  // Inspect recursively
                  add(arg);
                }
              });
            })(arguments);
            if (memory && !firing) {
              fire();
            }
          }
          return this;
        },
        // Remove a callback from the list
        remove: function remove() {
          jQuery.each(arguments, function (_, arg) {
            var index;
            while ((index = jQuery.inArray(arg, list, index)) > -1) {
              list.splice(index, 1);

              // Handle firing indexes
              if (index <= firingIndex) {
                firingIndex--;
              }
            }
          });
          return this;
        },
        // Check if a given callback is in the list.
        // If no argument is given, return whether or not list has callbacks attached.
        has: function has(fn) {
          return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
        },
        // Remove all callbacks from the list
        empty: function empty() {
          if (list) {
            list = [];
          }
          return this;
        },
        // Disable .fire and .add
        // Abort any current/pending executions
        // Clear all callbacks and values
        disable: function disable() {
          _locked = queue = [];
          list = memory = "";
          return this;
        },
        disabled: function disabled() {
          return !list;
        },
        // Disable .fire
        // Also disable .add unless we have memory (since it would have no effect)
        // Abort any pending executions
        lock: function lock() {
          _locked = queue = [];
          if (!memory && !firing) {
            list = memory = "";
          }
          return this;
        },
        locked: function locked() {
          return !!_locked;
        },
        // Call all callbacks with the given context and arguments
        fireWith: function fireWith(context, args) {
          if (!_locked) {
            args = args || [];
            args = [context, args.slice ? args.slice() : args];
            queue.push(args);
            if (!firing) {
              fire();
            }
          }
          return this;
        },
        // Call all the callbacks with the given arguments
        fire: function fire() {
          self.fireWith(this, arguments);
          return this;
        },
        // To know if the callbacks have already been called at least once
        fired: function fired() {
          return !!_fired;
        }
      };
    return self;
  };
  function Identity(v) {
    return v;
  }
  function Thrower(ex) {
    throw ex;
  }
  function adoptValue(value, resolve, reject, noValue) {
    var method;
    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject);

        // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject);

        // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      }

      // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.
    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }
  jQuery.extend({
    Deferred: function Deferred(func) {
      var tuples = [
        // action, add listener, callbacks,
        // ... .then handlers, argument index, [final state]
        ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
        _state = "pending",
        _promise = {
          state: function state() {
            return _state;
          },
          always: function always() {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          "catch": function _catch(fn) {
            return _promise.then(null, fn);
          },
          // Keep pipe for back-compat
          pipe: function pipe( /* fnDone, fnFail, fnProgress */
          ) {
            var fns = arguments;
            return jQuery.Deferred(function (newDefer) {
              jQuery.each(tuples, function (_i, tuple) {
                // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                // deferred.progress(function() { bind to newDefer or newDefer.notify })
                // deferred.done(function() { bind to newDefer or newDefer.resolve })
                // deferred.fail(function() { bind to newDefer or newDefer.reject })
                deferred[tuple[1]](function () {
                  var returned = fn && fn.apply(this, arguments);
                  if (returned && isFunction(returned.promise)) {
                    returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                  } else {
                    newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                  }
                });
              });
              fns = null;
            }).promise();
          },
          then: function then(onFulfilled, onRejected, onProgress) {
            var maxDepth = 0;
            function resolve(depth, deferred, handler, special) {
              return function () {
                var that = this,
                  args = arguments,
                  mightThrow = function mightThrow() {
                    var returned, then;

                    // Support: Promises/A+ section 2.3.3.3.3
                    // https://promisesaplus.com/#point-59
                    // Ignore double-resolution attempts
                    if (depth < maxDepth) {
                      return;
                    }
                    returned = handler.apply(that, args);

                    // Support: Promises/A+ section 2.3.1
                    // https://promisesaplus.com/#point-48
                    if (returned === deferred.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    }

                    // Support: Promises/A+ sections 2.3.3.1, 3.5
                    // https://promisesaplus.com/#point-54
                    // https://promisesaplus.com/#point-75
                    // Retrieve `then` only once
                    then = returned && (
                    // Support: Promises/A+ section 2.3.4
                    // https://promisesaplus.com/#point-64
                    // Only check objects and functions for thenability
                    _typeof(returned) === "object" || typeof returned === "function") && returned.then;

                    // Handle a returned thenable
                    if (isFunction(then)) {
                      // Special processors (notify) just wait for resolution
                      if (special) {
                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

                        // Normal processors (resolve) also hook into progress
                      } else {
                        // ...and disregard older resolution values
                        maxDepth++;
                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                      }

                      // Handle all other returned values
                    } else {
                      // Only substitute handlers pass on context
                      // and multiple values (non-spec behavior)
                      if (handler !== Identity) {
                        that = undefined;
                        args = [returned];
                      }

                      // Process the value(s)
                      // Default process is resolve
                      (special || deferred.resolveWith)(that, args);
                    }
                  },
                  // Only normal processors (resolve) catch and reject exceptions
                  process = special ? mightThrow : function () {
                    try {
                      mightThrow();
                    } catch (e) {
                      if (jQuery.Deferred.exceptionHook) {
                        jQuery.Deferred.exceptionHook(e, process.error);
                      }

                      // Support: Promises/A+ section 2.3.3.3.4.1
                      // https://promisesaplus.com/#point-61
                      // Ignore post-resolution exceptions
                      if (depth + 1 >= maxDepth) {
                        // Only substitute handlers pass on context
                        // and multiple values (non-spec behavior)
                        if (handler !== Thrower) {
                          that = undefined;
                          args = [e];
                        }
                        deferred.rejectWith(that, args);
                      }
                    }
                  };

                // Support: Promises/A+ section 2.3.3.3.1
                // https://promisesaplus.com/#point-57
                // Re-resolve promises immediately to dodge false rejection from
                // subsequent errors
                if (depth) {
                  process();
                } else {
                  // Call an optional hook to record the error, in case of exception
                  // since it's otherwise lost when execution goes async
                  if (jQuery.Deferred.getErrorHook) {
                    process.error = jQuery.Deferred.getErrorHook();

                    // The deprecated alias of the above. While the name suggests
                    // returning the stack, not an error instance, jQuery just passes
                    // it directly to `console.warn` so both will work; an instance
                    // just better cooperates with source maps.
                  } else if (jQuery.Deferred.getStackHook) {
                    process.error = jQuery.Deferred.getStackHook();
                  }
                  window.setTimeout(process);
                }
              };
            }
            return jQuery.Deferred(function (newDefer) {
              // progress_handlers.add( ... )
              tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

              // fulfilled_handlers.add( ... )
              tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));

              // rejected_handlers.add( ... )
              tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
            }).promise();
          },
          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function promise(obj) {
            return obj != null ? jQuery.extend(obj, _promise) : _promise;
          }
        },
        deferred = {};

      // Add list-specific methods
      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
          stateString = tuple[5];

        // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add
        _promise[tuple[1]] = list.add;

        // Handle state
        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            _state = stateString;
          },
          // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable,
          // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable,
          // progress_callbacks.lock
          tuples[0][2].lock,
          // progress_handlers.lock
          tuples[0][3].lock);
        }

        // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire
        list.add(tuple[3].fire);

        // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        };

        // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith
        deferred[tuple[0] + "With"] = list.fireWith;
      });

      // Make the deferred a promise
      _promise.promise(deferred);

      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }

      // All done!
      return deferred;
    },
    // Deferred helper
    when: function when(singleValue) {
      var
        // count of uncompleted subordinates
        remaining = arguments.length,
        // count of unprocessed arguments
        i = remaining,
        // subordinate fulfillment data
        resolveContexts = Array(i),
        resolveValues = _slice.call(arguments),
        // the primary Deferred
        primary = jQuery.Deferred(),
        // subordinate callback factory
        updateFunc = function updateFunc(i) {
          return function (value) {
            resolveContexts[i] = this;
            resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
            if (! --remaining) {
              primary.resolveWith(resolveContexts, resolveValues);
            }
          };
        };

      // Single- and empty arguments are adopted like Promise.resolve
      if (remaining <= 1) {
        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);

        // Use .then() to unwrap secondary thenables (cf. gh-3000)
        if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return primary.then();
        }
      }

      // Multiple arguments are aggregated like Promise.all array elements
      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), primary.reject);
      }
      return primary.promise();
    }
  });

  // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.
  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  // If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
  // captured before the async barrier to get the original error cause
  // which may otherwise be hidden.
  jQuery.Deferred.exceptionHook = function (error, asyncError) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, asyncError);
    }
  };
  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  };

  // The deferred used on DOM ready
  var readyList = jQuery.Deferred();
  jQuery.fn.ready = function (fn) {
    readyList.then(fn)

    // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    ["catch"](function (error) {
      jQuery.readyException(error);
    });
    return this;
  };
  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See trac-6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }

      // Remember that the DOM is ready
      jQuery.isReady = true;

      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }

      // If there are functions bound, to execute
      readyList.resolveWith(document, [jQuery]);
    }
  });
  jQuery.ready.then = readyList.then;

  // The ready event handler and self cleanup method
  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  }

  // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon
  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed);

    // A fallback to window.onload, that will always work
    window.addEventListener("load", completed);
  }

  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
      len = elems.length,
      bulk = key == null;

    // Sets many values
    if (toType(key) === "object") {
      chainable = true;
      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      }

      // Sets one value
    } else if (value !== undefined) {
      chainable = true;
      if (!isFunction(value)) {
        raw = true;
      }
      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null;

          // ...except when executing function values
        } else {
          bulk = fn;
          fn = function fn(elem, _key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }
      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }
    if (chainable) {
      return elems;
    }

    // Gets
    if (bulk) {
      return fn.call(elems);
    }
    return len ? fn(elems[0], key) : emptyGet;
  };

  // Matches dashed string for camelizing
  var rmsPrefix = /^-ms-/,
    rdashAlpha = /-([a-z])/g;

  // Used by camelCase as callback to replace()
  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  }

  // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (trac-9572)
  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }
  var acceptData = function acceptData(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };
  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }
  Data.uid = 1;
  Data.prototype = {
    cache: function cache(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando];

      // If not, create one
      if (!value) {
        value = {};

        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see trac-8335.
        // Always return an empty object.
        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value;

            // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }
      return value;
    },
    set: function set(owner, data, value) {
      var prop,
        cache = this.cache(owner);

      // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)
      if (typeof data === "string") {
        cache[camelCase(data)] = value;

        // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }
      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) :
      // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function access(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      }

      // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);

      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
        cache = owner[this.expando];
      if (cache === undefined) {
        return;
      }
      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key);

          // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace
          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }
        i = key.length;
        while (i--) {
          delete cache[key[i]];
        }
      }

      // Remove the expando if there's no more data
      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data();

  //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /[A-Z]/g;
  function getData(data) {
    if (data === "true") {
      return true;
    }
    if (data === "false") {
      return false;
    }
    if (data === "null") {
      return null;
    }

    // Only convert to a number if it doesn't change the string
    if (data === +data + "") {
      return +data;
    }
    if (rbrace.test(data)) {
      return JSON.parse(data);
    }
    return data;
  }
  function dataAttr(elem, key, data) {
    var name;

    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);
      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {}

        // Make sure we set the data so it isn't changed later
        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }
  jQuery.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function data(key, value) {
      var i,
        name,
        data,
        elem = this[0],
        attrs = elem && elem.attributes;

      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);
          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;
            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (trac-14894)
              if (attrs[i]) {
                name = attrs[i].name;
                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }
            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }
        return data;
      }

      // Sets multiple values
      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }
      return access(this, function (value) {
        var data;

        // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.
        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);
          if (data !== undefined) {
            return data;
          }

          // Attempt to "discover" the data in
          // HTML5 custom data-* attrs
          data = dataAttr(elem, key);
          if (data !== undefined) {
            return data;
          }

          // We tried really hard, but the data doesn't exist.
          return;
        }

        // Set the data...
        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function queue(elem, type, data) {
      var queue;
      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type);

        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";
      var queue = jQuery.queue(elem, type),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = jQuery._queueHooks(elem, type),
        next = function next() {
          jQuery.dequeue(elem, type);
        };

      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }
      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        }

        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }
      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;
      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }
      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }
      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data);

        // Ensure a hooks for this queue
        jQuery._queueHooks(this, type);
        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
        count = 1,
        defer = jQuery.Deferred(),
        elements = this,
        i = this.length,
        resolve = function resolve() {
          if (! --count) {
            defer.resolveWith(elements, [elements]);
          }
        };
      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }
      type = type || "fx";
      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  var documentElement = document.documentElement;
  var isAttached = function isAttached(elem) {
      return jQuery.contains(elem.ownerDocument, elem);
    },
    composed = {
      composed: true
    };

  // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.
  if (documentElement.getRootNode) {
    isAttached = function isAttached(elem) {
      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
  }
  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;

    // Inline style trumps all
    return elem.style.display === "none" || elem.style.display === "" &&
    // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    isAttached(elem) && jQuery.css(elem, "display") === "none";
  };
  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
      scale,
      maxIterations = 20,
      currentValue = tween ? function () {
        return tween.cur();
      } : function () {
        return jQuery.css(elem, prop, "");
      },
      initial = currentValue(),
      unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
      // Starting value computation is required for potential unit mismatches
      initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2;

      // Trust units reported by jQuery.css
      unit = unit || initialInUnit[3];

      // Iteratively approximate from a nonzero starting point
      initialInUnit = +initial || 1;
      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);
        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }
        initialInUnit = initialInUnit / scale;
      }
      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit);

      // Make sure we update the tween properties later on
      valueParts = valueParts || [];
    }
    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0;

      // Apply relative offset (+=/-=) if specified
      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }
    return adjusted;
  }
  var defaultDisplayMap = {};
  function getDefaultDisplay(elem) {
    var temp,
      doc = elem.ownerDocument,
      nodeName = elem.nodeName,
      display = defaultDisplayMap[nodeName];
    if (display) {
      return display;
    }
    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");
    temp.parentNode.removeChild(temp);
    if (display === "none") {
      display = "block";
    }
    defaultDisplayMap[nodeName] = display;
    return display;
  }
  function showHide(elements, show) {
    var display,
      elem,
      values = [],
      index = 0,
      length = elements.length;

    // Determine new display value for elements that need to change
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      display = elem.style.display;
      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;
          if (!values[index]) {
            elem.style.display = "";
          }
        }
        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none";

          // Remember what we're overwriting
          dataPriv.set(elem, "display", display);
        }
      }
    }

    // Set the display of the elements in a second loop to avoid constant reflow
    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }
    return elements;
  }
  jQuery.fn.extend({
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }
      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
  (function () {
    var fragment = document.createDocumentFragment(),
      div = fragment.appendChild(document.createElement("div")),
      input = document.createElement("input");

    // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (trac-11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (trac-14901)
    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input);

    // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

    // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

    // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.
    div.innerHTML = "<option></option>";
    support.option = !!div.lastChild;
  })();

  // We have to close these tags to support XHTML (trac-13200)
  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  // Support: IE <=9 only
  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
  }
  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
    var ret;
    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }
    if (tag === undefined || tag && nodeName(context, tag)) {
      return jQuery.merge([context], ret);
    }
    return ret;
  }

  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0,
      l = elems.length;
    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }
  var rhtml = /<|&#?\w+;/;
  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
      tmp,
      tag,
      wrap,
      attached,
      j,
      fragment = context.createDocumentFragment(),
      nodes = [],
      i = 0,
      l = elems.length;
    for (; i < l; i++) {
      elem = elems[i];
      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

          // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem));

          // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div"));

          // Deserialize a standard representation
          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

          // Descend through wrappers to the right content
          j = wrap[0];
          while (j--) {
            tmp = tmp.lastChild;
          }

          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, tmp.childNodes);

          // Remember the top-level container
          tmp = fragment.firstChild;

          // Ensure the created nodes are orphaned (trac-12392)
          tmp.textContent = "";
        }
      }
    }

    // Remove wrapper from fragment
    fragment.textContent = "";
    i = 0;
    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }
        continue;
      }
      attached = isAttached(elem);

      // Append to fragment
      tmp = getAll(fragment.appendChild(elem), "script");

      // Preserve script evaluation history
      if (attached) {
        setGlobalEval(tmp);
      }

      // Capture executables
      if (scripts) {
        j = 0;
        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }
    return fragment;
  }
  var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
  function returnTrue() {
    return true;
  }
  function returnFalse() {
    return false;
  }
  function _on(elem, types, selector, data, fn, one) {
    var origFn, type;

    // Types can be a map of types/handlers
    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }
      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }
      return elem;
    }
    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }
    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }
    if (one === 1) {
      origFn = fn;
      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      };

      // Use same guid so caller can remove using origFn
      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }
    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }

  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  jQuery.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
        eventHandle,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.get(elem);

      // Only attach events to objects that accept data
      if (!acceptData(elem)) {
        return;
      }

      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)
      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      }

      // Handle multiple events separated by a space
      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }

        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[type] || {};

        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;

        // Update special based on newly reset type
        special = jQuery.event.special[type] || {};

        // handleObj is passed to all event handlers
        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn);

        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener if the special events handler returns false
          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }
        if (special.add) {
          special.add.call(elem, handleObj);
          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }

        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
        origCount,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
      if (!elemData || !(events = elemData.events)) {
        return;
      }

      // Once for each type.namespace in types; type may be omitted
      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }
        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];
          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);
            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }
          delete events[type];
        }
      }

      // Remove data and the expando if it's no longer used
      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(nativeEvent) {
      var i,
        j,
        ret,
        matched,
        handleObj,
        handlerQueue,
        args = new Array(arguments.length),
        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix(nativeEvent),
        handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],
        special = jQuery.event.special[event.type] || {};

      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;
      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
      event.delegateTarget = this;

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      }

      // Determine handlers
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);

      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }
      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
        handleObj,
        sel,
        matchedHandlers,
        matchedSelectors,
        handlerQueue = [],
        delegateCount = _handlers.delegateCount,
        cur = event.target;

      // Find delegate handlers
      if (delegateCount &&
      // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType &&
      // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (trac-13208)
          // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};
            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i];

              // Don't conflict with Object.prototype properties (trac-13203)
              sel = handleObj.selector + " ";
              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }
            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      cur = this;
      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: _handlers.slice(delegateCount)
        });
      }
      return handlerQueue;
    },
    addProp: function addProp(name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function set(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function fix(originalEvent) {
      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function setup(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Claim the first handler
          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", true);
          }

          // Return false to allow normal processing in the caller
          return false;
        },
        trigger: function trigger(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Force setup before triggering a click
          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            leverageNative(el, "click");
          }

          // Return non-false to allow normal event-path propagation
          return true;
        },
        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function _default(event) {
          var target = event.target;
          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  };

  // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.
  function leverageNative(el, type, isSetup) {
    // Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
    if (!isSetup) {
      if (dataPriv.get(el, type) === undefined) {
        jQuery.event.add(el, type, returnTrue);
      }
      return;
    }

    // Register the controller as a special universal handler for all event namespaces
    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function handler(event) {
        var result,
          saved = dataPriv.get(this, type);
        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          if (!saved) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = _slice.call(arguments);
            dataPriv.set(this, type, saved);

            // Trigger the native event and capture its result
            this[type]();
            result = dataPriv.get(this, type);
            dataPriv.set(this, type, false);
            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();
              return result;
            }

            // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering
            // the native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.
          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          }

          // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments
        } else if (saved) {
          // ...and capture the result
          dataPriv.set(this, type, jQuery.event.trigger(saved[0], saved.slice(1), this));

          // Abort handling of the native event by all jQuery handlers while allowing
          // native handlers on the same element to run. On target, this is achieved
          // by stopping immediate propagation just on the jQuery event. However,
          // the native event is re-wrapped by a jQuery one on each level of the
          // propagation so the only way to stop it for jQuery is to stop it for
          // everyone via native `stopPropagation()`. This is not a problem for
          // focus/blur which don't bubble, but it does also stop click on checkboxes
          // and radios. We accept this limitation.
          event.stopPropagation();
          event.isImmediatePropagationStopped = returnTrue;
        }
      }
    });
  }
  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };
  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }

    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;

      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&
      // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse;

      // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (trac-504, trac-13143)
      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget;

      // Event type
    } else {
      this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if (props) {
      jQuery.extend(this, props);
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || Date.now();

    // Mark it as fixed
    this[jQuery.expando] = true;
  };

  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;
      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;
      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;
      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }
      this.stopPropagation();
    }
  };

  // Includes all common event props including KeyEvent and MouseEvent specific props
  jQuery.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    code: true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: true
  }, jQuery.event.addProp);
  jQuery.each({
    focus: "focusin",
    blur: "focusout"
  }, function (type, delegateType) {
    function focusMappedHandler(nativeEvent) {
      if (document.documentMode) {
        // Support: IE 11+
        // Attach a single focusin/focusout handler on the document while someone wants
        // focus/blur. This is because the former are synchronous in IE while the latter
        // are async. In other browsers, all those handlers are invoked synchronously.

        // `handle` from private data would already wrap the event, but we need
        // to change the `type` here.
        var handle = dataPriv.get(this, "handle"),
          event = jQuery.event.fix(nativeEvent);
        event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
        event.isSimulated = true;

        // First, handle focusin/focusout
        handle(nativeEvent);

        // ...then, handle focus/blur
        //
        // focus/blur don't bubble while focusin/focusout do; simulate the former by only
        // invoking the handler at the lower level.
        if (event.target === event.currentTarget) {
          // The setup part calls `leverageNative`, which, in turn, calls
          // `jQuery.event.add`, so event handle will already have been set
          // by this point.
          handle(event);
        }
      } else {
        // For non-IE browsers, attach a single capturing handler on the document
        // while someone wants focusin/focusout.
        jQuery.event.simulate(delegateType, nativeEvent.target, jQuery.event.fix(nativeEvent));
      }
    }
    jQuery.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function setup() {
        var attaches;

        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, true);
        if (document.documentMode) {
          // Support: IE 9 - 11+
          // We use the same native handler for focusin & focus (and focusout & blur)
          // so we need to coordinate setup & teardown parts between those events.
          // Use `delegateType` as the key as `type` is already used by `leverageNative`.
          attaches = dataPriv.get(this, delegateType);
          if (!attaches) {
            this.addEventListener(delegateType, focusMappedHandler);
          }
          dataPriv.set(this, delegateType, (attaches || 0) + 1);
        } else {
          // Return false to allow normal processing in the caller
          return false;
        }
      },
      trigger: function trigger() {
        // Force setup before trigger
        leverageNative(this, type);

        // Return non-false to allow normal event-path propagation
        return true;
      },
      teardown: function teardown() {
        var attaches;
        if (document.documentMode) {
          attaches = dataPriv.get(this, delegateType) - 1;
          if (!attaches) {
            this.removeEventListener(delegateType, focusMappedHandler);
            dataPriv.remove(this, delegateType);
          } else {
            dataPriv.set(this, delegateType, attaches);
          }
        } else {
          // Return false to indicate standard teardown should be applied
          return false;
        }
      },
      // Suppress native focus or blur if we're currently inside
      // a leveraged native-event stack
      _default: function _default(event) {
        return dataPriv.get(event.target, type);
      },
      delegateType: delegateType
    };

    // Support: Firefox <=44
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
    //
    // Support: IE 9 - 11+
    // To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
    // attach a single handler for both events in IE.
    jQuery.event.special[delegateType] = {
      setup: function setup() {
        // Handle: regular nodes (via `this.ownerDocument`), window
        // (via `this.document`) & document (via `this`).
        var doc = this.ownerDocument || this.document || this,
          dataHolder = document.documentMode ? this : doc,
          attaches = dataPriv.get(dataHolder, delegateType);

        // Support: IE 9 - 11+
        // We use the same native handler for focusin & focus (and focusout & blur)
        // so we need to coordinate setup & teardown parts between those events.
        // Use `delegateType` as the key as `type` is already used by `leverageNative`.
        if (!attaches) {
          if (document.documentMode) {
            this.addEventListener(delegateType, focusMappedHandler);
          } else {
            doc.addEventListener(type, focusMappedHandler, true);
          }
        }
        dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
      },
      teardown: function teardown() {
        var doc = this.ownerDocument || this.document || this,
          dataHolder = document.documentMode ? this : doc,
          attaches = dataPriv.get(dataHolder, delegateType) - 1;
        if (!attaches) {
          if (document.documentMode) {
            this.removeEventListener(delegateType, focusMappedHandler);
          } else {
            doc.removeEventListener(type, focusMappedHandler, true);
          }
          dataPriv.remove(dataHolder, delegateType);
        } else {
          dataPriv.set(dataHolder, delegateType, attaches);
        }
      }
    };
  });

  // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).
  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
          target = this,
          related = event.relatedTarget,
          handleObj = event.handleObj;

        // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }
        return ret;
      }
    };
  });
  jQuery.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });
  var
    // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

  // Prefer a tbody over its parent table for containing new rows
  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return jQuery(elem).children("tbody")[0] || elem;
    }
    return elem;
  }

  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }
    return elem;
  }
  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;
    if (dest.nodeType !== 1) {
      return;
    }

    // 1. Copy private data: events, handlers, etc.
    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;
      if (events) {
        dataPriv.remove(dest, "handle events");
        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }

    // 2. Copy user data
    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  }

  // Fix IE bugs, see support tests
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();

    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked;

      // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }
  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);
    var fragment,
      first,
      scripts,
      hasScripts,
      node,
      doc,
      i = 0,
      l = collection.length,
      iNoClone = l - 1,
      value = args[0],
      valueIsFunction = isFunction(value);

    // We can't cloneNode fragments that contain checked, in WebKit
    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);
        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }
        domManip(self, args, callback, ignored);
      });
    }
    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;
      if (fragment.childNodes.length === 1) {
        fragment = first;
      }

      // Require either new content or an interest in ignored elements to invoke the callback
      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length;

        // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (trac-8070).
        for (; i < l; i++) {
          node = fragment;
          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true);

            // Keep references to cloned scripts for later restoration
            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }
          callback.call(collection[i], node, i);
        }
        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument;

          // Re-enable scripts
          jQuery.map(scripts, restoreScript);

          // Evaluate executable scripts on first document insertion
          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];
            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(node.src, {
                    nonce: node.nonce || node.getAttribute("nonce")
                  }, doc);
                }
              } else {
                // Unwrap a CDATA section containing script contents. This shouldn't be
                // needed as in XML documents they're already not visible when
                // inspecting element contents and in HTML documents they have no
                // meaning but we're preserving that logic for backwards compatibility.
                // This will be removed completely in 4.0. See gh-4904.
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }
    return collection;
  }
  function _remove(elem, selector, keepData) {
    var node,
      nodes = selector ? jQuery.filter(selector, elem) : elem,
      i = 0;
    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }
      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }
        node.parentNode.removeChild(node);
      }
    }
    return elem;
  }
  jQuery.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html;
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
        l,
        srcElements,
        destElements,
        clone = elem.cloneNode(true),
        inPage = isAttached(elem);

      // Fix IE cloning issues
      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew jQuery#find here for performance reasons:
        // https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);
        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }

      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);
          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }

      // Preserve script evaluation history
      destElements = getAll(clone, "script");
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      }

      // Return the cloned set
      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
        elem,
        type,
        special = jQuery.event.special,
        i = 0;
      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);

                  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }

            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataPriv.expando] = undefined;
          }
          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
        i = 0;
      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false));

          // Remove any remaining nodes
          elem.textContent = "";
        }
      }
      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return access(this, function (value) {
        var elem = this[0] || {},
          i = 0,
          l = this.length;
        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        }

        // See if we can take a shortcut and just use innerHTML
        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);
          try {
            for (; i < l; i++) {
              elem = this[i] || {};

              // Remove element nodes and prevent memory leaks
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }
            elem = 0;

            // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }
        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = [];

      // Make the changes, replacing each non-ignored context element with the new content
      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;
        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));
          if (parent) {
            parent.replaceChild(elem, this);
          }
        }

        // Force callback invocation
      }, ignored);
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
        ret = [],
        insert = jQuery(selector),
        last = insert.length - 1,
        i = 0;
      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems);

        // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit
        push.apply(ret, elems.get());
      }
      return this.pushStack(ret);
    };
  });
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
  var rcustomProp = /^--/;
  var getStyles = function getStyles(elem) {
    // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;
    if (!view || !view.opener) {
      view = window;
    }
    return view.getComputedStyle(elem);
  };
  var swap = function swap(elem, options, callback) {
    var ret,
      name,
      old = {};

    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }
    ret = callback.call(elem);

    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }
    return ret;
  };
  var rboxStyle = new RegExp(cssExpand.join("|"), "i");
  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }
      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%";

      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't
      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

      // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements
      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

      // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)
      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
      documentElement.removeChild(container);

      // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed
      div = null;
    }
    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }
    var pixelPositionVal,
      boxSizingReliableVal,
      scrollboxSizeVal,
      pixelBoxStylesVal,
      reliableTrDimensionsVal,
      reliableMarginLeftVal,
      container = document.createElement("div"),
      div = document.createElement("div");

    // Finish early in limited (non-browser) environments
    if (!div.style) {
      return;
    }

    // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (trac-8908)
    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    jQuery.extend(support, {
      boxSizingReliable: function boxSizingReliable() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function pixelBoxStyles() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function pixelPosition() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function scrollboxSize() {
        computeStyleTests();
        return scrollboxSizeVal;
      },
      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      //
      // Support: Firefox 70+
      // Only Firefox includes border widths
      // in computed dimensions. (gh-4529)
      reliableTrDimensions: function reliableTrDimensions() {
        var table, tr, trChild, trStyle;
        if (reliableTrDimensionsVal == null) {
          table = document.createElement("table");
          tr = document.createElement("tr");
          trChild = document.createElement("div");
          table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
          tr.style.cssText = "box-sizing:content-box;border:1px solid";

          // Support: Chrome 86+
          // Height set through cssText does not get applied.
          // Computed height then comes back as 0.
          tr.style.height = "1px";
          trChild.style.height = "9px";

          // Support: Android 8 Chrome 86+
          // In our bodyBackground.html iframe,
          // display for all div elements is set to "inline",
          // which causes a problem only in Android 8 Chrome 86.
          // Ensuring the div is `display: block`
          // gets around this issue.
          trChild.style.display = "block";
          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
          documentElement.removeChild(table);
        }
        return reliableTrDimensionsVal;
      }
    });
  })();
  function curCSS(elem, name, computed) {
    var width,
      minWidth,
      maxWidth,
      ret,
      isCustomProp = rcustomProp.test(name),
      // Support: Firefox 51+
      // Retrieving style before computed somehow
      // fixes an issue with getting wrong values
      // on detached elements
      style = elem.style;
    computed = computed || getStyles(elem);

    // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, trac-12537)
    //   .css('--customProperty) (gh-3144)
    if (computed) {
      // Support: IE <=9 - 11+
      // IE only supports `"float"` in `getPropertyValue`; in computed styles
      // it's only available as `"cssFloat"`. We no longer modify properties
      // sent to `.css()` apart from camelCasing, so we need to check both.
      // Normally, this would create difference in behavior: if
      // `getPropertyValue` returns an empty string, the value returned
      // by `.css()` would be `undefined`. This is usually the case for
      // disconnected elements. However, in IE even disconnected elements
      // with no styles return `"none"` for `getPropertyValue( "float" )`
      ret = computed.getPropertyValue(name) || computed[name];
      if (isCustomProp && ret) {
        // Support: Firefox 105+, Chrome <=105+
        // Spec requires trimming whitespace for custom properties (gh-4926).
        // Firefox only trims leading whitespace. Chrome just collapses
        // both leading & trailing whitespace to a single space.
        //
        // Fall back to `undefined` if empty string returned.
        // This collapses a missing definition with property defined
        // and set to an empty string but there's no standard API
        // allowing us to differentiate them without a performance penalty
        // and returning `undefined` aligns with older jQuery.
        //
        // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
        // as whitespace while CSS does not, but this is not a problem
        // because CSS preprocessing replaces them with U+000A LINE FEED
        // (which *is* CSS whitespace)
        // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
        ret = ret.replace(rtrimCSS, "$1") || undefined;
      }
      if (ret === "" && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      }

      // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values
      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;

        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;

        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }
    return ret !== undefined ?
    // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }
  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }

        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }
  var cssPrefixes = ["Webkit", "Moz", "ms"],
    emptyStyle = document.createElement("div").style,
    vendorProps = {};

  // Return a vendor-prefixed property or undefined
  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
      i = cssPrefixes.length;
    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in emptyStyle) {
        return name;
      }
    }
  }

  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
  function finalPropName(name) {
    var _final = jQuery.cssProps[name] || vendorProps[name];
    if (_final) {
      return _final;
    }
    if (name in emptyStyle) {
      return name;
    }
    return vendorProps[name] = vendorPropName(name) || name;
  }
  var
    // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    cssShow = {
      position: "absolute",
      visibility: "hidden",
      display: "block"
    },
    cssNormalTransform = {
      letterSpacing: "0",
      fontWeight: "400"
    };
  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ?
    // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }
  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
      extra = 0,
      delta = 0,
      marginDelta = 0;

    // Adjustment may not be necessary
    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }
    for (; i < 4; i += 2) {
      // Both box models exclude margin
      // Count margin delta separately to only add it after scroll gutter adjustment.
      // This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
      if (box === "margin") {
        marginDelta += jQuery.css(elem, box + cssExpand[i], true, styles);
      }

      // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

        // For "border" or "margin", add border
        if (box !== "padding") {
          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);

          // But still keep track of it otherwise
        } else {
          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }

        // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"
      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        }

        // For "content" or "padding", subtract border
        if (box !== "margin") {
          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    }

    // Account for positive content-box scroll gutter when requested by providing computedVal
    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5

      // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
      // Use an explicit zero to avoid NaN (gh-3964)
      )) || 0;
    }
    return delta + marginDelta;
  }
  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
      // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
      // Fake content-box until we know it's needed to know the true value.
      boxSizingNeeded = !support.boxSizingReliable() || extra,
      isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
      valueIsBorderBox = isBorderBox,
      val = curCSS(elem, dimension, styles),
      offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);

    // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.
    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }
      val = "auto";
    }

    // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.
    if ((!support.boxSizingReliable() && isBorderBox ||
    // Support: IE 10 - 11+, Edge 15 - 18+
    // IE/Edge misreport `getComputedStyle` of table rows with width/height
    // set in CSS while `offset*` properties report correct values.
    // Interestingly, in some cases IE 9 doesn't suffer from this issue.
    !support.reliableTrDimensions() && nodeName(elem, "tr") ||
    // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    val === "auto" ||
    // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
    !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") &&
    // Make sure the element is visible & connected
    elem.getClientRects().length) {
      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

      // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.
      valueIsBorderBox = offsetProp in elem;
      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    }

    // Normalize "" and auto
    val = parseFloat(val) || 0;

    // Adjust for the element's box model
    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles,
    // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }
  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageSlice: true,
      columnCount: true,
      flexGrow: true,
      flexShrink: true,
      fontWeight: true,
      gridArea: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnStart: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowStart: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      scale: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeMiterlimit: true,
      strokeOpacity: true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }

      // Make sure that we're working with the right name
      var ret,
        type,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name),
        style = elem.style;

      // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Gets hook for the prefixed version, then unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // Check if we're setting a value
      if (value !== undefined) {
        type = _typeof(value);

        // Convert "+=" or "-=" to relative numbers (trac-7345)
        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret);

          // Fixes bug trac-9237
          type = "number";
        }

        // Make sure that null and NaN values aren't set (trac-7116)
        if (value == null || value !== value) {
          return;
        }

        // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.
        if (type === "number" && !isCustomProp) {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        }

        // background-* props affect original clone's values
        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        }

        // If a hook was provided, use that value, otherwise just set the specified value
        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        }

        // Otherwise just get the value from the style object
        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
        num,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name);

      // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Try prefixed name followed by the unprefixed name
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // If a hook was provided get the computed value from there
      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      }

      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }

      // Convert "normal" to computed value
      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }

      // Make numeric if forced or a qualifier was provided and val looks numeric
      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }
      return val;
    }
  });
  jQuery.each(["height", "width"], function (_i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && (
          // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
          styles = getStyles(elem),
          // Only read styles.position if the test has a chance to fail
          // to avoid forcing a reflow.
          scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
          // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
          boxSizingNeeded = scrollboxSizeBuggy || extra,
          isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
          subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;

        // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)
        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        }

        // Convert to pixels if value adjustment is needed
        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }
        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  });

  // These hooks are used by animate to expand properties
  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
          expanded = {},
          // Assumes a single number if not a string
          parts = typeof value === "string" ? value.split(" ") : [value];
        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }
        return expanded;
      }
    };
    if (prefix !== "margin") {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function css(name, value) {
      return access(this, function (elem, name, value) {
        var styles,
          len,
          map = {},
          i = 0;
        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;
          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }
          return map;
        }
        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  });
  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function init(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function cur() {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function run(percent) {
      var eased,
        hooks = Tween.propHooks[this.prop];
      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;
      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }
      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function get(tween) {
        var result;

        // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.
        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        }

        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = jQuery.css(tween.elem, tween.prop, "");

        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === "auto" ? 0 : result;
      },
      set: function set(tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  };

  // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function set(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function linear(p) {
      return p;
    },
    swing: function swing(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };
  jQuery.fx = Tween.prototype.init;

  // Back compat <1.8 extension point
  jQuery.fx.step = {};
  var fxNow,
    inProgress,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rrun = /queueHooks$/;
  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }
      jQuery.fx.tick();
    }
  }

  // Animations created synchronously will run synchronously
  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = Date.now();
  }

  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which,
      i = 0,
      attrs = {
        height: type
      };

    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }
    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }
    return attrs;
  }
  function createTween(value, prop, animation) {
    var tween,
      collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
      index = 0,
      length = collection.length;
    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }
  function defaultPrefilter(elem, props, opts) {
    var prop,
      value,
      toggle,
      hooks,
      oldfire,
      propTween,
      restoreDisplay,
      display,
      isBox = "width" in props || "height" in props,
      anim = this,
      orig = {},
      style = elem.style,
      hidden = elem.nodeType && isHiddenWithinTree(elem),
      dataShow = dataPriv.get(elem, "fxshow");

    // Queue-skipping animations hijack the fx hooks
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    }

    // Detect show/hide animations
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";
        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true;

            // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }
        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
      }
    }

    // Bail out if this is a no-op like .hide().hide()
    propTween = !jQuery.isEmptyObject(props);
    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    }

    // Restrict "overflow" and "display" styles during box animations
    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY];

      // Identify a display type, preferring old show/hide data over the CSS cascade
      restoreDisplay = dataShow && dataShow.display;
      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }
      display = jQuery.css(elem, "display");
      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, "display");
          showHide([elem]);
        }
      }

      // Animate inline elements as inline-block
      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
        if (jQuery.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });
            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }
          style.display = "inline-block";
        }
      }
    }
    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }

    // Implement show/hide animations
    propTween = false;
    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay
          });
        }

        // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
        if (toggle) {
          dataShow.hidden = !hidden;
        }

        // Show elements before animating them
        if (hidden) {
          showHide([elem], true);
        }

        /* eslint-disable no-loop-func */

        anim.done(function () {
          /* eslint-enable no-loop-func */

          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }
          dataPriv.remove(elem, "fxshow");
          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      }

      // Per-property setup
      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;
        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }
  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }
      if (index !== name) {
        props[name] = value;
        delete props[index];
      }
      hooks = jQuery.cssHooks[name];
      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name];

        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }
  function Animation(elem, properties, options) {
    var result,
      stopped,
      index = 0,
      length = Animation.prefilters.length,
      deferred = jQuery.Deferred().always(function () {
        // Don't match elem in the :animated selector
        delete tick.elem;
      }),
      tick = function tick() {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3 only
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
          temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;
        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }
        deferred.notifyWith(elem, [animation, percent, remaining]);

        // If there's more to do, yield
        if (percent < 1 && length) {
          return remaining;
        }

        // If this was an empty animation, synthesize a final progress notification
        if (!length) {
          deferred.notifyWith(elem, [animation, 1, 0]);
        }

        // Resolve the animation and report its conclusion
        deferred.resolveWith(elem, [animation]);
        return false;
      },
      animation = deferred.promise({
        elem: elem,
        props: jQuery.extend({}, properties),
        opts: jQuery.extend(true, {
          specialEasing: {},
          easing: jQuery.easing._default
        }, options),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function createTween(prop, end) {
          var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
          animation.tweens.push(tween);
          return tween;
        },
        stop: function stop(gotoEnd) {
          var index = 0,
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }

          // Resolve when we played the last frame; otherwise, reject
          if (gotoEnd) {
            deferred.notifyWith(elem, [animation, 1, 0]);
            deferred.resolveWith(elem, [animation, gotoEnd]);
          } else {
            deferred.rejectWith(elem, [animation, gotoEnd]);
          }
          return this;
        }
      }),
      props = animation.props;
    propFilter(props, animation.opts.specialEasing);
    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
        }
        return result;
      }
    }
    jQuery.map(props, createTween, animation);
    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }

    // Attach callbacks from options
    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    return animation;
  }
  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },
    tweener: function tweener(props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }
      var prop,
        index = 0,
        length = props.length;
      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters: [defaultPrefilter],
    prefilter: function prefilter(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });
  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {
      complete: fn || !fn && easing || isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !isFunction(easing) && easing
    };

    // Go to the end state if fx are off
    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    }

    // Normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;
    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }
      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };
    return opt;
  };
  jQuery.fn.extend({
    fadeTo: function fadeTo(speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHiddenWithinTree).css("opacity", 0).show()

      // Animate to the value specified
      .end().animate({
        opacity: to
      }, speed, easing, callback);
    },
    animate: function animate(prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
        optall = jQuery.speed(speed, easing, callback),
        doAnimation = function doAnimation() {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, jQuery.extend({}, prop), optall);

          // Empty animations, or finishing resolves immediately
          if (empty || dataPriv.get(this, "finish")) {
            anim.stop(true);
          }
        };
      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function stop(type, clearQueue, gotoEnd) {
      var stopQueue = function stopQueue(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };
      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue) {
        this.queue(type || "fx", []);
      }
      return this.each(function () {
        var dequeue = true,
          index = type != null && type + "queueHooks",
          timers = jQuery.timers,
          data = dataPriv.get(this);
        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }

        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function finish(type) {
      if (type !== false) {
        type = type || "fx";
      }
      return this.each(function () {
        var index,
          data = dataPriv.get(this),
          queue = data[type + "queue"],
          hooks = data[type + "queueHooks"],
          timers = jQuery.timers,
          length = queue ? queue.length : 0;

        // Enable finishing flag on private data
        data.finish = true;

        // Empty the queue first
        jQuery.queue(this, type, []);
        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }

        // Look for any active animations, and finish them
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }

        // Look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }

        // Turn off finishing flag
        delete data.finish;
      });
    }
  });
  jQuery.each(["toggle", "show", "hide"], function (_i, name) {
    var cssFn = jQuery.fn[name];
    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  });

  // Generate shortcuts for custom animations
  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];
  jQuery.fx.tick = function () {
    var timer,
      i = 0,
      timers = jQuery.timers;
    fxNow = Date.now();
    for (; i < timers.length; i++) {
      timer = timers[i];

      // Run the timer and safely remove it when done (allowing for external removal)
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }
    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };
  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };
  jQuery.fx.interval = 13;
  jQuery.fx.start = function () {
    if (inProgress) {
      return;
    }
    inProgress = true;
    schedule();
  };
  jQuery.fx.stop = function () {
    inProgress = null;
  };
  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  };

  // Based off of the plugin by Clint Helfers, with permission.
  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);
      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };
  (function () {
    var input = document.createElement("input"),
      select = document.createElement("select"),
      opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox";

    // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== "";

    // Support: IE <=11 only
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;

    // Support: IE <=11 only
    // An input loses its value after becoming a radio
    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();
  var boolHook,
    attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function attr(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function attr(elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set attributes on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      }

      // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }
      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }
        elem.setAttribute(name, value + "");
        return value;
      }
      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }
      ret = jQuery.find.attr(elem, name);

      // Non-existent attributes return null, we normalize to undefined
      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
        i = 0,
        // Attribute names can contain non-HTML whitespace characters
        // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
        attrNames = value && value.match(rnothtmlwhite);
      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  });

  // Hooks for boolean attributes
  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;
    attrHandle[name] = function (elem, name, isXML) {
      var ret,
        handle,
        lowercaseName = name.toLowerCase();
      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }
      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
    rclickable = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop: function prop(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    prop: function prop(elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set properties on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }
      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }
        return elem[name] = value;
      }
      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }
      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // Use proper attribute retrieval (trac-12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");
          if (tabindex) {
            return parseInt(tabindex, 10);
          }
          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }
          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  });

  // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function get(elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      },
      set: function set(elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent) {
          parent.selectedIndex;
          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }
  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  });

  // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }
  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }
  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }
    return [];
  }
  jQuery.fn.extend({
    addClass: function addClass(value) {
      var classNames, cur, curValue, className, i, finalValue;
      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }
      classNames = classesToArray(value);
      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);
          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];
              if (cur.indexOf(" " + className + " ") < 0) {
                cur += className + " ";
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              this.setAttribute("class", finalValue);
            }
          }
        });
      }
      return this;
    },
    removeClass: function removeClass(value) {
      var classNames, cur, curValue, className, i, finalValue;
      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }
      if (!arguments.length) {
        return this.attr("class", "");
      }
      classNames = classesToArray(value);
      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);

          // This expression is here for better compressibility (see addClass)
          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];

              // Remove *all* instances
              while (cur.indexOf(" " + className + " ") > -1) {
                cur = cur.replace(" " + className + " ", " ");
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              this.setAttribute("class", finalValue);
            }
          }
        });
      }
      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var classNames,
        className,
        i,
        self,
        type = _typeof(value),
        isValidValue = type === "string" || Array.isArray(value);
      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }
      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }
      classNames = classesToArray(value);
      return this.each(function () {
        if (isValidValue) {
          // Toggle individual class names
          self = jQuery(this);
          for (i = 0; i < classNames.length; i++) {
            className = classNames[i];

            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }

          // Toggle whole class name
        } else if (value === undefined || type === "boolean") {
          className = getClass(this);
          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          }

          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
        elem,
        i = 0;
      className = " " + selector + " ";
      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }
      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function val(value) {
      var hooks,
        ret,
        valueIsFunction,
        elem = this[0];
      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }
          ret = elem.value;

          // Handle most common string cases
          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          }

          // Handle cases where value is null/undef or number
          return ret == null ? "" : ret;
        }
        return;
      }
      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;
        if (this.nodeType !== 1) {
          return;
        }
        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }

        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }
        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

        // If set returns undefined, fall back to normal setting
        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val :
          // Support: IE <=10 - 11 only
          // option.text throws exceptions (trac-14686, trac-14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(jQuery.text(elem));
        }
      },
      select: {
        get: function get(elem) {
          var value,
            option,
            i,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === "select-one",
            values = one ? null : [],
            max = one ? index + 1 : options.length;
          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          }

          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];

            // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (trac-2551)
            if ((option.selected || i === index) &&
            // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = jQuery(option).val();

              // We don't need an array for one selects
              if (one) {
                return value;
              }

              // Multi-Selects return an array
              values.push(value);
            }
          }
          return values;
        },
        set: function set(elem, value) {
          var optionSet,
            option,
            options = elem.options,
            values = jQuery.makeArray(value),
            i = options.length;
          while (i--) {
            option = options[i];

            /* eslint-disable no-cond-assign */

            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }

            /* eslint-enable no-cond-assign */
          }

          // Force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  });

  // Radios and checkboxes getter/setter
  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function set(elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };
    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  });

  // Return jQuery for attributes-only inclusion
  var location = window.location;
  var nonce = {
    guid: Date.now()
  };
  var rquery = /\?/;

  // Cross-browser xml parsing
  jQuery.parseXML = function (data) {
    var xml, parserErrorElem;
    if (!data || typeof data !== "string") {
      return null;
    }

    // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.
    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {}
    parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
    if (!xml || parserErrorElem) {
      jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {
        return el.textContent;
      }).join("\n") : data));
    }
    return xml;
  };
  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    stopPropagationCallback = function stopPropagationCallback(e) {
      e.stopPropagation();
    };
  jQuery.extend(jQuery.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
        cur,
        tmp,
        bubbleType,
        ontype,
        handle,
        special,
        lastElement,
        eventPath = [elem || document],
        type = hasOwn.call(event, "type") ? event.type : event,
        namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document;

      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }

      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }
      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(":") < 0 && "on" + type;

      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event);

      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }

      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : jQuery.makeArray(data, [event]);

      // Allow special events to draw outside the lines
      special = jQuery.event.special[type] || {};
      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      }

      // Determine event propagation path in advance, per W3C events spec (trac-9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }

        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }

      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type;

        // jQuery handler
        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");
        if (handle) {
          handle.apply(cur, data);
        }

        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;

      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (trac-6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];
            if (tmp) {
              elem[ontype] = null;
            }

            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;
            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }
            elem[type]();
            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }
            jQuery.event.triggered = undefined;
            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }
      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });
      jQuery.event.trigger(e, null, elem);
    }
  });
  jQuery.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  });
  var rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;
  function buildParams(prefix, obj, traditional, add) {
    var name;
    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }

  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function (a, traditional) {
    var prefix,
      s = [],
      add = function add(key, valueOrFunction) {
        // If value is a function, invoke it and use its return value
        var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
        s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
      };
    if (a == null) {
      return "";
    }

    // If an array was passed in, assume that it is an array of form elements.
    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }

    // Return the resulting serialization
    return s.join("&");
  };
  jQuery.fn.extend({
    serialize: function serialize() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type;

        // Use .is( ":disabled" ) so that fieldset[disabled] works
        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (_i, elem) {
        var val = jQuery(this).val();
        if (val == null) {
          return null;
        }
        if (Array.isArray(val)) {
          return jQuery.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }
        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  var r20 = /%20/g,
    rhash = /#.*$/,
    rantiCache = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
    // trac-7653, trac-8125, trac-8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},
    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},
    // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
    allTypes = "*/".concat("*"),
    // Anchor tag for parsing the document origin
    originAnchor = document.createElement("a");
  originAnchor.href = location.href;

  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }
      var dataType,
        i = 0,
        dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func);

            // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }

  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
      seekingTransport = structure === transports;
    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }
    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  }

  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes trac-9887
  function ajaxExtend(target, src) {
    var key,
      deep,
      flatOptions = jQuery.ajaxSettings.flatOptions || {};
    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }
    return target;
  }

  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
      type,
      finalDataType,
      firstDataType,
      contents = s.contents,
      dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === "*") {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    }

    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }

    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }

      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }

  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
      current,
      conv,
      tmp,
      prev,
      converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }
    current = dataTypes.shift();

    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }

      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }
      prev = current;
      current = dataTypes.shift();
      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev;

          // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current];

          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];

                    // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }

          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s["throws"]) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }
    return {
      state: "success",
      data: response
    };
  }
  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */

      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,
        // Text to html (true = no transformation)
        "text html": true,
        // Evaluate text as a json expression
        "text json": JSON.parse,
        // Parse text as xml
        "text xml": jQuery.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function ajaxSetup(target, settings) {
      return settings ?
      // Building a settings object
      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :
      // Extending ajaxSettings
      ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function ajax(url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (_typeof(url) === "object") {
        options = url;
        url = undefined;
      }

      // Force options to be an object
      options = options || {};
      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString,
        responseHeaders,
        // timeout handle
        timeoutTimer,
        // Url cleanup var
        urlAnchor,
        // Request state (becomes false upon send and true upon completion)
        completed,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // uncached part of the url
        uncached,
        // Create the final options object
        s = jQuery.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
        // Deferreds
        deferred = jQuery.Deferred(),
        completeDeferred = jQuery.Callbacks("once memory"),
        // Status-dependent callbacks
        _statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {},
        requestHeadersNames = {},
        // Default abort message
        strAbort = "canceled",
        // Fake xhr
        jqXHR = {
          readyState: 0,
          // Builds headers hashtable if needed
          getResponseHeader: function getResponseHeader(key) {
            var match;
            if (completed) {
              if (!responseHeaders) {
                responseHeaders = {};
                while (match = rheaders.exec(responseHeadersString)) {
                  responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                }
              }
              match = responseHeaders[key.toLowerCase() + " "];
            }
            return match == null ? null : match.join(", ");
          },
          // Raw string
          getAllResponseHeaders: function getAllResponseHeaders() {
            return completed ? responseHeadersString : null;
          },
          // Caches the header
          setRequestHeader: function setRequestHeader(name, value) {
            if (completed == null) {
              name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
              requestHeaders[name] = value;
            }
            return this;
          },
          // Overrides response content-type header
          overrideMimeType: function overrideMimeType(type) {
            if (completed == null) {
              s.mimeType = type;
            }
            return this;
          },
          // Status-dependent callbacks
          statusCode: function statusCode(map) {
            var code;
            if (map) {
              if (completed) {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              } else {
                // Lazy-add the new callbacks in a way that preserves old ones
                for (code in map) {
                  _statusCode[code] = [_statusCode[code], map[code]];
                }
              }
            }
            return this;
          },
          // Cancel the request
          abort: function abort(statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          }
        };

      // Attach deferreds
      deferred.promise(jqXHR);

      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (trac-10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

      // Alias method option to type as per ticket trac-12004
      s.type = options.method || options.type || s.method || s.type;

      // Extract dataTypes list
      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

      // A cross-domain request is in order when the origin doesn't match the current origin.
      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a");

        // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/
        try {
          urlAnchor.href = s.url;

          // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative
          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      }

      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      }

      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

      // If request was aborted inside a prefilter, stop there
      if (completed) {
        return jqXHR;
      }

      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
      fireGlobals = jQuery.event && s.global;

      // Watch for a new set of requests
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      }

      // Uppercase the type
      s.type = s.type.toUpperCase();

      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);

      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation
      cacheURL = s.url.replace(rhash, "");

      // More options handling for requests with no content
      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length);

        // If data is available and should be processed, append data to url
        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

          // trac-9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }

        // Add or update anti-cache param if needed
        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
        }

        // Put hash and anti-cache on the URL that will be requested (gh-1732)
        s.url = cacheURL + uncached;

        // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
        s.data = s.data.replace(r20, "+");
      }

      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      }

      // Set the correct header, if data is being sent
      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      }

      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }

      // Allow custom headers/mimetypes and early abort
      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        // Abort if not done already and return
        return jqXHR.abort();
      }

      // Aborting is no longer a cancellation
      strAbort = "abort";

      // Install callbacks on deferreds
      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error);

      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

      // If no transport, we auto-abort
      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1;

        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        }

        // If request was aborted inside ajaxSend, stop there
        if (completed) {
          return jqXHR;
        }

        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }
        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          }

          // Propagate others as results
          done(-1, e);
        }
      }

      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
          success,
          error,
          response,
          modified,
          statusText = nativeStatusText;

        // Ignore repeat invocations
        if (completed) {
          return;
        }
        completed = true;

        // Clear timeout if it exists
        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        }

        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;

        // Cache response headers
        responseHeadersString = headers || "";

        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;

        // Determine if successful
        isSuccess = status >= 200 && status < 300 || status === 304;

        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }

        // Use a noop converter for missing script but not if jsonp
        if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {
          s.converters["text script"] = function () {};
        }

        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);

        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader("etag");
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }

          // if no content
          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent";

            // if not modified
          } else if (status === 304) {
            statusText = "notmodified";

            // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = "error";
            if (status < 0) {
              status = 0;
            }
          }
        }

        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + "";

        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        }

        // Status-dependent callbacks
        jqXHR.statusCode(_statusCode);
        _statusCode = undefined;
        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        }

        // Complete
        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

          // Handle the global AJAX counter
          if (! --jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }
      return jqXHR;
    },
    getJSON: function getJSON(url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },
    getScript: function getScript(url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });
  jQuery.each(["get", "post"], function (_i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }

      // The url can be an options object (which then must have .url)
      return jQuery.ajax(jQuery.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, jQuery.isPlainObject(url) && url));
    };
  });
  jQuery.ajaxPrefilter(function (s) {
    var i;
    for (i in s.headers) {
      if (i.toLowerCase() === "content-type") {
        s.contentType = s.headers[i] || "";
      }
    }
  });
  jQuery._evalUrl = function (url, options, doc) {
    return jQuery.ajax({
      url: url,
      // Make this explicit, since user can override this through ajaxSetup (trac-11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,
      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function textScript() {}
      },
      dataFilter: function dataFilter(response) {
        jQuery.globalEval(response, options, doc);
      }
    });
  };
  jQuery.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;
      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        }

        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }
        wrap.map(function () {
          var elem = this;
          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }
          return elem;
        }).append(this);
      }
      return this;
    },
    wrapInner: function wrapInner(html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }
      return this.each(function () {
        var self = jQuery(this),
          contents = self.contents();
        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap(selector) {
      this.parent(selector).not("body").each(function () {
        jQuery(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });
  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };
  jQuery.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  };
  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };
  var xhrSuccessStatus = {
      // File protocol always yields status code 0, assume 200
      0: 200,
      // Support: IE <=9 only
      // trac-1450: sometimes IE returns 1223 when it should be 204
      1223: 204
    },
    xhrSupported = jQuery.ajaxSettings.xhr();
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var _callback, errorCallback;

    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function send(headers, complete) {
          var i,
            xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password);

          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }

          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }

          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          }

          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }

          // Callback
          _callback = function callback(type) {
            return function () {
              if (_callback) {
                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete(
                    // File: protocol always yields status 0; see trac-8605, trac-14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,
                  // Support: IE <=9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                    binary: xhr.response
                  } : {
                    text: xhr.responseText
                  }, xhr.getAllResponseHeaders());
                }
              }
            };
          };

          // Listen to events
          xhr.onload = _callback();
          errorCallback = xhr.onerror = xhr.ontimeout = _callback("error");

          // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts
          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (_callback) {
                    errorCallback();
                  }
                });
              }
            };
          }

          // Create the abort callback
          _callback = _callback("abort");
          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // trac-14683: Only rethrow if this hasn't been notified as an error yet
            if (_callback) {
              throw e;
            }
          }
        },
        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  });

  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
  jQuery.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  });

  // Install script dataType
  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function textScript(text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  });

  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = "GET";
    }
  });

  // Bind script tag hack transport
  jQuery.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, _callback2;
      return {
        send: function send(_, complete) {
          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", _callback2 = function callback(evt) {
            script.remove();
            _callback2 = null;
            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          });

          // Use native DOM manipulation to avoid our domManip AJAX trickery
          document.head.appendChild(script[0]);
        },
        abort: function abort() {
          if (_callback2) {
            _callback2();
          }
        }
      };
    }
  });
  var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
      this[callback] = true;
      return callback;
    }
  });

  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
      overwritten,
      responseContainer,
      jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      }

      // Use data converter to retrieve json after script execution
      s.converters["script json"] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }
        return responseContainer[0];
      };

      // Force json dataType
      s.dataTypes[0] = "json";

      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };

      // Clean-up function (fires after converters)
      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName);

          // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        }

        // Save back as free
        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;

          // Save the callback name for future use
          oldCallbacks.push(callbackName);
        }

        // Call if it was a function and we have a response
        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }
        responseContainer = overwritten = undefined;
      });

      // Delegate to script
      return "script";
    }
  });

  // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337
  support.createHTMLDocument = function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }();

  // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }
    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }
    var base, parsed, scripts;
    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument("");

        // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)
        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }
    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && [];

    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }
    parsed = buildFragment([data], context, scripts);
    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }
    return jQuery.merge([], parsed.childNodes);
  };

  /**
   * Load a url into a page
   */
  jQuery.fn.load = function (url, params, callback) {
    var selector,
      type,
      response,
      self = this,
      off = url.indexOf(" ");
    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    }

    // If it's a function
    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;

      // Otherwise, build a param string
    } else if (params && _typeof(params) === "object") {
      type = "POST";
    }

    // If we have elements to modify, make the request
    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ?
        // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :
        // Otherwise use the full result
        responseText);

        // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }
    return this;
  };
  jQuery.expr.pseudos.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };
  jQuery.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
        curLeft,
        curCSSTop,
        curTop,
        curOffset,
        curCSSLeft,
        calculatePosition,
        position = jQuery.css(elem, "position"),
        curElem = jQuery(elem),
        props = {};

      // Set position first, in-case top/left are set even on static elem
      if (position === "static") {
        elem.style.position = "relative";
      }
      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }
      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }
      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }
      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function offset(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }
      var rect,
        win,
        elem = this[0];
      if (!elem) {
        return;
      }

      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error
      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      }

      // Get document-relative position by adding viewport scroll to viewport-relative gBCR
      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function position() {
      if (!this[0]) {
        return;
      }
      var offsetParent,
        offset,
        doc,
        elem = this[0],
        parentOffset = {
          top: 0,
          left: 0
        };

      // position:fixed elements are offset from the viewport, which itself always has zero offset
      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset();

        // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified
        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;
        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }
        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
        }
      }

      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;
        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || documentElement;
      });
    }
  });

  // Create scrollLeft and scrollTop methods
  jQuery.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;
    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;
        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }
        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }
        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  });

  // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  jQuery.each(["top", "left"], function (_i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop);

        // If curCSS returns percentage, fallback to offset
        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  });

  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    jQuery.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
          extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function (elem, type, value) {
          var doc;
          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          }

          // Get document width or height
          if (elem.nodeType === 9) {
            doc = elem.documentElement;

            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest
            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }
          return value === undefined ?
          // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) :
          // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  jQuery.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    },
    hover: function hover(fnOver, fnOut) {
      return this.on("mouseenter", fnOver).on("mouseleave", fnOut || fnOver);
    }
  });
  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });

  // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  // Require that the "whitespace run" starts from a non-whitespace
  // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
  var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

  // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon
  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;
    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    }

    // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.
    if (!isFunction(fn)) {
      return undefined;
    }

    // Simulated bind
    args = _slice.call(arguments, 2);
    proxy = function proxy() {
      return fn.apply(context || this, args.concat(_slice.call(arguments)));
    };

    // Set the guid of unique handler to the same of original handler, so it can be removed
    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    return proxy;
  };
  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };
  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;
  jQuery.now = Date.now;
  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (type === "number" || type === "string") &&
    // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  };
  jQuery.trim = function (text) {
    return text == null ? "" : (text + "").replace(rtrim, "$1");
  };

  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.

  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if (typeof define === "function" && define.amd) {
    define("jquery", [], function () {
      return jQuery;
    });
  }
  var
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$;
  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }
    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }
    return jQuery;
  };

  // Expose jQuery and $ identifiers, even in AMD
  // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (trac-13566)
  if (typeof noGlobal === "undefined") {
    window.jQuery = window.$ = jQuery;
  }
  return jQuery;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwLmpzIiwic3RyZW5ndGguanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldFdpbmRvdy5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcyIsIi4uLy4uL3NyYy91dGlscy9tYXRoLmpzIiwiLi4vLi4vc3JjL3V0aWxzL3VzZXJBZ2VudC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvaXNMYXlvdXRWaWV3cG9ydC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGwuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9pc1Njcm9sbFBhcmVudC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0U2Nyb2xsUGFyZW50LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvaXNUYWJsZUVsZW1lbnQuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qcyIsIi4uLy4uL3NyYy9lbnVtcy5qcyIsIi4uLy4uL3NyYy91dGlscy9vcmRlck1vZGlmaWVycy5qcyIsIi4uLy4uL3NyYy91dGlscy9kZWJvdW5jZS5qcyIsIi4uLy4uL3NyYy91dGlscy9tZXJnZUJ5TmFtZS5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2NvbnRhaW5zLmpzIiwiLi4vLi4vc3JjL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzIiwiLi4vLi4vc3JjL3V0aWxzL2dldFZhcmlhdGlvbi5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCIuLi8uLi9zcmMvdXRpbHMvY29tcHV0ZU9mZnNldHMuanMiLCIuLi8uLi9zcmMvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwiLi4vLi4vc3JjL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcyIsIi4uLy4uL3NyYy91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCIuLi8uLi9zcmMvdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanMiLCIuLi8uLi9zcmMvY3JlYXRlUG9wcGVyLmpzIiwiLi4vLi4vc3JjL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCIuLi8uLi9zcmMvbW9kaWZpZXJzL29mZnNldC5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qcyIsIi4uLy4uL3NyYy91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvZmxpcC5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRBbHRBeGlzLmpzIiwiLi4vLi4vc3JjL3V0aWxzL3dpdGhpbi5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwiLi4vLi4vc3JjL21vZGlmaWVycy9hcnJvdy5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvaGlkZS5qcyIsIi4uLy4uL3NyYy9wb3BwZXItbGl0ZS5qcyIsIi4uLy4uL3NyYy9wb3BwZXIuanMiLCIuLi8uLi9qcy9zcmMvZG9tL2RhdGEuanMiLCIuLi8uLi9qcy9zcmMvdXRpbC9pbmRleC5qcyIsIi4uLy4uL2pzL3NyYy9kb20vZXZlbnQtaGFuZGxlci5qcyIsIi4uLy4uL2pzL3NyYy9kb20vbWFuaXB1bGF0b3IuanMiLCIuLi8uLi9qcy9zcmMvdXRpbC9jb25maWcuanMiLCIuLi8uLi9qcy9zcmMvYmFzZS1jb21wb25lbnQuanMiLCIuLi8uLi9qcy9zcmMvZG9tL3NlbGVjdG9yLWVuZ2luZS5qcyIsIi4uLy4uL2pzL3NyYy91dGlsL2NvbXBvbmVudC1mdW5jdGlvbnMuanMiLCIuLi8uLi9qcy9zcmMvYWxlcnQuanMiLCIuLi8uLi9qcy9zcmMvYnV0dG9uLmpzIiwiLi4vLi4vanMvc3JjL3V0aWwvc3dpcGUuanMiLCIuLi8uLi9qcy9zcmMvY2Fyb3VzZWwuanMiLCIuLi8uLi9qcy9zcmMvY29sbGFwc2UuanMiLCIuLi8uLi9qcy9zcmMvZHJvcGRvd24uanMiLCIuLi8uLi9qcy9zcmMvdXRpbC9iYWNrZHJvcC5qcyIsIi4uLy4uL2pzL3NyYy91dGlsL2ZvY3VzdHJhcC5qcyIsIi4uLy4uL2pzL3NyYy91dGlsL3Njcm9sbGJhci5qcyIsIi4uLy4uL2pzL3NyYy9tb2RhbC5qcyIsIi4uLy4uL2pzL3NyYy9vZmZjYW52YXMuanMiLCIuLi8uLi9qcy9zcmMvdXRpbC9zYW5pdGl6ZXIuanMiLCIuLi8uLi9qcy9zcmMvdXRpbC90ZW1wbGF0ZS1mYWN0b3J5LmpzIiwiLi4vLi4vanMvc3JjL3Rvb2x0aXAuanMiLCIuLi8uLi9qcy9zcmMvcG9wb3Zlci5qcyIsIi4uLy4uL2pzL3NyYy9zY3JvbGxzcHkuanMiLCIuLi8uLi9qcy9zcmMvdGFiLmpzIiwiLi4vLi4vanMvc3JjL3RvYXN0LmpzIiwiLi4vLi4vanMvaW5kZXgudW1kLmpzIiwianF1ZXJ5LmpzIl0sIm5hbWVzIjpbIiQiLCJ0b2dnbGVDb25uZWN0aW9uU3RyaW5nQW5kUHJlZml4IiwiY2hhbmdlIiwib24iLCJyZWZyZXNoRGVzY3JpcHRpb24iLCJlYWNoIiwiZGF0YSIsInRvTG93ZXJDYXNlIiwic2hvdyIsImhpZGUiLCJhdHRyIiwicmVtb3ZlQXR0ciIsInRleHQiLCJ0YXJnZXQiLCJyZWNpcGVOYW1lIiwicmVjaXBlRGlzcGxheU5hbWUiLCJyZWNpcGVEZXNjcmlwdGlvbiIsInZhbCIsImZvY3VzIiwic2V0TG9jYWxpemF0aW9uVXJsIiwiY3VsdHVyZXNMaXN0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIndpbmRvdyIsImxvY2F0aW9uIiwib3B0aW9ucyIsInNlbGVjdGVkSW5kZXgiLCJkYXRhc2V0IiwidXJsIiwidG9nZ2xlUGFzc3dvcmRWaXNpYmlsaXR5IiwicGFzc3dvcmRDdGwiLCJ0b2dnbGVQYXNzd29yZEN0bCIsInR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJpY29uIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsImZuIiwic3RyZW5ndGgiLCJzZXR0aW5ncyIsImV4dGVuZCIsIm1pbkxlbmd0aCIsInVwcGVyQ2FzZSIsImxvd2VyQ2FzZSIsIm51bWJlcnMiLCJzcGVjaWFsY2hhcnMiLCJzdHlsZSIsImNhcGl0YWxsZXR0ZXJzIiwibG93ZXJsZXR0ZXJzIiwiUmVnRXhwIiwibnVtYmVyIiwic3BlY2lhbGNoYXIiLCJ2YWxpZCIsImNyZWF0ZVByb2dyZXNzQmFyIiwiZ2V0UGVyY2VudGFnZSIsImEiLCJiIiwidG9GaXhlZCIsImdldExldmVsIiwidmFsdWUiLCJjaGVja1N0cmVuZ3RoIiwibGVuZ3RoIiwibWF0Y2giLCJ0b3RhbCIsInBlcmNlbnRhZ2UiLCJsZXZlbCIsImVsIiwiZW1wdHkiLCJhcHBlbmQiLCJiaW5kIiwiZXZlbnQiLCJvcmlnaW5hbEV2ZW50IiwiZGF0YVRyYW5zZmVyIiwiZ2V0RGF0YSIsInBhcmVudHMiLCJwcmV2ZW50RGVmYXVsdCIsImpRdWVyeSIsImdldFdpbmRvdyIsIm5vZGUiLCJ0b1N0cmluZyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImlzRWxlbWVudCIsIk93bkVsZW1lbnQiLCJFbGVtZW50IiwiaXNIVE1MRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiaXNTaGFkb3dSb290IiwiU2hhZG93Um9vdCIsIm1heCIsIk1hdGgiLCJtaW4iLCJyb3VuZCIsImdldFVBU3RyaW5nIiwidWFEYXRhIiwibmF2aWdhdG9yIiwidXNlckFnZW50RGF0YSIsImJyYW5kcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIml0ZW0iLCJicmFuZCIsInZlcnNpb24iLCJqb2luIiwidXNlckFnZW50IiwiaXNMYXlvdXRWaWV3cG9ydCIsInRlc3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbGVtZW50IiwiaW5jbHVkZVNjYWxlIiwiaXNGaXhlZFN0cmF0ZWd5IiwiY2xpZW50UmVjdCIsInNjYWxlWCIsInNjYWxlWSIsIm9mZnNldFdpZHRoIiwid2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJoZWlnaHQiLCJfcmVmIiwidmlzdWFsVmlld3BvcnQiLCJhZGRWaXN1YWxPZmZzZXRzIiwieCIsImxlZnQiLCJvZmZzZXRMZWZ0IiwieSIsInRvcCIsIm9mZnNldFRvcCIsInJpZ2h0IiwiYm90dG9tIiwiZ2V0V2luZG93U2Nyb2xsIiwid2luIiwic2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiLCJnZXRIVE1MRWxlbWVudFNjcm9sbCIsImdldE5vZGVTY3JvbGwiLCJnZXROb2RlTmFtZSIsIm5vZGVOYW1lIiwiZ2V0RG9jdW1lbnRFbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0V2luZG93U2Nyb2xsQmFyWCIsImdldENvbXB1dGVkU3R5bGUiLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJpc0VsZW1lbnRTY2FsZWQiLCJyZWN0IiwiZ2V0Q29tcG9zaXRlUmVjdCIsImVsZW1lbnRPclZpcnR1YWxFbGVtZW50Iiwib2Zmc2V0UGFyZW50IiwiaXNGaXhlZCIsImlzT2Zmc2V0UGFyZW50QW5FbGVtZW50Iiwib2Zmc2V0UGFyZW50SXNTY2FsZWQiLCJzY3JvbGwiLCJvZmZzZXRzIiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsImdldExheW91dFJlY3QiLCJhYnMiLCJnZXRQYXJlbnROb2RlIiwiYXNzaWduZWRTbG90IiwicGFyZW50Tm9kZSIsImhvc3QiLCJnZXRTY3JvbGxQYXJlbnQiLCJpbmRleE9mIiwiYm9keSIsImxpc3RTY3JvbGxQYXJlbnRzIiwibGlzdCIsIl9lbGVtZW50JG93bmVyRG9jdW1lbiIsInNjcm9sbFBhcmVudCIsImlzQm9keSIsImNvbmNhdCIsInVwZGF0ZWRMaXN0IiwiaXNUYWJsZUVsZW1lbnQiLCJnZXRUcnVlT2Zmc2V0UGFyZW50IiwicG9zaXRpb24iLCJnZXRDb250YWluaW5nQmxvY2siLCJpc0ZpcmVmb3giLCJpc0lFIiwiZWxlbWVudENzcyIsImN1cnJlbnROb2RlIiwiY3NzIiwidHJhbnNmb3JtIiwicGVyc3BlY3RpdmUiLCJjb250YWluIiwid2lsbENoYW5nZSIsImZpbHRlciIsImdldE9mZnNldFBhcmVudCIsImF1dG8iLCJiYXNlUGxhY2VtZW50cyIsInN0YXJ0IiwiZW5kIiwiY2xpcHBpbmdQYXJlbnRzIiwidmlld3BvcnQiLCJwb3BwZXIiLCJyZWZlcmVuY2UiLCJ2YXJpYXRpb25QbGFjZW1lbnRzIiwicmVkdWNlIiwiYWNjIiwicGxhY2VtZW50IiwicGxhY2VtZW50cyIsImJlZm9yZVJlYWQiLCJyZWFkIiwiYWZ0ZXJSZWFkIiwiYmVmb3JlTWFpbiIsIm1haW4iLCJhZnRlck1haW4iLCJiZWZvcmVXcml0ZSIsIndyaXRlIiwiYWZ0ZXJXcml0ZSIsIm1vZGlmaWVyUGhhc2VzIiwib3JkZXIiLCJtb2RpZmllcnMiLCJNYXAiLCJ2aXNpdGVkIiwiU2V0IiwicmVzdWx0IiwiZm9yRWFjaCIsIm1vZGlmaWVyIiwic2V0IiwibmFtZSIsInNvcnQiLCJyZXF1aXJlcyIsInJlcXVpcmVzSWZFeGlzdHMiLCJkZXAiLCJoYXMiLCJkZXBNb2RpZmllciIsImdldCIsInB1c2giLCJvcmRlck1vZGlmaWVycyIsIm9yZGVyZWRNb2RpZmllcnMiLCJwaGFzZSIsImRlYm91bmNlIiwicGVuZGluZyIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInVuZGVmaW5lZCIsIm1lcmdlQnlOYW1lIiwibWVyZ2VkIiwiY3VycmVudCIsImV4aXN0aW5nIiwiT2JqZWN0IiwiYXNzaWduIiwia2V5cyIsImtleSIsImdldFZpZXdwb3J0UmVjdCIsInN0cmF0ZWd5IiwiaHRtbCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwibGF5b3V0Vmlld3BvcnQiLCJnZXREb2N1bWVudFJlY3QiLCJ3aW5TY3JvbGwiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImRpcmVjdGlvbiIsImNvbnRhaW5zIiwicGFyZW50IiwiY2hpbGQiLCJyb290Tm9kZSIsImdldFJvb3ROb2RlIiwibmV4dCIsImlzU2FtZU5vZGUiLCJyZWN0VG9DbGllbnRSZWN0IiwiZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwiZ2V0Q2xpcHBpbmdQYXJlbnRzIiwiY2FuRXNjYXBlQ2xpcHBpbmciLCJjbGlwcGVyRWxlbWVudCIsImdldENsaXBwaW5nUmVjdCIsImJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwibWFpbkNsaXBwaW5nUGFyZW50cyIsImZpcnN0Q2xpcHBpbmdQYXJlbnQiLCJjbGlwcGluZ1JlY3QiLCJhY2NSZWN0IiwiZ2V0QmFzZVBsYWNlbWVudCIsInNwbGl0IiwiZ2V0VmFyaWF0aW9uIiwiZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IiwiY29tcHV0ZU9mZnNldHMiLCJiYXNlUGxhY2VtZW50IiwidmFyaWF0aW9uIiwiY29tbW9uWCIsImNvbW1vblkiLCJtYWluQXhpcyIsImxlbiIsImdldEZyZXNoU2lkZU9iamVjdCIsIm1lcmdlUGFkZGluZ09iamVjdCIsInBhZGRpbmdPYmplY3QiLCJleHBhbmRUb0hhc2hNYXAiLCJoYXNoTWFwIiwiZGV0ZWN0T3ZlcmZsb3ciLCJzdGF0ZSIsIl9vcHRpb25zIiwiX29wdGlvbnMkcGxhY2VtZW50IiwiX29wdGlvbnMkc3RyYXRlZ3kiLCJfb3B0aW9ucyRib3VuZGFyeSIsIl9vcHRpb25zJHJvb3RCb3VuZGFyeSIsIl9vcHRpb25zJGVsZW1lbnRDb250ZSIsImVsZW1lbnRDb250ZXh0IiwiX29wdGlvbnMkYWx0Qm91bmRhcnkiLCJhbHRCb3VuZGFyeSIsIl9vcHRpb25zJHBhZGRpbmciLCJwYWRkaW5nIiwiYWx0Q29udGV4dCIsInBvcHBlclJlY3QiLCJyZWN0cyIsImVsZW1lbnRzIiwiY2xpcHBpbmdDbGllbnRSZWN0IiwiY29udGV4dEVsZW1lbnQiLCJyZWZlcmVuY2VDbGllbnRSZWN0IiwicG9wcGVyT2Zmc2V0cyIsInBvcHBlckNsaWVudFJlY3QiLCJlbGVtZW50Q2xpZW50UmVjdCIsIm92ZXJmbG93T2Zmc2V0cyIsIm9mZnNldERhdGEiLCJtb2RpZmllcnNEYXRhIiwib2Zmc2V0IiwibXVsdGlwbHkiLCJheGlzIiwiREVGQVVMVF9PUFRJT05TIiwiYXJlVmFsaWRFbGVtZW50cyIsIl9sZW4iLCJhcmd1bWVudHMiLCJhcmdzIiwiX2tleSIsInNvbWUiLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiX2dlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYiLCJkZWZhdWx0TW9kaWZpZXJzIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmMiIsImRlZmF1bHRPcHRpb25zIiwiY3JlYXRlUG9wcGVyIiwiYXR0cmlidXRlcyIsInN0eWxlcyIsImVmZmVjdENsZWFudXBGbnMiLCJpc0Rlc3Ryb3llZCIsImluc3RhbmNlIiwic2V0T3B0aW9ucyIsInNldE9wdGlvbnNBY3Rpb24iLCJjbGVhbnVwTW9kaWZpZXJFZmZlY3RzIiwic2Nyb2xsUGFyZW50cyIsIm0iLCJlbmFibGVkIiwicnVuTW9kaWZpZXJFZmZlY3RzIiwidXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJfc3RhdGUkZWxlbWVudHMiLCJyZXNldCIsImluZGV4IiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllIiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllMiIsImRlc3Ryb3kiLCJvbkZpcnN0VXBkYXRlIiwiX3JlZiRvcHRpb25zIiwiZWZmZWN0IiwiY2xlYW51cEZuIiwibm9vcEZuIiwicGFzc2l2ZSIsImVmZmVjdCQyIiwiX29wdGlvbnMkc2Nyb2xsIiwiX29wdGlvbnMkcmVzaXplIiwicmVzaXplIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudExpc3RlbmVycyIsInBvcHBlck9mZnNldHMkMSIsInVuc2V0U2lkZXMiLCJyb3VuZE9mZnNldHNCeURQUiIsImRwciIsImRldmljZVBpeGVsUmF0aW8iLCJtYXBUb1N0eWxlcyIsIl9yZWYyIiwiX09iamVjdCRhc3NpZ24yIiwiZ3B1QWNjZWxlcmF0aW9uIiwiYWRhcHRpdmUiLCJyb3VuZE9mZnNldHMiLCJfb2Zmc2V0cyR4IiwiX29mZnNldHMkeSIsIl9yZWYzIiwiaGFzWCIsImhhc093blByb3BlcnR5IiwiaGFzWSIsInNpZGVYIiwic2lkZVkiLCJoZWlnaHRQcm9wIiwid2lkdGhQcm9wIiwib2Zmc2V0WSIsIm9mZnNldFgiLCJjb21tb25TdHlsZXMiLCJfcmVmNCIsIl9PYmplY3QkYXNzaWduIiwiY29tcHV0ZVN0eWxlcyIsIl9yZWY1IiwiX29wdGlvbnMkZ3B1QWNjZWxlcmF0IiwiX29wdGlvbnMkYWRhcHRpdmUiLCJfb3B0aW9ucyRyb3VuZE9mZnNldHMiLCJhcnJvdyIsImNvbXB1dGVTdHlsZXMkMSIsImFwcGx5U3R5bGVzIiwicmVtb3ZlQXR0cmlidXRlIiwiZWZmZWN0JDEiLCJpbml0aWFsU3R5bGVzIiwibWFyZ2luIiwic3R5bGVQcm9wZXJ0aWVzIiwicHJvcGVydHkiLCJhdHRyaWJ1dGUiLCJhcHBseVN0eWxlcyQxIiwiZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkiLCJpbnZlcnREaXN0YW5jZSIsInNraWRkaW5nIiwiZGlzdGFuY2UiLCJfb3B0aW9ucyRvZmZzZXQiLCJfZGF0YSRzdGF0ZSRwbGFjZW1lbnQiLCJvZmZzZXQkMSIsImhhc2gkMSIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwicmVwbGFjZSIsIm1hdGNoZWQiLCJoYXNoIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsImZsaXBWYXJpYXRpb25zIiwiX29wdGlvbnMkYWxsb3dlZEF1dG9QIiwiYWxsb3dlZEF1dG9QbGFjZW1lbnRzIiwicGxhY2VtZW50cyQxIiwiYWxsb3dlZFBsYWNlbWVudHMiLCJvdmVyZmxvd3MiLCJnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyIsIm9wcG9zaXRlUGxhY2VtZW50IiwiZmxpcCIsIl9za2lwIiwiX29wdGlvbnMkbWFpbkF4aXMiLCJjaGVja01haW5BeGlzIiwiX29wdGlvbnMkYWx0QXhpcyIsImFsdEF4aXMiLCJjaGVja0FsdEF4aXMiLCJzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJfb3B0aW9ucyRmbGlwVmFyaWF0aW8iLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJpc0Jhc2VQbGFjZW1lbnQiLCJyZWZlcmVuY2VSZWN0IiwiY2hlY2tzTWFwIiwibWFrZUZhbGxiYWNrQ2hlY2tzIiwiZmlyc3RGaXR0aW5nUGxhY2VtZW50IiwiaSIsIl9iYXNlUGxhY2VtZW50IiwiaXNTdGFydFZhcmlhdGlvbiIsImlzVmVydGljYWwiLCJtYWluVmFyaWF0aW9uU2lkZSIsImFsdFZhcmlhdGlvblNpZGUiLCJjaGVja3MiLCJldmVyeSIsImNoZWNrIiwibnVtYmVyT2ZDaGVja3MiLCJfbG9vcCIsIl9pIiwiZml0dGluZ1BsYWNlbWVudCIsImZpbmQiLCJzbGljZSIsIl9yZXQiLCJmbGlwJDEiLCJnZXRBbHRBeGlzIiwid2l0aGluIiwibWluJDEiLCJtYXgkMSIsIndpdGhpbk1heENsYW1wIiwidiIsInByZXZlbnRPdmVyZmxvdyIsIl9vcHRpb25zJHRldGhlciIsInRldGhlciIsIl9vcHRpb25zJHRldGhlck9mZnNldCIsInRldGhlck9mZnNldCIsInRldGhlck9mZnNldFZhbHVlIiwibm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlIiwib2Zmc2V0TW9kaWZpZXJTdGF0ZSIsIl9vZmZzZXRNb2RpZmllclN0YXRlJCIsIm1haW5TaWRlIiwiYWx0U2lkZSIsImFkZGl0aXZlIiwibWluTGVuIiwibWF4TGVuIiwiYXJyb3dFbGVtZW50IiwiYXJyb3dSZWN0IiwiYXJyb3dQYWRkaW5nT2JqZWN0IiwiYXJyb3dQYWRkaW5nTWluIiwiYXJyb3dQYWRkaW5nTWF4IiwiYXJyb3dMZW4iLCJtaW5PZmZzZXQiLCJtYXhPZmZzZXQiLCJhcnJvd09mZnNldFBhcmVudCIsImNsaWVudE9mZnNldCIsIm9mZnNldE1vZGlmaWVyVmFsdWUiLCJ0ZXRoZXJNaW4iLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyIiwiX21haW5TaWRlIiwiX2FsdFNpZGUiLCJfb2Zmc2V0IiwiX21pbiIsIl9tYXgiLCJpc09yaWdpblNpZGUiLCJfb2Zmc2V0TW9kaWZpZXJWYWx1ZSIsIl90ZXRoZXJNaW4iLCJfdGV0aGVyTWF4IiwiX3ByZXZlbnRlZE9mZnNldCIsInByZXZlbnRPdmVyZmxvdyQxIiwidG9QYWRkaW5nT2JqZWN0IiwiX3N0YXRlJG1vZGlmaWVyc0RhdGEkIiwibWluUHJvcCIsIm1heFByb3AiLCJlbmREaWZmIiwic3RhcnREaWZmIiwiY2xpZW50U2l6ZSIsImNlbnRlclRvUmVmZXJlbmNlIiwiY2VudGVyIiwiYXhpc1Byb3AiLCJjZW50ZXJPZmZzZXQiLCJfb3B0aW9ucyRlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImFycm93JDEiLCJnZXRTaWRlT2Zmc2V0cyIsInByZXZlbnRlZE9mZnNldHMiLCJpc0FueVNpZGVGdWxseUNsaXBwZWQiLCJzaWRlIiwicmVmZXJlbmNlT3ZlcmZsb3ciLCJwb3BwZXJBbHRPdmVyZmxvdyIsInJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyIsInBvcHBlckVzY2FwZU9mZnNldHMiLCJpc1JlZmVyZW5jZUhpZGRlbiIsImhhc1BvcHBlckVzY2FwZWQiLCJoaWRlJDEiLCJkZWZhdWx0TW9kaWZpZXJzJDEiLCJjcmVhdGVQb3BwZXIkMSIsImVsZW1lbnRNYXAiLCJEYXRhIiwiaW5zdGFuY2VNYXAiLCJzaXplIiwiY29uc29sZSIsImVycm9yIiwiZnJvbSIsIk1BWF9VSUQiLCJNSUxMSVNFQ09ORFNfTVVMVElQTElFUiIsIlRSQU5TSVRJT05fRU5EIiwicGFyc2VTZWxlY3RvciIsInNlbGVjdG9yIiwiQ1NTIiwiZXNjYXBlIiwiaWQiLCJ0b1R5cGUiLCJvYmplY3QiLCJwcm90b3R5cGUiLCJjYWxsIiwiZ2V0VUlEIiwicHJlZml4IiwiZmxvb3IiLCJyYW5kb20iLCJnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCIsIl93aW5kb3ckZ2V0Q29tcHV0ZWRTdCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uIiwiTnVtYmVyIiwicGFyc2VGbG9hdCIsImZsb2F0VHJhbnNpdGlvbkRlbGF5IiwidHJpZ2dlclRyYW5zaXRpb25FbmQiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJfdHlwZW9mIiwianF1ZXJ5Iiwibm9kZVR5cGUiLCJnZXRFbGVtZW50IiwiaXNWaXNpYmxlIiwiZ2V0Q2xpZW50UmVjdHMiLCJlbGVtZW50SXNWaXNpYmxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImNsb3NlZERldGFpbHMiLCJjbG9zZXN0Iiwic3VtbWFyeSIsImlzRGlzYWJsZWQiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwiZGlzYWJsZWQiLCJoYXNBdHRyaWJ1dGUiLCJmaW5kU2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsInJvb3QiLCJub29wIiwicmVmbG93IiwiZ2V0alF1ZXJ5IiwiRE9NQ29udGVudExvYWRlZENhbGxiYWNrcyIsIm9uRE9NQ29udGVudExvYWRlZCIsImNhbGxiYWNrIiwicmVhZHlTdGF0ZSIsIl9ET01Db250ZW50TG9hZGVkQ2FsbCIsImlzUlRMIiwiZGlyIiwiZGVmaW5lSlF1ZXJ5UGx1Z2luIiwicGx1Z2luIiwiTkFNRSIsIkpRVUVSWV9OT19DT05GTElDVCIsImpRdWVyeUludGVyZmFjZSIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsImV4ZWN1dGUiLCJwb3NzaWJsZUNhbGxiYWNrIiwiZGVmYXVsdFZhbHVlIiwiYXBwbHkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uIiwidHJhbnNpdGlvbkVsZW1lbnQiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsImR1cmF0aW9uUGFkZGluZyIsImVtdWxhdGVkRHVyYXRpb24iLCJjYWxsZWQiLCJoYW5kbGVyIiwic2V0VGltZW91dCIsImdldE5leHRBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsInNob3VsZEdldE5leHQiLCJpc0N5Y2xlQWxsb3dlZCIsImxpc3RMZW5ndGgiLCJuYW1lc3BhY2VSZWdleCIsInN0cmlwTmFtZVJlZ2V4Iiwic3RyaXBVaWRSZWdleCIsImV2ZW50UmVnaXN0cnkiLCJ1aWRFdmVudCIsImN1c3RvbUV2ZW50cyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwibmF0aXZlRXZlbnRzIiwibWFrZUV2ZW50VWlkIiwidWlkIiwiZ2V0RWxlbWVudEV2ZW50cyIsImJvb3RzdHJhcEhhbmRsZXIiLCJoeWRyYXRlT2JqIiwiZGVsZWdhdGVUYXJnZXQiLCJvbmVPZmYiLCJFdmVudEhhbmRsZXIiLCJvZmYiLCJib290c3RyYXBEZWxlZ2F0aW9uSGFuZGxlciIsImRvbUVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsIl9pdGVyYXRvciIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiX3N0ZXAiLCJzIiwibiIsImRvbmUiLCJkb21FbGVtZW50IiwiZXJyIiwiZSIsImYiLCJmaW5kSGFuZGxlciIsImV2ZW50cyIsImNhbGxhYmxlIiwiZGVsZWdhdGlvblNlbGVjdG9yIiwidmFsdWVzIiwibm9ybWFsaXplUGFyYW1ldGVycyIsIm9yaWdpbmFsVHlwZUV2ZW50IiwiZGVsZWdhdGlvbkZ1bmN0aW9uIiwiaXNEZWxlZ2F0ZWQiLCJ0eXBlRXZlbnQiLCJnZXRUeXBlRXZlbnQiLCJhZGRIYW5kbGVyIiwiX25vcm1hbGl6ZVBhcmFtZXRlcnMiLCJfbm9ybWFsaXplUGFyYW1ldGVyczIiLCJfc2xpY2VkVG9BcnJheSIsIndyYXBGdW5jdGlvbiIsInJlbGF0ZWRUYXJnZXQiLCJoYW5kbGVycyIsInByZXZpb3VzRnVuY3Rpb24iLCJyZW1vdmVIYW5kbGVyIiwiQm9vbGVhbiIsInJlbW92ZU5hbWVzcGFjZWRIYW5kbGVycyIsIm5hbWVzcGFjZSIsInN0b3JlRWxlbWVudEV2ZW50IiwiX2kyIiwiX09iamVjdCRlbnRyaWVzIiwiZW50cmllcyIsIl9PYmplY3QkZW50cmllcyRfaSIsImhhbmRsZXJLZXkiLCJpbmNsdWRlcyIsIm9uZSIsIl9ub3JtYWxpemVQYXJhbWV0ZXJzMyIsIl9ub3JtYWxpemVQYXJhbWV0ZXJzNCIsImluTmFtZXNwYWNlIiwiaXNOYW1lc3BhY2UiLCJzdGFydHNXaXRoIiwiX2kzIiwiX09iamVjdCRrZXlzIiwiZWxlbWVudEV2ZW50IiwiX2k0IiwiX09iamVjdCRlbnRyaWVzMiIsIl9PYmplY3QkZW50cmllczIkX2kiLCJrZXlIYW5kbGVycyIsInRyaWdnZXIiLCJqUXVlcnlFdmVudCIsImJ1YmJsZXMiLCJuYXRpdmVEaXNwYXRjaCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZXZ0IiwiY2FuY2VsYWJsZSIsIm9iaiIsIm1ldGEiLCJfbG9vcDIiLCJfT2JqZWN0JGVudHJpZXMzJF9pIiwiX09iamVjdCRlbnRyaWVzMyIsIl9pNSIsIl91bnVzZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIm5vcm1hbGl6ZURhdGEiLCJKU09OIiwicGFyc2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJub3JtYWxpemVEYXRhS2V5IiwiY2hyIiwiTWFuaXB1bGF0b3IiLCJzZXREYXRhQXR0cmlidXRlIiwicmVtb3ZlRGF0YUF0dHJpYnV0ZSIsImdldERhdGFBdHRyaWJ1dGVzIiwiYnNLZXlzIiwiX2l0ZXJhdG9yMiIsIl9zdGVwMiIsInB1cmVLZXkiLCJjaGFyQXQiLCJnZXREYXRhQXR0cmlidXRlIiwiQ29uZmlnIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwiX2dldENvbmZpZyIsImNvbmZpZyIsIl9tZXJnZUNvbmZpZ09iaiIsIl9jb25maWdBZnRlck1lcmdlIiwiX3R5cGVDaGVja0NvbmZpZyIsImpzb25Db25maWciLCJfb2JqZWN0U3ByZWFkIiwiY29uc3RydWN0b3IiLCJEZWZhdWx0IiwiY29uZmlnVHlwZXMiLCJEZWZhdWx0VHlwZSIsIl9pNiIsIl9PYmplY3QkZW50cmllczQiLCJfT2JqZWN0JGVudHJpZXM0JF9pIiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlVHlwZSIsIlR5cGVFcnJvciIsInRvVXBwZXJDYXNlIiwiRXJyb3IiLCJWRVJTSU9OIiwiQmFzZUNvbXBvbmVudCIsIl9Db25maWciLCJfdGhpcyIsIl9jYWxsU3VwZXIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9lbGVtZW50IiwiX2NvbmZpZyIsIkRBVEFfS0VZIiwiX2luaGVyaXRzIiwiZGlzcG9zZSIsIkVWRU5UX0tFWSIsIl9pdGVyYXRvcjMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX3N0ZXAzIiwicHJvcGVydHlOYW1lIiwiX3F1ZXVlQ2FsbGJhY2siLCJpc0FuaW1hdGVkIiwiZ2V0SW5zdGFuY2UiLCJnZXRPckNyZWF0ZUluc3RhbmNlIiwiZXZlbnROYW1lIiwiZ2V0U2VsZWN0b3IiLCJocmVmQXR0cmlidXRlIiwidHJpbSIsInNlbCIsIlNlbGVjdG9yRW5naW5lIiwiZmluZE9uZSIsImNoaWxkcmVuIiwibWF0Y2hlcyIsImFuY2VzdG9yIiwicHJldiIsInByZXZpb3VzIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIm5leHRFbGVtZW50U2libGluZyIsImZvY3VzYWJsZUNoaWxkcmVuIiwiZm9jdXNhYmxlcyIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJnZXRFbGVtZW50RnJvbVNlbGVjdG9yIiwiZ2V0TXVsdGlwbGVFbGVtZW50c0Zyb21TZWxlY3RvciIsImVuYWJsZURpc21pc3NUcmlnZ2VyIiwiY29tcG9uZW50IiwibWV0aG9kIiwiY2xpY2tFdmVudCIsInRhZ05hbWUiLCJOQU1FJGYiLCJEQVRBX0tFWSRhIiwiRVZFTlRfS0VZJGIiLCJFVkVOVF9DTE9TRSIsIkVWRU5UX0NMT1NFRCIsIkNMQVNTX05BTUVfRkFERSQ1IiwiQ0xBU1NfTkFNRV9TSE9XJDgiLCJBbGVydCIsIl9CYXNlQ29tcG9uZW50IiwiY2xvc2UiLCJfdGhpczIiLCJjbG9zZUV2ZW50IiwiX2Rlc3Ryb3lFbGVtZW50IiwiTkFNRSRlIiwiREFUQV9LRVkkOSIsIkVWRU5UX0tFWSRhIiwiREFUQV9BUElfS0VZJDYiLCJDTEFTU19OQU1FX0FDVElWRSQzIiwiU0VMRUNUT1JfREFUQV9UT0dHTEUkNSIsIkVWRU5UX0NMSUNLX0RBVEFfQVBJJDYiLCJCdXR0b24iLCJfQmFzZUNvbXBvbmVudDIiLCJ0b2dnbGUiLCJidXR0b24iLCJOQU1FJGQiLCJFVkVOVF9LRVkkOSIsIkVWRU5UX1RPVUNIU1RBUlQiLCJFVkVOVF9UT1VDSE1PVkUiLCJFVkVOVF9UT1VDSEVORCIsIkVWRU5UX1BPSU5URVJET1dOIiwiRVZFTlRfUE9JTlRFUlVQIiwiUE9JTlRFUl9UWVBFX1RPVUNIIiwiUE9JTlRFUl9UWVBFX1BFTiIsIkNMQVNTX05BTUVfUE9JTlRFUl9FVkVOVCIsIlNXSVBFX1RIUkVTSE9MRCIsIkRlZmF1bHQkYyIsImVuZENhbGxiYWNrIiwibGVmdENhbGxiYWNrIiwicmlnaHRDYWxsYmFjayIsIkRlZmF1bHRUeXBlJGMiLCJTd2lwZSIsIl9Db25maWcyIiwiX3RoaXMzIiwiaXNTdXBwb3J0ZWQiLCJfZGVsdGFYIiwiX3N1cHBvcnRQb2ludGVyRXZlbnRzIiwiUG9pbnRlckV2ZW50IiwiX2luaXRFdmVudHMiLCJfc3RhcnQiLCJ0b3VjaGVzIiwiY2xpZW50WCIsIl9ldmVudElzUG9pbnRlclBlblRvdWNoIiwiX2VuZCIsIl9oYW5kbGVTd2lwZSIsIl9tb3ZlIiwiYWJzRGVsdGFYIiwiX3RoaXM0IiwicG9pbnRlclR5cGUiLCJtYXhUb3VjaFBvaW50cyIsIk5BTUUkYyIsIkRBVEFfS0VZJDgiLCJFVkVOVF9LRVkkOCIsIkRBVEFfQVBJX0tFWSQ1IiwiQVJST1dfTEVGVF9LRVkkMSIsIkFSUk9XX1JJR0hUX0tFWSQxIiwiVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCIsIk9SREVSX05FWFQiLCJPUkRFUl9QUkVWIiwiRElSRUNUSU9OX0xFRlQiLCJESVJFQ1RJT05fUklHSFQiLCJFVkVOVF9TTElERSIsIkVWRU5UX1NMSUQiLCJFVkVOVF9LRVlET1dOJDEiLCJFVkVOVF9NT1VTRUVOVEVSJDEiLCJFVkVOVF9NT1VTRUxFQVZFJDEiLCJFVkVOVF9EUkFHX1NUQVJUIiwiRVZFTlRfTE9BRF9EQVRBX0FQSSQzIiwiRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNSIsIkNMQVNTX05BTUVfQ0FST1VTRUwiLCJDTEFTU19OQU1FX0FDVElWRSQyIiwiQ0xBU1NfTkFNRV9TTElERSIsIkNMQVNTX05BTUVfRU5EIiwiQ0xBU1NfTkFNRV9TVEFSVCIsIkNMQVNTX05BTUVfTkVYVCIsIkNMQVNTX05BTUVfUFJFViIsIlNFTEVDVE9SX0FDVElWRSIsIlNFTEVDVE9SX0lURU0iLCJTRUxFQ1RPUl9BQ1RJVkVfSVRFTSIsIlNFTEVDVE9SX0lURU1fSU1HIiwiU0VMRUNUT1JfSU5ESUNBVE9SUyIsIlNFTEVDVE9SX0RBVEFfU0xJREUiLCJTRUxFQ1RPUl9EQVRBX1JJREUiLCJLRVlfVE9fRElSRUNUSU9OIiwiX2RlZmluZVByb3BlcnR5IiwiRGVmYXVsdCRiIiwiaW50ZXJ2YWwiLCJrZXlib2FyZCIsInBhdXNlIiwicmlkZSIsInRvdWNoIiwid3JhcCIsIkRlZmF1bHRUeXBlJGIiLCJDYXJvdXNlbCIsIl9CYXNlQ29tcG9uZW50MyIsIl90aGlzNSIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsIl9zd2lwZUhlbHBlciIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl9hZGRFdmVudExpc3RlbmVycyIsImN5Y2xlIiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiaGlkZGVuIiwiX2NsZWFySW50ZXJ2YWwiLCJfdGhpczYiLCJfdXBkYXRlSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsIl9tYXliZUVuYWJsZUN5Y2xlIiwiX3RoaXM3IiwidG8iLCJfdGhpczgiLCJpdGVtcyIsIl9nZXRJdGVtcyIsImFjdGl2ZUluZGV4IiwiX2dldEl0ZW1JbmRleCIsIl9nZXRBY3RpdmUiLCJfZ2V0IiwiX2dldFByb3RvdHlwZU9mIiwiZGVmYXVsdEludGVydmFsIiwiX3RoaXM5IiwiX2tleWRvd24iLCJfYWRkVG91Y2hFdmVudExpc3RlbmVycyIsIl90aGlzMTAiLCJfaXRlcmF0b3I0IiwiX3N0ZXA0IiwiaW1nIiwiZW5kQ2FsbEJhY2siLCJjbGVhclRpbWVvdXQiLCJzd2lwZUNvbmZpZyIsIl9kaXJlY3Rpb25Ub09yZGVyIiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJhY3RpdmVJbmRpY2F0b3IiLCJuZXdBY3RpdmVJbmRpY2F0b3IiLCJlbGVtZW50SW50ZXJ2YWwiLCJwYXJzZUludCIsIl90aGlzMTEiLCJpc05leHQiLCJuZXh0RWxlbWVudCIsIm5leHRFbGVtZW50SW5kZXgiLCJ0cmlnZ2VyRXZlbnQiLCJfb3JkZXJUb0RpcmVjdGlvbiIsInNsaWRlRXZlbnQiLCJpc0N5Y2xpbmciLCJkaXJlY3Rpb25hbENsYXNzTmFtZSIsIm9yZGVyQ2xhc3NOYW1lIiwiY29tcGxldGVDYWxsQmFjayIsIl9pc0FuaW1hdGVkIiwiY2xlYXJJbnRlcnZhbCIsImNhcm91c2VsIiwic2xpZGVJbmRleCIsImNhcm91c2VscyIsIl9pdGVyYXRvcjUiLCJfc3RlcDUiLCJOQU1FJGIiLCJEQVRBX0tFWSQ3IiwiRVZFTlRfS0VZJDciLCJEQVRBX0FQSV9LRVkkNCIsIkVWRU5UX1NIT1ckNiIsIkVWRU5UX1NIT1dOJDYiLCJFVkVOVF9ISURFJDYiLCJFVkVOVF9ISURERU4kNiIsIkVWRU5UX0NMSUNLX0RBVEFfQVBJJDQiLCJDTEFTU19OQU1FX1NIT1ckNyIsIkNMQVNTX05BTUVfQ09MTEFQU0UiLCJDTEFTU19OQU1FX0NPTExBUFNJTkciLCJDTEFTU19OQU1FX0NPTExBUFNFRCIsIkNMQVNTX05BTUVfREVFUEVSX0NISUxEUkVOIiwiQ0xBU1NfTkFNRV9IT1JJWk9OVEFMIiwiV0lEVEgiLCJIRUlHSFQiLCJTRUxFQ1RPUl9BQ1RJVkVTIiwiU0VMRUNUT1JfREFUQV9UT0dHTEUkNCIsIkRlZmF1bHQkYSIsIkRlZmF1bHRUeXBlJGEiLCJDb2xsYXBzZSIsIl9CYXNlQ29tcG9uZW50NCIsIl90aGlzMTIiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsInRvZ2dsZUxpc3QiLCJfaXRlcmF0b3I2IiwiX3N0ZXA2IiwiZWxlbSIsImZpbHRlckVsZW1lbnQiLCJmb3VuZEVsZW1lbnQiLCJfaW5pdGlhbGl6ZUNoaWxkcmVuIiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsIl9pc1Nob3duIiwiX3RoaXMxMyIsImFjdGl2ZUNoaWxkcmVuIiwiX2dldEZpcnN0TGV2ZWxDaGlsZHJlbiIsInN0YXJ0RXZlbnQiLCJfaXRlcmF0b3I3IiwiX3N0ZXA3IiwiYWN0aXZlSW5zdGFuY2UiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwiY29tcGxldGUiLCJjYXBpdGFsaXplZERpbWVuc2lvbiIsInNjcm9sbFNpemUiLCJfdGhpczE0IiwiX2l0ZXJhdG9yOCIsIl9zdGVwOCIsIl9pdGVyYXRvcjkiLCJfc3RlcDkiLCJzZWxlY3RlZCIsInRyaWdnZXJBcnJheSIsImlzT3BlbiIsIl9pdGVyYXRvcjEwIiwiX3N0ZXAxMCIsIl9pdGVyYXRvcjExIiwiX3N0ZXAxMSIsIk5BTUUkYSIsIkRBVEFfS0VZJDYiLCJFVkVOVF9LRVkkNiIsIkRBVEFfQVBJX0tFWSQzIiwiRVNDQVBFX0tFWSQyIiwiVEFCX0tFWSQxIiwiQVJST1dfVVBfS0VZJDEiLCJBUlJPV19ET1dOX0tFWSQxIiwiUklHSFRfTU9VU0VfQlVUVE9OIiwiRVZFTlRfSElERSQ1IiwiRVZFTlRfSElEREVOJDUiLCJFVkVOVF9TSE9XJDUiLCJFVkVOVF9TSE9XTiQ1IiwiRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMyIsIkVWRU5UX0tFWURPV05fREFUQV9BUEkiLCJFVkVOVF9LRVlVUF9EQVRBX0FQSSIsIkNMQVNTX05BTUVfU0hPVyQ2IiwiQ0xBU1NfTkFNRV9EUk9QVVAiLCJDTEFTU19OQU1FX0RST1BFTkQiLCJDTEFTU19OQU1FX0RST1BTVEFSVCIsIkNMQVNTX05BTUVfRFJPUFVQX0NFTlRFUiIsIkNMQVNTX05BTUVfRFJPUERPV05fQ0VOVEVSIiwiU0VMRUNUT1JfREFUQV9UT0dHTEUkMyIsIlNFTEVDVE9SX0RBVEFfVE9HR0xFX1NIT1dOIiwiU0VMRUNUT1JfTUVOVSIsIlNFTEVDVE9SX05BVkJBUiIsIlNFTEVDVE9SX05BVkJBUl9OQVYiLCJTRUxFQ1RPUl9WSVNJQkxFX0lURU1TIiwiUExBQ0VNRU5UX1RPUCIsIlBMQUNFTUVOVF9UT1BFTkQiLCJQTEFDRU1FTlRfQk9UVE9NIiwiUExBQ0VNRU5UX0JPVFRPTUVORCIsIlBMQUNFTUVOVF9SSUdIVCIsIlBMQUNFTUVOVF9MRUZUIiwiUExBQ0VNRU5UX1RPUENFTlRFUiIsIlBMQUNFTUVOVF9CT1RUT01DRU5URVIiLCJEZWZhdWx0JDkiLCJhdXRvQ2xvc2UiLCJkaXNwbGF5IiwicG9wcGVyQ29uZmlnIiwiRGVmYXVsdFR5cGUkOSIsIkRyb3Bkb3duIiwiX0Jhc2VDb21wb25lbnQ1IiwiX3RoaXMxNSIsIl9wb3BwZXIiLCJfcGFyZW50IiwiX21lbnUiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwic2hvd0V2ZW50IiwiX2NyZWF0ZVBvcHBlciIsIl9pdGVyYXRvcjEyIiwiX3N0ZXAxMiIsIl9jb21wbGV0ZUhpZGUiLCJoaWRlRXZlbnQiLCJfaXRlcmF0b3IxMyIsIl9zdGVwMTMiLCJQb3BwZXJfX25hbWVzcGFjZSIsInJlZmVyZW5jZUVsZW1lbnQiLCJfZ2V0UG9wcGVyQ29uZmlnIiwiX2dldFBsYWNlbWVudCIsInBhcmVudERyb3Bkb3duIiwiaXNFbmQiLCJfZ2V0T2Zmc2V0IiwiX3RoaXMxNiIsInBvcHBlckRhdGEiLCJkZWZhdWx0QnNQb3BwZXJDb25maWciLCJfc2VsZWN0TWVudUl0ZW0iLCJfcmVmNiIsImNsZWFyTWVudXMiLCJvcGVuVG9nZ2xlcyIsIl9pdGVyYXRvcjE0IiwiX3N0ZXAxNCIsImNvbnRleHQiLCJjb21wb3NlZFBhdGgiLCJpc01lbnVUYXJnZXQiLCJkYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJpc0lucHV0IiwiaXNFc2NhcGVFdmVudCIsImlzVXBPckRvd25FdmVudCIsImdldFRvZ2dsZUJ1dHRvbiIsInN0b3BQcm9wYWdhdGlvbiIsIk5BTUUkOSIsIkNMQVNTX05BTUVfRkFERSQ0IiwiQ0xBU1NfTkFNRV9TSE9XJDUiLCJFVkVOVF9NT1VTRURPV04iLCJEZWZhdWx0JDgiLCJjbGFzc05hbWUiLCJjbGlja0NhbGxiYWNrIiwicm9vdEVsZW1lbnQiLCJEZWZhdWx0VHlwZSQ4IiwiQmFja2Ryb3AiLCJfQ29uZmlnMyIsIl90aGlzMTciLCJfaXNBcHBlbmRlZCIsIl9hcHBlbmQiLCJfZ2V0RWxlbWVudCIsIl9lbXVsYXRlQW5pbWF0aW9uIiwiX3RoaXMxOCIsImJhY2tkcm9wIiwiY3JlYXRlRWxlbWVudCIsIl90aGlzMTkiLCJOQU1FJDgiLCJEQVRBX0tFWSQ1IiwiRVZFTlRfS0VZJDUiLCJFVkVOVF9GT0NVU0lOJDIiLCJFVkVOVF9LRVlET1dOX1RBQiIsIlRBQl9LRVkiLCJUQUJfTkFWX0ZPUldBUkQiLCJUQUJfTkFWX0JBQ0tXQVJEIiwiRGVmYXVsdCQ3IiwiYXV0b2ZvY3VzIiwidHJhcEVsZW1lbnQiLCJEZWZhdWx0VHlwZSQ3IiwiRm9jdXNUcmFwIiwiX0NvbmZpZzQiLCJfdGhpczIwIiwiX2lzQWN0aXZlIiwiX2xhc3RUYWJOYXZEaXJlY3Rpb24iLCJhY3RpdmF0ZSIsIl90aGlzMjEiLCJfaGFuZGxlRm9jdXNpbiIsIl9oYW5kbGVLZXlkb3duIiwiZGVhY3RpdmF0ZSIsInNoaWZ0S2V5IiwiU0VMRUNUT1JfRklYRURfQ09OVEVOVCIsIlNFTEVDVE9SX1NUSUNLWV9DT05URU5UIiwiUFJPUEVSVFlfUEFERElORyIsIlBST1BFUlRZX01BUkdJTiIsIlNjcm9sbEJhckhlbHBlciIsImdldFdpZHRoIiwiZG9jdW1lbnRXaWR0aCIsImlubmVyV2lkdGgiLCJfZGlzYWJsZU92ZXJGbG93IiwiX3NldEVsZW1lbnRBdHRyaWJ1dGVzIiwiY2FsY3VsYXRlZFZhbHVlIiwiX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMiLCJpc092ZXJmbG93aW5nIiwiX3NhdmVJbml0aWFsQXR0cmlidXRlIiwic3R5bGVQcm9wZXJ0eSIsIl90aGlzMjIiLCJzY3JvbGxiYXJXaWR0aCIsIm1hbmlwdWxhdGlvbkNhbGxCYWNrIiwic2V0UHJvcGVydHkiLCJfYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayIsImFjdHVhbFZhbHVlIiwicmVtb3ZlUHJvcGVydHkiLCJjYWxsQmFjayIsIl9pdGVyYXRvcjE1IiwiX3N0ZXAxNSIsIk5BTUUkNyIsIkRBVEFfS0VZJDQiLCJFVkVOVF9LRVkkNCIsIkRBVEFfQVBJX0tFWSQyIiwiRVNDQVBFX0tFWSQxIiwiRVZFTlRfSElERSQ0IiwiRVZFTlRfSElERV9QUkVWRU5URUQkMSIsIkVWRU5UX0hJRERFTiQ0IiwiRVZFTlRfU0hPVyQ0IiwiRVZFTlRfU0hPV04kNCIsIkVWRU5UX1JFU0laRSQxIiwiRVZFTlRfQ0xJQ0tfRElTTUlTUyIsIkVWRU5UX01PVVNFRE9XTl9ESVNNSVNTIiwiRVZFTlRfS0VZRE9XTl9ESVNNSVNTJDEiLCJFVkVOVF9DTElDS19EQVRBX0FQSSQyIiwiQ0xBU1NfTkFNRV9PUEVOIiwiQ0xBU1NfTkFNRV9GQURFJDMiLCJDTEFTU19OQU1FX1NIT1ckNCIsIkNMQVNTX05BTUVfU1RBVElDIiwiT1BFTl9TRUxFQ1RPUiQxIiwiU0VMRUNUT1JfRElBTE9HIiwiU0VMRUNUT1JfTU9EQUxfQk9EWSIsIlNFTEVDVE9SX0RBVEFfVE9HR0xFJDIiLCJEZWZhdWx0JDYiLCJEZWZhdWx0VHlwZSQ2IiwiTW9kYWwiLCJfQmFzZUNvbXBvbmVudDYiLCJfdGhpczIzIiwiX2RpYWxvZyIsIl9iYWNrZHJvcCIsIl9pbml0aWFsaXplQmFja0Ryb3AiLCJfZm9jdXN0cmFwIiwiX2luaXRpYWxpemVGb2N1c1RyYXAiLCJfc2Nyb2xsQmFyIiwiX3RoaXMyNCIsIl9hZGp1c3REaWFsb2ciLCJfc2hvd0VsZW1lbnQiLCJfdGhpczI1IiwiX2hpZGVNb2RhbCIsImhhbmRsZVVwZGF0ZSIsIl90aGlzMjYiLCJtb2RhbEJvZHkiLCJ0cmFuc2l0aW9uQ29tcGxldGUiLCJfdGhpczI3IiwiX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24iLCJldmVudDIiLCJfdGhpczI4IiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJfdGhpczI5IiwiaXNNb2RhbE92ZXJmbG93aW5nIiwiaW5pdGlhbE92ZXJmbG93WSIsImlzQm9keU92ZXJmbG93aW5nIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJfdGhpczMwIiwiYWxyZWFkeU9wZW4iLCJOQU1FJDYiLCJEQVRBX0tFWSQzIiwiRVZFTlRfS0VZJDMiLCJEQVRBX0FQSV9LRVkkMSIsIkVWRU5UX0xPQURfREFUQV9BUEkkMiIsIkVTQ0FQRV9LRVkiLCJDTEFTU19OQU1FX1NIT1ckMyIsIkNMQVNTX05BTUVfU0hPV0lORyQxIiwiQ0xBU1NfTkFNRV9ISURJTkciLCJDTEFTU19OQU1FX0JBQ0tEUk9QIiwiT1BFTl9TRUxFQ1RPUiIsIkVWRU5UX1NIT1ckMyIsIkVWRU5UX1NIT1dOJDMiLCJFVkVOVF9ISURFJDMiLCJFVkVOVF9ISURFX1BSRVZFTlRFRCIsIkVWRU5UX0hJRERFTiQzIiwiRVZFTlRfUkVTSVpFIiwiRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMSIsIkVWRU5UX0tFWURPV05fRElTTUlTUyIsIlNFTEVDVE9SX0RBVEFfVE9HR0xFJDEiLCJEZWZhdWx0JDUiLCJEZWZhdWx0VHlwZSQ1IiwiT2ZmY2FudmFzIiwiX0Jhc2VDb21wb25lbnQ3IiwiX3RoaXMzMSIsIl90aGlzMzIiLCJfdGhpczMzIiwiYmx1ciIsImNvbXBsZXRlQ2FsbGJhY2siLCJfdGhpczM0IiwiX3RoaXMzNSIsIl90aGlzMzYiLCJfaXRlcmF0b3IxNiIsIl9zdGVwMTYiLCJfaXRlcmF0b3IxNyIsIl9zdGVwMTciLCJBUklBX0FUVFJJQlVURV9QQVRURVJOIiwiRGVmYXVsdEFsbG93bGlzdCIsImFyZWEiLCJiciIsImNvbCIsImNvZGUiLCJkZCIsImRpdiIsImRsIiwiZHQiLCJlbSIsImhyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwibGkiLCJvbCIsInAiLCJwcmUiLCJzbWFsbCIsInNwYW4iLCJzdWIiLCJzdXAiLCJzdHJvbmciLCJ1IiwidWwiLCJ1cmlBdHRyaWJ1dGVzIiwiU0FGRV9VUkxfUEFUVEVSTiIsImFsbG93ZWRBdHRyaWJ1dGUiLCJhbGxvd2VkQXR0cmlidXRlTGlzdCIsImF0dHJpYnV0ZU5hbWUiLCJub2RlVmFsdWUiLCJhdHRyaWJ1dGVSZWdleCIsInJlZ2V4Iiwic2FuaXRpemVIdG1sIiwidW5zYWZlSHRtbCIsImFsbG93TGlzdCIsInNhbml0aXplRnVuY3Rpb24iLCJfcmVmNyIsImRvbVBhcnNlciIsIkRPTVBhcnNlciIsImNyZWF0ZWREb2N1bWVudCIsInBhcnNlRnJvbVN0cmluZyIsIl9pdGVyYXRvcjE4IiwiX3N0ZXAxOCIsIl9yZWY4IiwiZWxlbWVudE5hbWUiLCJhdHRyaWJ1dGVMaXN0IiwiYWxsb3dlZEF0dHJpYnV0ZXMiLCJfaXRlcmF0b3IxOSIsIl9zdGVwMTkiLCJpbm5lckhUTUwiLCJOQU1FJDUiLCJEZWZhdWx0JDQiLCJjb250ZW50IiwiZXh0cmFDbGFzcyIsInNhbml0aXplIiwic2FuaXRpemVGbiIsInRlbXBsYXRlIiwiRGVmYXVsdFR5cGUkNCIsIkRlZmF1bHRDb250ZW50VHlwZSIsImVudHJ5IiwiVGVtcGxhdGVGYWN0b3J5IiwiX0NvbmZpZzUiLCJfdGhpczM3IiwiZ2V0Q29udGVudCIsIl90aGlzMzgiLCJfcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24iLCJoYXNDb250ZW50IiwiY2hhbmdlQ29udGVudCIsIl9jaGVja0NvbnRlbnQiLCJ0b0h0bWwiLCJ0ZW1wbGF0ZVdyYXBwZXIiLCJfbWF5YmVTYW5pdGl6ZSIsIl9pNyIsIl9PYmplY3QkZW50cmllczUiLCJfT2JqZWN0JGVudHJpZXM1JF9pIiwiX3NldENvbnRlbnQiLCJfdGVtcGxhdGUkY2xhc3NMaXN0IiwiYXJnIiwiX2k4IiwiX09iamVjdCRlbnRyaWVzNiIsIl9PYmplY3QkZW50cmllczYkX2kiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJfcHV0RWxlbWVudEluVGVtcGxhdGUiLCJ0ZXh0Q29udGVudCIsIk5BTUUkNCIsIkRJU0FMTE9XRURfQVRUUklCVVRFUyIsIkNMQVNTX05BTUVfRkFERSQyIiwiQ0xBU1NfTkFNRV9NT0RBTCIsIkNMQVNTX05BTUVfU0hPVyQyIiwiU0VMRUNUT1JfVE9PTFRJUF9JTk5FUiIsIlNFTEVDVE9SX01PREFMIiwiRVZFTlRfTU9EQUxfSElERSIsIlRSSUdHRVJfSE9WRVIiLCJUUklHR0VSX0ZPQ1VTIiwiVFJJR0dFUl9DTElDSyIsIlRSSUdHRVJfTUFOVUFMIiwiRVZFTlRfSElERSQyIiwiRVZFTlRfSElEREVOJDIiLCJFVkVOVF9TSE9XJDIiLCJFVkVOVF9TSE9XTiQyIiwiRVZFTlRfSU5TRVJURUQiLCJFVkVOVF9DTElDSyQxIiwiRVZFTlRfRk9DVVNJTiQxIiwiRVZFTlRfRk9DVVNPVVQkMSIsIkVWRU5UX01PVVNFRU5URVIiLCJFVkVOVF9NT1VTRUxFQVZFIiwiQXR0YWNobWVudE1hcCIsIkFVVE8iLCJUT1AiLCJSSUdIVCIsIkJPVFRPTSIsIkxFRlQiLCJEZWZhdWx0JDMiLCJhbmltYXRpb24iLCJjb250YWluZXIiLCJjdXN0b21DbGFzcyIsImRlbGF5IiwidGl0bGUiLCJEZWZhdWx0VHlwZSQzIiwiVG9vbHRpcCIsIl9CYXNlQ29tcG9uZW50OCIsIl90aGlzMzkiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaXNIb3ZlcmVkIiwiX2FjdGl2ZVRyaWdnZXIiLCJfdGVtcGxhdGVGYWN0b3J5IiwiX25ld0NvbnRlbnQiLCJ0aXAiLCJfc2V0TGlzdGVuZXJzIiwiX2ZpeFRpdGxlIiwiZW5hYmxlIiwiZGlzYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJjbGljayIsIl9sZWF2ZSIsIl9lbnRlciIsIl9oaWRlTW9kYWxIYW5kbGVyIiwiX2Rpc3Bvc2VQb3BwZXIiLCJfdGhpczQwIiwiX2lzV2l0aENvbnRlbnQiLCJzaGFkb3dSb290IiwiaXNJblRoZURvbSIsIl9nZXRUaXBFbGVtZW50IiwiX3JlZjkiLCJfaXRlcmF0b3IyMCIsIl9zdGVwMjAiLCJfdGhpczQxIiwiX3JlZjEwIiwiX2l0ZXJhdG9yMjEiLCJfc3RlcDIxIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZ2V0VGl0bGUiLCJfY3JlYXRlVGlwRWxlbWVudCIsIl9nZXRDb250ZW50Rm9yVGVtcGxhdGUiLCJfZ2V0VGVtcGxhdGVGYWN0b3J5IiwidGlwSWQiLCJzZXRDb250ZW50IiwiX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsImF0dGFjaG1lbnQiLCJfdGhpczQyIiwiX3RoaXM0MyIsIl90aGlzNDQiLCJ0cmlnZ2VycyIsIl9pdGVyYXRvcjIyIiwiX3N0ZXAyMiIsImV2ZW50SW4iLCJldmVudE91dCIsIl90aGlzNDUiLCJfc2V0VGltZW91dCIsIl90aGlzNDYiLCJ0aW1lb3V0IiwiZGF0YUF0dHJpYnV0ZXMiLCJfaTkiLCJfT2JqZWN0JGtleXMyIiwiZGF0YUF0dHJpYnV0ZSIsIl9pMTAiLCJfT2JqZWN0JGVudHJpZXM3IiwiX09iamVjdCRlbnRyaWVzNyRfaSIsIk5BTUUkMyIsIlNFTEVDVE9SX1RJVExFIiwiU0VMRUNUT1JfQ09OVEVOVCIsIkRlZmF1bHQkMiIsIkRlZmF1bHRUeXBlJDIiLCJQb3BvdmVyIiwiX1Rvb2x0aXAiLCJfZ2V0Q29udGVudCIsIk5BTUUkMiIsIkRBVEFfS0VZJDIiLCJFVkVOVF9LRVkkMiIsIkRBVEFfQVBJX0tFWSIsIkVWRU5UX0FDVElWQVRFIiwiRVZFTlRfQ0xJQ0siLCJFVkVOVF9MT0FEX0RBVEFfQVBJJDEiLCJDTEFTU19OQU1FX0RST1BET1dOX0lURU0iLCJDTEFTU19OQU1FX0FDVElWRSQxIiwiU0VMRUNUT1JfREFUQV9TUFkiLCJTRUxFQ1RPUl9UQVJHRVRfTElOS1MiLCJTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCIsIlNFTEVDVE9SX05BVl9MSU5LUyIsIlNFTEVDVE9SX05BVl9JVEVNUyIsIlNFTEVDVE9SX0xJU1RfSVRFTVMiLCJTRUxFQ1RPUl9MSU5LX0lURU1TIiwiU0VMRUNUT1JfRFJPUERPV04iLCJTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUkMSIsIkRlZmF1bHQkMSIsInJvb3RNYXJnaW4iLCJzbW9vdGhTY3JvbGwiLCJ0aHJlc2hvbGQiLCJEZWZhdWx0VHlwZSQxIiwiU2Nyb2xsU3B5IiwiX0Jhc2VDb21wb25lbnQ5IiwiX3RoaXM0NyIsIl90YXJnZXRMaW5rcyIsIl9vYnNlcnZhYmxlU2VjdGlvbnMiLCJfcm9vdEVsZW1lbnQiLCJfYWN0aXZlVGFyZ2V0IiwiX29ic2VydmVyIiwiX3ByZXZpb3VzU2Nyb2xsRGF0YSIsInZpc2libGVFbnRyeVRvcCIsInBhcmVudFNjcm9sbFRvcCIsInJlZnJlc2giLCJfaW5pdGlhbGl6ZVRhcmdldHNBbmRPYnNlcnZhYmxlcyIsIl9tYXliZUVuYWJsZVNtb290aFNjcm9sbCIsImRpc2Nvbm5lY3QiLCJfZ2V0TmV3T2JzZXJ2ZXIiLCJfaXRlcmF0b3IyMyIsIl9zdGVwMjMiLCJzZWN0aW9uIiwib2JzZXJ2ZSIsIl90aGlzNDgiLCJvYnNlcnZhYmxlU2VjdGlvbiIsInNjcm9sbFRvIiwiYmVoYXZpb3IiLCJfdGhpczQ5IiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJfb2JzZXJ2ZXJDYWxsYmFjayIsIl90aGlzNTAiLCJ0YXJnZXRFbGVtZW50IiwiX3Byb2Nlc3MiLCJ1c2VyU2Nyb2xsc0Rvd24iLCJfaXRlcmF0b3IyNCIsIl9zdGVwMjQiLCJpc0ludGVyc2VjdGluZyIsIl9jbGVhckFjdGl2ZUNsYXNzIiwiZW50cnlJc0xvd2VyVGhhblByZXZpb3VzIiwidGFyZ2V0TGlua3MiLCJfaXRlcmF0b3IyNSIsIl9zdGVwMjUiLCJhbmNob3IiLCJkZWNvZGVVUkkiLCJfYWN0aXZhdGVQYXJlbnRzIiwiX2l0ZXJhdG9yMjYiLCJfc3RlcDI2IiwibGlzdEdyb3VwIiwiX2l0ZXJhdG9yMjciLCJfc3RlcDI3IiwiYWN0aXZlTm9kZXMiLCJfaXRlcmF0b3IyOCIsIl9zdGVwMjgiLCJfaXRlcmF0b3IyOSIsIl9zdGVwMjkiLCJzcHkiLCJOQU1FJDEiLCJEQVRBX0tFWSQxIiwiRVZFTlRfS0VZJDEiLCJFVkVOVF9ISURFJDEiLCJFVkVOVF9ISURERU4kMSIsIkVWRU5UX1NIT1ckMSIsIkVWRU5UX1NIT1dOJDEiLCJFVkVOVF9DTElDS19EQVRBX0FQSSIsIkVWRU5UX0tFWURPV04iLCJFVkVOVF9MT0FEX0RBVEFfQVBJIiwiQVJST1dfTEVGVF9LRVkiLCJBUlJPV19SSUdIVF9LRVkiLCJBUlJPV19VUF9LRVkiLCJBUlJPV19ET1dOX0tFWSIsIkhPTUVfS0VZIiwiRU5EX0tFWSIsIkNMQVNTX05BTUVfQUNUSVZFIiwiQ0xBU1NfTkFNRV9GQURFJDEiLCJDTEFTU19OQU1FX1NIT1ckMSIsIkNMQVNTX0RST1BET1dOIiwiU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFIiwiU0VMRUNUT1JfRFJPUERPV05fTUVOVSIsIk5PVF9TRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUiLCJTRUxFQ1RPUl9UQUJfUEFORUwiLCJTRUxFQ1RPUl9PVVRFUiIsIlNFTEVDVE9SX0lOTkVSIiwiU0VMRUNUT1JfREFUQV9UT0dHTEUiLCJTRUxFQ1RPUl9JTk5FUl9FTEVNIiwiU0VMRUNUT1JfREFUQV9UT0dHTEVfQUNUSVZFIiwiVGFiIiwiX0Jhc2VDb21wb25lbnQxMCIsIl90aGlzNTEiLCJfc2V0SW5pdGlhbEF0dHJpYnV0ZXMiLCJfZ2V0Q2hpbGRyZW4iLCJpbm5lckVsZW0iLCJfZWxlbUlzQWN0aXZlIiwiYWN0aXZlIiwiX2dldEFjdGl2ZUVsZW0iLCJfZGVhY3RpdmF0ZSIsIl9hY3RpdmF0ZSIsInJlbGF0ZWRFbGVtIiwiX3RoaXM1MiIsIl90b2dnbGVEcm9wRG93biIsIl90aGlzNTMiLCJuZXh0QWN0aXZlRWxlbWVudCIsInByZXZlbnRTY3JvbGwiLCJfdGhpczU0IiwiX3NldEF0dHJpYnV0ZUlmTm90RXhpc3RzIiwiX2l0ZXJhdG9yMzAiLCJfc3RlcDMwIiwiX3NldEluaXRpYWxBdHRyaWJ1dGVzT25DaGlsZCIsIl9nZXRJbm5lckVsZW1lbnQiLCJpc0FjdGl2ZSIsIm91dGVyRWxlbSIsIl9nZXRPdXRlckVsZW1lbnQiLCJfc2V0SW5pdGlhbEF0dHJpYnV0ZXNPblRhcmdldFBhbmVsIiwib3BlbiIsIl9pdGVyYXRvcjMxIiwiX3N0ZXAzMSIsIkVWRU5UX01PVVNFT1ZFUiIsIkVWRU5UX01PVVNFT1VUIiwiRVZFTlRfRk9DVVNJTiIsIkVWRU5UX0ZPQ1VTT1VUIiwiRVZFTlRfSElERSIsIkVWRU5UX0hJRERFTiIsIkVWRU5UX1NIT1ciLCJFVkVOVF9TSE9XTiIsIkNMQVNTX05BTUVfRkFERSIsIkNMQVNTX05BTUVfSElERSIsIkNMQVNTX05BTUVfU0hPVyIsIkNMQVNTX05BTUVfU0hPV0lORyIsImF1dG9oaWRlIiwiVG9hc3QiLCJfQmFzZUNvbXBvbmVudDExIiwiX3RoaXM1NSIsIl9oYXNNb3VzZUludGVyYWN0aW9uIiwiX2hhc0tleWJvYXJkSW50ZXJhY3Rpb24iLCJfdGhpczU2IiwiX2NsZWFyVGltZW91dCIsIl9tYXliZVNjaGVkdWxlSGlkZSIsIl90aGlzNTciLCJpc1Nob3duIiwiX3RoaXM1OCIsIl9vbkludGVyYWN0aW9uIiwiaXNJbnRlcmFjdGluZyIsIl90aGlzNTkiLCJpbmRleF91bWQiLCJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsInciLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiYXJyYXkiLCJjbGFzczJ0eXBlIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImRvYyIsInNjcmlwdCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwicmh0bWxTdWZmaXgiLCJpbml0IiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwiaiIsInNwbGljZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwiaXNSZWFkeSIsIm1zZyIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwiaXNBcnJheUxpa2UiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsImlzWE1MRG9jIiwibmFtZXNwYWNlVVJJIiwiZG9jRWxlbSIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrSW52ZXJzZSIsImNhbGxiYWNrRXhwZWN0IiwiZ3VpZCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwicG9wIiwid2hpdGVzcGFjZSIsInJ0cmltQ1NTIiwiYnVwIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwiZXNjYXBlU2VsZWN0b3IiLCJwcmVmZXJyZWREb2MiLCJwdXNoTmF0aXZlIiwiRXhwciIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsImRpcnJ1bnMiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJib29sZWFucyIsImlkZW50aWZpZXIiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJyY29tbWEiLCJybGVhZGluZ0NvbWJpbmF0b3IiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidW5sb2FkSGFuZGxlciIsInNldERvY3VtZW50IiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsInNhZmVBY3RpdmVFbGVtZW50IiwiY2hpbGROb2RlcyIsImVscyIsInNlZWQiLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJleGVjIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0ZXN0Q29udGV4dCIsInNjb3BlIiwidG9rZW5pemUiLCJ0b1NlbGVjdG9yIiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic3ViV2luZG93Iiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNzc0hhcyIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJpbnB1dCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJleHByIiwibWF0Y2hlc1NlbGVjdG9yIiwiYXR0ckhhbmRsZSIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwiZXhwZWN0ZWROb2RlTmFtZSIsInBhdHRlcm4iLCJvcGVyYXRvciIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJkaWZmIiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJub3QiLCJtYXRjaGVyIiwiY29tcGlsZSIsInVubWF0Y2hlZCIsImxhbmciLCJlbGVtTGFuZyIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiY2hlY2tlZCIsIm5leHRTaWJsaW5nIiwiaGVhZGVyIiwiX21hdGNoSW5kZXhlcyIsImx0IiwiZ3QiLCJudGgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5IiwidG9rZW5zIiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJtYXRjaGVyT3V0IiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInRva2VuIiwiY29tcGlsZWQiLCJ1bmlxdWUiLCJnZXRUZXh0IiwiaXNYTUwiLCJzZWxlY3RvcnMiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwic2VsZiIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjb250ZW50cyIsInRhcmdldHMiLCJsIiwiY3VyIiwicHJldkFsbCIsImFkZEJhY2siLCJzaWJsaW5nIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiY3JlYXRlT3B0aW9ucyIsIl8iLCJmbGFnIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImxvY2siLCJmaXJlV2l0aCIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJwcm9taXNlIiwiZmFpbCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsImFsd2F5cyIsImRlZmVycmVkIiwiX2NhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInJlamVjdFdpdGgiLCJnZXRFcnJvckhvb2siLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJwcmltYXJ5IiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwiYXN5bmNFcnJvciIsIndhcm4iLCJtZXNzYWdlIiwic3RhY2siLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsIndhaXQiLCJjb21wbGV0ZWQiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiYXR0cnMiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwidW5zaGlmdCIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwidG1wIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5Iiwic2hvd0hpZGUiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJvcHRpb24iLCJ3cmFwTWFwIiwidGhlYWQiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJvcHRncm91cCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInJodG1sIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwiYXR0YWNoZWQiLCJub2RlcyIsImNyZWF0ZVRleHROb2RlIiwiaHRtbFByZWZpbHRlciIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwidHlwZXMiLCJvcmlnRm4iLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwidCIsImhhbmRsZU9iaiIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiY3JlYXRlIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwicHJlRGlzcGF0Y2giLCJjdXJyZW50VGFyZ2V0Iiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsImxldmVyYWdlTmF0aXZlIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc1NldHVwIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcm9wcyIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInZpZXciLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WSIsInBvaW50ZXJJZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsIndoaWNoIiwiZm9jdXNNYXBwZWRIYW5kbGVyIiwiZG9jdW1lbnRNb2RlIiwic2ltdWxhdGUiLCJhdHRhY2hlcyIsImRhdGFIb2xkZXIiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJwZGF0YU9sZCIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsInJjdXN0b21Qcm9wIiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwic3dhcCIsIm9sZCIsInJib3hTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm1lYXN1cmUiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbEJveFN0eWxlcyIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImN1ckNTUyIsImNvbXB1dGVkIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImlzQ3VzdG9tUHJvcCIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJ2ZW5kb3JQcm9wTmFtZSIsImNhcE5hbWUiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsInJkaXNwbGF5c3dhcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiYm94IiwiaXNCb3JkZXJCb3giLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJtYXJnaW5EZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwiYm94U2l6aW5nTmVlZGVkIiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VTbGljZSIsImNvbHVtbkNvdW50IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1N0YXJ0IiwibGluZUhlaWdodCIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0Zpbml0ZSIsInNjcm9sbGJveFNpemVCdWdneSIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJUd2VlbiIsImVhc2luZyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsIm9wdHMiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImFuaW0iLCJkYXRhU2hvdyIsInVucXVldWVkIiwicHJvcEZpbHRlciIsInNwZWNpYWxFYXNpbmciLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJ0aW1lciIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsInRpbWUiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsImFkZENsYXNzIiwiY2xhc3NOYW1lcyIsImN1clZhbHVlIiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJwYXJzZXJFcnJvckVsZW0iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93IiwidHJpZ2dlckhhbmRsZXIiLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjb252IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiYWpheFNldHVwIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJtb2RpZmllZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ0ZXh0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJwYXJlbnRPZmZzZXQiLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInJ0cmltIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUFBLENBQUMsQ0FBQyxZQUFZO0VBQ1ZDLCtCQUErQixDQUFDLENBQUM7O0VBRWpDO0VBQ0FELENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDRSxNQUFNLENBQUMsWUFBWTtJQUN0Q0QsK0JBQStCLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7O0VBRUY7RUFDQUQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUNHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsWUFBWTtJQUN4Q0Msa0JBQWtCLENBQUNKLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUMvQixDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7O0FBRUY7QUFDQSxTQUFTQywrQkFBK0JBLENBQUEsRUFBRztFQUN2Q0QsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDLENBQUNLLElBQUksQ0FBQyxZQUFZO0lBQ3BETCxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUNNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQyxLQUFLLE1BQU0sR0FDcERQLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDUSxJQUFJLENBQUMsQ0FBQyxHQUM3QlIsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUNTLElBQUksQ0FB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O0VBQ0E7RUFDQTs7RUFFQSxJQUFLLE9BQU9PLE1BQU0sS0FBSyxVQUFVLElBQUlBLE1BQU0sQ0FBQ0MsR0FBRyxFQUFHO0lBQ2pERCxNQUFNLENBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxZQUFXO01BQ2hDLE9BQU9oOUUsTUFBTTtJQUNkLENBQUUsQ0FBQztFQUNKO0VBS0E7SUFFQztJQUNBazlFLE9BQU8sR0FBRzFnRixNQUFNLENBQUN3RCxNQUFNO0lBRXZCO0lBQ0FtOUUsRUFBRSxHQUFHM2dGLE1BQU0sQ0FBQ3ZCLENBQUM7RUFFZCtFLE1BQU0sQ0FBQzBoQixVQUFVLEdBQUcsVUFBVTBpQyxJQUFJLEVBQUc7SUFDcEMsSUFBSzVuRCxNQUFNLENBQUN2QixDQUFDLEtBQUsrRSxNQUFNLEVBQUc7TUFDMUJ4RCxNQUFNLENBQUN2QixDQUFDLEdBQUdraUYsRUFBRTtJQUNkO0lBRUEsSUFBSy80QixJQUFJLElBQUk1bkQsTUFBTSxDQUFDd0QsTUFBTSxLQUFLQSxNQUFNLEVBQUc7TUFDdkN4RCxNQUFNLENBQUN3RCxNQUFNLEdBQUdrOUUsT0FBTztJQUN4QjtJQUVBLE9BQU9sOUUsTUFBTTtFQUNkLENBQUM7O0VBRUQ7RUFDQTtFQUNBO0VBQ0EsSUFBSyxPQUFPd2hELFFBQVEsS0FBSyxXQUFXLEVBQUc7SUFDdENobEQsTUFBTSxDQUFDd0QsTUFBTSxHQUFHeEQsTUFBTSxDQUFDdkIsQ0FBQyxHQUFHK0UsTUFBTTtFQUNsQztFQUtBLE9BQU9BLE1BQU07QUFDYixDQUFFLENBQUMiLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIkKGZ1bmN0aW9uICgpIHtcclxuICAgIHRvZ2dsZUNvbm5lY3Rpb25TdHJpbmdBbmRQcmVmaXgoKTtcclxuXHJcbiAgICAvLyBTaG93IGhpZGUgdGhlIGNvbm5lY3Rpb24gc3RyaW5nIHdoZW4gYSBwcm92aWRlciBpcyBzZWxlY3RlZFxyXG4gICAgJChcIiNEYXRhYmFzZVByb3ZpZGVyXCIpLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdG9nZ2xlQ29ubmVjdGlvblN0cmluZ0FuZFByZWZpeCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmVmcmVzaCB0aGUgcmVjaXBlIGRlc2NyaXB0aW9uXHJcbiAgICAkKFwiI3JlY2lwZXMgZGl2IGFcIikub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJlZnJlc2hEZXNjcmlwdGlvbigkKHRoaXMpKTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbi8vIFNob3cgb3IgaGlkZSB0aGUgY29ubmVjdGlvbiBzdHJpbmcgb3IgdGFibGUgcHJlZml4IHNlY3Rpb24gd2hlbiB0aGUgZGF0YWJhc2UgcHJvdmlkZXIgaXMgc2VsZWN0ZWRcclxuZnVuY3Rpb24gdG9nZ2xlQ29ubmVjdGlvblN0cmluZ0FuZFByZWZpeCgpIHtcclxuICAgICQoXCIjRGF0YWJhc2VQcm92aWRlciBvcHRpb246c2VsZWN0ZWRcIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5kYXRhKFwiY29ubmVjdGlvbi1zdHJpbmdcIikudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCJcclxuICAgICAgICAgICAgPyAkKFwiLmNvbm5lY3Rpb25TdHJpbmdcIikuc2hvdygpXHJcbiAgICAgICAgICAgIDogJChcIi5jb25uZWN0aW9uU3RyaW5nXCIpLmhpZGUoKTtcclxuXHJcbiAgICAgICAgJCh0aGlzKS5kYXRhKFwidGFibGUtcHJlZml4XCIpLnRvTG93ZXJDYXNlKCkgPT09IFwidHJ1ZVwiXHJcbiAgICAgICAgICAgID8gJChcIi50YWJsZVByZWZpeFwiKS5zaG93KClcclxuICAgICAgICAgICAgOiAkKFwiLnRhYmxlUHJlZml4XCIpLmhpZGUoKTtcclxuICAgICAgICBcclxuICAgICAgICAkKHRoaXMpLmRhdGEoXCJjb25uZWN0aW9uLXN0cmluZ1wiKS50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIlxyXG4gICAgICAgICAgICA/ICQoXCIucHdkXCIpLmF0dHIoJ3JlcXVpcmVkJywgJ3JlcXVpcmVkJylcclxuICAgICAgICAgICAgOiAkKFwiLnB3ZFwiKS5yZW1vdmVBdHRyKCdyZXF1aXJlZCcpO1xyXG5cclxuICAgICAgICAkKFwiI2Nvbm5lY3Rpb25TdHJpbmdIaW50XCIpLnRleHQoJCh0aGlzKS5kYXRhKFwiY29ubmVjdGlvbi1zdHJpbmctc2FtcGxlXCIpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyBTaG93IHRoZSByZWNpcGUgZGVzY3JpcHRpb25cclxuZnVuY3Rpb24gcmVmcmVzaERlc2NyaXB0aW9uKHRhcmdldCkge1xyXG4gICAgdmFyIHJlY2lwZU5hbWUgPSAkKHRhcmdldCkuZGF0YShcInJlY2lwZS1uYW1lXCIpO1xyXG4gICAgdmFyIHJlY2lwZURpc3BsYXlOYW1lID0gJCh0YXJnZXQpLmRhdGEoXCJyZWNpcGUtZGlzcGxheS1uYW1lXCIpO1xyXG4gICAgdmFyIHJlY2lwZURlc2NyaXB0aW9uID0gJCh0YXJnZXQpLmRhdGEoXCJyZWNpcGUtZGVzY3JpcHRpb25cIik7XHJcbiAgICAkKFwiI3JlY2lwZUJ1dHRvblwiKS50ZXh0KHJlY2lwZURpc3BsYXlOYW1lKTtcclxuICAgICQoXCIjUmVjaXBlTmFtZVwiKS52YWwocmVjaXBlTmFtZSk7XHJcbiAgICAkKFwiI3JlY2lwZUJ1dHRvblwiKS5hdHRyKFwidGl0bGVcIiwgcmVjaXBlRGVzY3JpcHRpb24pO1xyXG4gICAgJChcIiNyZWNpcGVCdXR0b25cIikuZm9jdXMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0TG9jYWxpemF0aW9uVXJsKCkge1xyXG4gICAgdmFyIGN1bHR1cmVzTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdWx0dXJlc0xpc3QnKTtcclxuICAgIHdpbmRvdy5sb2NhdGlvbiA9IGN1bHR1cmVzTGlzdC5vcHRpb25zW2N1bHR1cmVzTGlzdC5zZWxlY3RlZEluZGV4XS5kYXRhc2V0LnVybDtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlUGFzc3dvcmRWaXNpYmlsaXR5KHBhc3N3b3JkQ3RsLCB0b2dnbGVQYXNzd29yZEN0bClcclxue1xyXG4gICAgLy8gdG9nZ2xlIHRoZSB0eXBlIGF0dHJpYnV0ZVxyXG4gICAgdHlwZSA9IHBhc3N3b3JkQ3RsLmdldEF0dHJpYnV0ZSgndHlwZScpID09PSAncGFzc3dvcmQnID8gJ3RleHQnIDogJ3Bhc3N3b3JkJztcclxuICAgIHBhc3N3b3JkQ3RsLnNldEF0dHJpYnV0ZSgndHlwZScsIHR5cGUpO1xyXG5cclxuICAgIC8vIHRvZ2dsZSB0aGUgZXllIHNsYXNoIGljb25cclxuICAgIGljb24gPSB0b2dnbGVQYXNzd29yZEN0bC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpY29uJylbMF07XHJcbiAgICBpZihpY29uLmdldEF0dHJpYnV0ZSgnZGF0YS1pY29uJykpeyAvLyBpZiB0aGUgaWNvbiBpcyByZW5kZXJlZCBhcyBhIHN2Z1xyXG4gICAgICAgIHR5cGUgPT09ICdwYXNzd29yZCcgPyBpY29uLnNldEF0dHJpYnV0ZSgnZGF0YS1pY29uJywgJ2V5ZScpIDogaWNvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWNvbicsICdleWUtc2xhc2gnKTtcclxuICAgIH1cclxuICAgIGVsc2V7IC8vIGlmIHRoZSBpY29uIGlzIHN0aWxsIGEgPGk+IGVsZW1lbnRcclxuICAgICAgICB0eXBlID09PSAncGFzc3dvcmQnID8gaWNvbi5jbGFzc0xpc3QucmVtb3ZlKCdmYS1leWUtc2xhc2gnKSA6IGljb24uY2xhc3NMaXN0LnJlbW92ZSgnZmEtZXllJyk7XHJcbiAgICAgICAgdHlwZSA9PT0gJ3Bhc3N3b3JkJyA/IGljb24uY2xhc3NMaXN0LmFkZCgnZmEtZXllJykgOiBpY29uLmNsYXNzTGlzdC5hZGQoJ2ZhLWV5ZS1zbGFzaCcpO1xyXG4gICAgfVxyXG59XHJcbiIsIihmdW5jdGlvbiAoJCkge1xyXG5cclxuICAgICQuZm4uc3RyZW5ndGggPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cclxuICAgICAgICB2YXIgc2V0dGluZ3MgPSAkLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIG1pbkxlbmd0aDogOCxcclxuICAgICAgICAgICAgdXBwZXJDYXNlOiBmYWxzZSxcclxuICAgICAgICAgICAgbG93ZXJDYXNlOiBmYWxzZSxcclxuICAgICAgICAgICAgbnVtYmVyczogZmFsc2UsXHJcbiAgICAgICAgICAgIHNwZWNpYWxjaGFyczogZmFsc2UsXHJcbiAgICAgICAgICAgIHRhcmdldDogJycsXHJcbiAgICAgICAgICAgIHN0eWxlOiAnJ1xyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgdmFyIGNhcGl0YWxsZXR0ZXJzID0gMDtcclxuICAgICAgICB2YXIgbG93ZXJsZXR0ZXJzID0gMDtcclxuICAgICAgICB2YXIgbnVtYmVycyA9IDA7XHJcbiAgICAgICAgdmFyIHNwZWNpYWxjaGFycyA9IDA7XHJcblxyXG4gICAgICAgIHZhciB1cHBlckNhc2UgPSBuZXcgUmVnRXhwKCdbQS1aXScpO1xyXG4gICAgICAgIHZhciBsb3dlckNhc2UgPSBuZXcgUmVnRXhwKCdbYS16XScpO1xyXG4gICAgICAgIHZhciBudW1iZXIgPSBuZXcgUmVnRXhwKCdbMC05XScpO1xyXG4gICAgICAgIHZhciBzcGVjaWFsY2hhciA9IG5ldyBSZWdFeHAoJ1teQS1aYS16MC05XScpO1xyXG5cclxuICAgICAgICB2YXIgdmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgY3JlYXRlUHJvZ3Jlc3NCYXIoMCwgJycpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQZXJjZW50YWdlKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuICgoYiAvIGEpICogMTAwKS50b0ZpeGVkKDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TGV2ZWwodmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAxMDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImJnLXN1Y2Nlc3NcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlID49IDUwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJiZy13YXJuaW5nXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7IC8vIGdyYXllZFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gXCJiZy1kYW5nZXJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrU3RyZW5ndGgodmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgIG1pbkxlbmd0aCA9IHZhbHVlLmxlbmd0aCA+PSBzZXR0aW5ncy5taW5MZW5ndGggPyAxIDogMDtcclxuICAgICAgICAgICAgY2FwaXRhbGxldHRlcnMgPSAhc2V0dGluZ3MudXBwZXJDYXNlIHx8IHZhbHVlLm1hdGNoKHVwcGVyQ2FzZSkgPyAxIDogMDtcclxuICAgICAgICAgICAgbG93ZXJsZXR0ZXJzID0gIXNldHRpbmdzLmxvd2VyQ2FzZSB8fCB2YWx1ZS5tYXRjaChsb3dlckNhc2UpID8gMSA6IDA7XHJcbiAgICAgICAgICAgIG51bWJlcnMgPSAhc2V0dGluZ3MubnVtYmVycyB8fCB2YWx1ZS5tYXRjaChudW1iZXIpID8gMSA6IDA7XHJcbiAgICAgICAgICAgIHNwZWNpYWxjaGFycyA9ICFzZXR0aW5ncy5zcGVjaWFsY2hhcnMgfHwgdmFsdWUubWF0Y2goc3BlY2lhbGNoYXIpID8gMSA6IDA7XHJcblxyXG4gICAgICAgICAgICB2YXIgdG90YWwgPSBtaW5MZW5ndGggKyBjYXBpdGFsbGV0dGVycyArIGxvd2VybGV0dGVycyArIG51bWJlcnMgKyBzcGVjaWFsY2hhcnM7XHJcbiAgICAgICAgICAgIHZhciBwZXJjZW50YWdlID0gZ2V0UGVyY2VudGFnZSg1LCB0b3RhbCk7XHJcblxyXG4gICAgICAgICAgICB2YWxpZCA9IHBlcmNlbnRhZ2UgPj0gMTAwO1xyXG5cclxuICAgICAgICAgICAgY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSwgZ2V0TGV2ZWwocGVyY2VudGFnZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSwgbGV2ZWwpIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gJCgnPGRpdiBjbGFzcz1cInByb2dyZXNzXCIgdmFsdWU9XCInICsgcGVyY2VudGFnZSArICdcIiBzdHlsZT1cIicgKyBzZXR0aW5ncy5zdHlsZSArICdcIiBtYXg9XCIxMDBcIiBhcmlhLWRlc2NyaWJlZGJ5PVwiXCI+PGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciAnICsgbGV2ZWwgKyAnXCIgcm9sZT1cInByb2dyZXNzLWJhclwiIHN0eWxlPVwid2lkdGg6ICcgKyBwZXJjZW50YWdlICsgJyU7XCI+PC9kaXY+PC9kaXY+Jyk7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHNldHRpbmdzLnRhcmdldCk7XHJcbiAgICAgICAgICAgIHRhcmdldC5lbXB0eSgpO1xyXG4gICAgICAgICAgICB0YXJnZXQuYXBwZW5kKGVsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYmluZCgna2V5dXAga2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBjaGVja1N0cmVuZ3RoKCQodGhpcykudmFsKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYmluZCgnZHJvcCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBjaGVja1N0cmVuZ3RoKGV2ZW50Lm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ0ZXh0XCIpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5wYXJlbnRzKCdmb3JtJykub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufShqUXVlcnkpKTtcclxuICAgICIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFdpbmRvdyB9IGZyb20gJy4uL3R5cGVzJztcbmRlY2xhcmUgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGU6IE5vZGUgfCBXaW5kb3cpOiBXaW5kb3c7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICBjb25zdCBvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cgOiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcblxuZGVjbGFyZSBmdW5jdGlvbiBpc0VsZW1lbnQobm9kZTogbWl4ZWQpOiBib29sZWFuICVjaGVja3Mobm9kZSBpbnN0YW5jZW9mXG4gIEVsZW1lbnQpO1xuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgY29uc3QgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5FbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG5cbmRlY2xhcmUgZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlOiBtaXhlZCk6IGJvb2xlYW4gJWNoZWNrcyhub2RlIGluc3RhbmNlb2ZcbiAgSFRNTEVsZW1lbnQpO1xuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlKSB7XG4gIGNvbnN0IE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmRlY2xhcmUgZnVuY3Rpb24gaXNTaGFkb3dSb290KG5vZGU6IG1peGVkKTogYm9vbGVhbiAlY2hlY2tzKG5vZGUgaW5zdGFuY2VvZlxuICBTaGFkb3dSb290KTtcbmZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlKSB7XG4gIC8vIElFIDExIGhhcyBubyBTaGFkb3dSb290XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5TaGFkb3dSb290O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbmV4cG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH07XG4iLCIvLyBAZmxvd1xuZXhwb3J0IGNvbnN0IG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IGNvbnN0IG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IGNvbnN0IHJvdW5kID0gTWF0aC5yb3VuZDtcbiIsIi8vIEBmbG93XG50eXBlIE5hdmlnYXRvciA9IE5hdmlnYXRvciAmIHsgdXNlckFnZW50RGF0YT86IE5hdmlnYXRvclVBRGF0YSB9O1xuXG5pbnRlcmZhY2UgTmF2aWdhdG9yVUFEYXRhIHtcbiAgYnJhbmRzOiBBcnJheTx7IGJyYW5kOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZyB9PjtcbiAgbW9iaWxlOiBib29sZWFuO1xuICBwbGF0Zm9ybTogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVQVN0cmluZygpOiBzdHJpbmcge1xuICBjb25zdCB1YURhdGEgPSAobmF2aWdhdG9yOiBOYXZpZ2F0b3IpLnVzZXJBZ2VudERhdGE7XG5cbiAgaWYgKHVhRGF0YT8uYnJhbmRzICYmIEFycmF5LmlzQXJyYXkodWFEYXRhLmJyYW5kcykpIHtcbiAgICByZXR1cm4gdWFEYXRhLmJyYW5kc1xuICAgICAgLm1hcCgoaXRlbSkgPT4gYCR7aXRlbS5icmFuZH0vJHtpdGVtLnZlcnNpb259YClcbiAgICAgIC5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0VUFTdHJpbmcgZnJvbSAnLi4vdXRpbHMvdXNlckFnZW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNMYXlvdXRWaWV3cG9ydCgpIHtcbiAgcmV0dXJuICEvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgQ2xpZW50UmVjdE9iamVjdCwgVmlydHVhbEVsZW1lbnQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tICcuL2luc3RhbmNlT2YnO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tICcuLi91dGlscy9tYXRoJztcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSAnLi9nZXRXaW5kb3cnO1xuaW1wb3J0IGlzTGF5b3V0Vmlld3BvcnQgZnJvbSAnLi9pc0xheW91dFZpZXdwb3J0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KFxuICBlbGVtZW50OiBFbGVtZW50IHwgVmlydHVhbEVsZW1lbnQsXG4gIGluY2x1ZGVTY2FsZTogYm9vbGVhbiA9IGZhbHNlLFxuICBpc0ZpeGVkU3RyYXRlZ3k6IGJvb2xlYW4gPSBmYWxzZVxuKTogQ2xpZW50UmVjdE9iamVjdCB7XG4gIGNvbnN0IGNsaWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBsZXQgc2NhbGVYID0gMTtcbiAgbGV0IHNjYWxlWSA9IDE7XG5cbiAgaWYgKGluY2x1ZGVTY2FsZSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgc2NhbGVYID1cbiAgICAgIChlbGVtZW50OiBIVE1MRWxlbWVudCkub2Zmc2V0V2lkdGggPiAwXG4gICAgICAgID8gcm91bmQoY2xpZW50UmVjdC53aWR0aCkgLyAoZWxlbWVudDogSFRNTEVsZW1lbnQpLm9mZnNldFdpZHRoIHx8IDFcbiAgICAgICAgOiAxO1xuICAgIHNjYWxlWSA9XG4gICAgICAoZWxlbWVudDogSFRNTEVsZW1lbnQpLm9mZnNldEhlaWdodCA+IDBcbiAgICAgICAgPyByb3VuZChjbGllbnRSZWN0LmhlaWdodCkgLyAoZWxlbWVudDogSFRNTEVsZW1lbnQpLm9mZnNldEhlaWdodCB8fCAxXG4gICAgICAgIDogMTtcbiAgfVxuXG4gIGNvbnN0IHsgdmlzdWFsVmlld3BvcnQgfSA9IGlzRWxlbWVudChlbGVtZW50KSA/IGdldFdpbmRvdyhlbGVtZW50KSA6IHdpbmRvdztcbiAgY29uc3QgYWRkVmlzdWFsT2Zmc2V0cyA9ICFpc0xheW91dFZpZXdwb3J0KCkgJiYgaXNGaXhlZFN0cmF0ZWd5O1xuXG4gIGNvbnN0IHggPVxuICAgIChjbGllbnRSZWN0LmxlZnQgK1xuICAgICAgKGFkZFZpc3VhbE9mZnNldHMgJiYgdmlzdWFsVmlld3BvcnQgPyB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0IDogMCkpIC9cbiAgICBzY2FsZVg7XG4gIGNvbnN0IHkgPVxuICAgIChjbGllbnRSZWN0LnRvcCArXG4gICAgICAoYWRkVmlzdWFsT2Zmc2V0cyAmJiB2aXN1YWxWaWV3cG9ydCA/IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcCA6IDApKSAvXG4gICAgc2NhbGVZO1xuICBjb25zdCB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGggLyBzY2FsZVg7XG4gIGNvbnN0IGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0IC8gc2NhbGVZO1xuXG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHRvcDogeSxcbiAgICByaWdodDogeCArIHdpZHRoLFxuICAgIGJvdHRvbTogeSArIGhlaWdodCxcbiAgICBsZWZ0OiB4LFxuICAgIHgsXG4gICAgeSxcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcbmltcG9ydCB0eXBlIHsgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZTogTm9kZSB8IFdpbmRvdykge1xuICBjb25zdCB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSB3aW4ucGFnZVhPZmZzZXQ7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcblxuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wLFxuICB9O1xufVxuIiwiLy8gQGZsb3dcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBlbGVtZW50LnNjcm9sbFRvcCxcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gJy4vZ2V0V2luZG93U2Nyb2xsJztcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSAnLi9nZXRXaW5kb3cnO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gJy4vaW5zdGFuY2VPZic7XG5pbXBvcnQgZ2V0SFRNTEVsZW1lbnRTY3JvbGwgZnJvbSAnLi9nZXRIVE1MRWxlbWVudFNjcm9sbCc7XG5pbXBvcnQgdHlwZSB7IFdpbmRvdyB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZVNjcm9sbChub2RlOiBOb2RlIHwgV2luZG93KSB7XG4gIGlmIChub2RlID09PSBnZXRXaW5kb3cobm9kZSkgfHwgIWlzSFRNTEVsZW1lbnQobm9kZSkpIHtcbiAgICByZXR1cm4gZ2V0V2luZG93U2Nyb2xsKG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRIVE1MRWxlbWVudFNjcm9sbChub2RlKTtcbiAgfVxufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlTmFtZShlbGVtZW50OiA/Tm9kZSB8IFdpbmRvdyk6ID9zdHJpbmcge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tICcuL2luc3RhbmNlT2YnO1xuaW1wb3J0IHR5cGUgeyBXaW5kb3cgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChcbiAgZWxlbWVudDogRWxlbWVudCB8IFdpbmRvd1xuKTogSFRNTEVsZW1lbnQge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gIHJldHVybiAoXG4gICAgKGlzRWxlbWVudChlbGVtZW50KVxuICAgICAgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnRcbiAgICAgIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudFxuICApLmRvY3VtZW50RWxlbWVudDtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0JztcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSAnLi9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tICcuL2dldFdpbmRvd1Njcm9sbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudDogRWxlbWVudCk6IG51bWJlciB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gKFxuICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpLmxlZnQgK1xuICAgIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0XG4gICk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoXG4gIGVsZW1lbnQ6IEVsZW1lbnRcbik6IENTU1N0eWxlRGVjbGFyYXRpb24ge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi9nZXRDb21wdXRlZFN0eWxlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTY3JvbGxQYXJlbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICBjb25zdCB7IG92ZXJmbG93LCBvdmVyZmxvd1gsIG92ZXJmbG93WSB9ID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBSZWN0LCBWaXJ0dWFsRWxlbWVudCwgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tICcuL2dldEJvdW5kaW5nQ2xpZW50UmVjdCc7XG5pbXBvcnQgZ2V0Tm9kZVNjcm9sbCBmcm9tICcuL2dldE5vZGVTY3JvbGwnO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gJy4vZ2V0Tm9kZU5hbWUnO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gJy4vaW5zdGFuY2VPZic7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tICcuL2dldFdpbmRvd1Njcm9sbEJhclgnO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tICcuL2dldERvY3VtZW50RWxlbWVudCc7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSAnLi9pc1Njcm9sbFBhcmVudCc7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnRTY2FsZWQoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHNjYWxlWCA9IHJvdW5kKHJlY3Qud2lkdGgpIC8gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAxO1xuICBjb25zdCBzY2FsZVkgPSByb3VuZChyZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxO1xuXG4gIHJldHVybiBzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxO1xufVxuXG4vLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wb3NpdGVSZWN0KFxuICBlbGVtZW50T3JWaXJ0dWFsRWxlbWVudDogRWxlbWVudCB8IFZpcnR1YWxFbGVtZW50LFxuICBvZmZzZXRQYXJlbnQ6IEVsZW1lbnQgfCBXaW5kb3csXG4gIGlzRml4ZWQ6IGJvb2xlYW4gPSBmYWxzZVxuKTogUmVjdCB7XG4gIGNvbnN0IGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICBjb25zdCBvZmZzZXRQYXJlbnRJc1NjYWxlZCA9XG4gICAgaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGlzRWxlbWVudFNjYWxlZChvZmZzZXRQYXJlbnQpO1xuICBjb25zdCBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgY29uc3QgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChcbiAgICBlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCxcbiAgICBvZmZzZXRQYXJlbnRJc1NjYWxlZCxcbiAgICBpc0ZpeGVkXG4gICk7XG5cbiAgbGV0IHNjcm9sbCA9IHsgc2Nyb2xsTGVmdDogMCwgc2Nyb2xsVG9wOiAwIH07XG4gIGxldCBvZmZzZXRzID0geyB4OiAwLCB5OiAwIH07XG5cbiAgaWYgKGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50IHx8ICghaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpKSB7XG4gICAgaWYgKFxuICAgICAgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudClcbiAgICApIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCwgdHJ1ZSk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gIH07XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBSZWN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tICcuL2dldEJvdW5kaW5nQ2xpZW50UmVjdCc7XG5cbi8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRMYXlvdXRSZWN0KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogUmVjdCB7XG4gIGNvbnN0IGNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7XG5cbiAgLy8gVXNlIHRoZSBjbGllbnRSZWN0IHNpemVzIGlmIGl0J3Mgbm90IGJlZW4gdHJhbnNmb3JtZWQuXG4gIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTIyM1xuICBsZXQgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICBsZXQgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3Qud2lkdGggLSB3aWR0aCkgPD0gMSkge1xuICAgIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aDtcbiAgfVxuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LmhlaWdodCAtIGhlaWdodCkgPD0gMSkge1xuICAgIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgeTogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tICcuL2dldE5vZGVOYW1lJztcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSAnLi9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50OiBOb2RlIHwgU2hhZG93Um9vdCk6IE5vZGUge1xuICBpZiAoZ2V0Tm9kZU5hbWUoZWxlbWVudCkgPT09ICdodG1sJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICAvLyB0aGlzIGlzIGEgcXVpY2tlciAoYnV0IGxlc3MgdHlwZSBzYWZlKSB3YXkgdG8gc2F2ZSBxdWl0ZSBzb21lIGJ5dGVzIGZyb20gdGhlIGJ1bmRsZVxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICBlbGVtZW50LmFzc2lnbmVkU2xvdCB8fCAvLyBzdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZVxuICAgIGVsZW1lbnQucGFyZW50Tm9kZSB8fCAvLyBET00gRWxlbWVudCBkZXRlY3RlZFxuICAgIChpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuICApO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gJy4vZ2V0UGFyZW50Tm9kZSc7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSAnLi9pc1Njcm9sbFBhcmVudCc7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSAnLi9nZXROb2RlTmFtZSc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGU6IE5vZGUpOiBIVE1MRWxlbWVudCB7XG4gIGlmIChbJ2h0bWwnLCAnYm9keScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGdldE5vZGVOYW1lKG5vZGUpKSA+PSAwKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KG5vZGUpICYmIGlzU2Nyb2xsUGFyZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUobm9kZSkpO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSAnLi9nZXRTY3JvbGxQYXJlbnQnO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSAnLi9nZXRQYXJlbnROb2RlJztcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSAnLi9nZXRXaW5kb3cnO1xuaW1wb3J0IHR5cGUgeyBXaW5kb3csIFZpc3VhbFZpZXdwb3J0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gJy4vaXNTY3JvbGxQYXJlbnQnO1xuXG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RTY3JvbGxQYXJlbnRzKFxuICBlbGVtZW50OiBOb2RlLFxuICBsaXN0OiBBcnJheTxFbGVtZW50IHwgV2luZG93PiA9IFtdXG4pOiBBcnJheTxFbGVtZW50IHwgV2luZG93IHwgVmlzdWFsVmlld3BvcnQ+IHtcbiAgY29uc3Qgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICBjb25zdCBpc0JvZHkgPSBzY3JvbGxQYXJlbnQgPT09IGVsZW1lbnQub3duZXJEb2N1bWVudD8uYm9keTtcbiAgY29uc3Qgd2luID0gZ2V0V2luZG93KHNjcm9sbFBhcmVudCk7XG4gIGNvbnN0IHRhcmdldCA9IGlzQm9keVxuICAgID8gW3dpbl0uY29uY2F0KFxuICAgICAgICB3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sXG4gICAgICAgIGlzU2Nyb2xsUGFyZW50KHNjcm9sbFBhcmVudCkgPyBzY3JvbGxQYXJlbnQgOiBbXVxuICAgICAgKVxuICAgIDogc2Nyb2xsUGFyZW50O1xuICBjb25zdCB1cGRhdGVkTGlzdCA9IGxpc3QuY29uY2F0KHRhcmdldCk7XG5cbiAgcmV0dXJuIGlzQm9keVxuICAgID8gdXBkYXRlZExpc3RcbiAgICA6IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBpc0JvZHkgdGVsbHMgdXMgdGFyZ2V0IHdpbGwgYmUgYW4gSFRNTEVsZW1lbnQgaGVyZVxuICAgICAgdXBkYXRlZExpc3QuY29uY2F0KGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUodGFyZ2V0KSkpO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tICcuL2dldE5vZGVOYW1lJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudDogRWxlbWVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSAnLi9nZXROb2RlTmFtZSc7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tICcuL2dldENvbXB1dGVkU3R5bGUnO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcbmltcG9ydCBpc1RhYmxlRWxlbWVudCBmcm9tICcuL2lzVGFibGVFbGVtZW50JztcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gJy4vZ2V0UGFyZW50Tm9kZSc7XG5pbXBvcnQgZ2V0VUFTdHJpbmcgZnJvbSAnLi4vdXRpbHMvdXNlckFnZW50JztcblxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50OiBFbGVtZW50KTogP0VsZW1lbnQge1xuICBpZiAoXG4gICAgIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHxcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzgzN1xuICAgIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCdcbiAgKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG59XG5cbi8vIGAub2Zmc2V0UGFyZW50YCByZXBvcnRzIGBudWxsYCBmb3IgZml4ZWQgZWxlbWVudHMsIHdoaWxlIGFic29sdXRlIGVsZW1lbnRzXG4vLyByZXR1cm4gdGhlIGNvbnRhaW5pbmcgYmxvY2tcbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50OiBFbGVtZW50KSB7XG4gIGNvbnN0IGlzRmlyZWZveCA9IC9maXJlZm94L2kudGVzdChnZXRVQVN0cmluZygpKTtcbiAgY29uc3QgaXNJRSA9IC9UcmlkZW50L2kudGVzdChnZXRVQVN0cmluZygpKTtcblxuICBpZiAoaXNJRSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgLy8gSW4gSUUgOSwgMTAgYW5kIDExIGZpeGVkIGVsZW1lbnRzIGNvbnRhaW5pbmcgYmxvY2sgaXMgYWx3YXlzIGVzdGFibGlzaGVkIGJ5IHRoZSB2aWV3cG9ydFxuICAgIGNvbnN0IGVsZW1lbnRDc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGlmIChlbGVtZW50Q3NzLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBsZXQgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuXG4gIGlmIChpc1NoYWRvd1Jvb3QoY3VycmVudE5vZGUpKSB7XG4gICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5ob3N0O1xuICB9XG5cbiAgd2hpbGUgKFxuICAgIGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmXG4gICAgWydodG1sJywgJ2JvZHknXS5pbmRleE9mKGdldE5vZGVOYW1lKGN1cnJlbnROb2RlKSkgPCAwXG4gICkge1xuICAgIGNvbnN0IGNzcyA9IGdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpO1xuXG4gICAgLy8gVGhpcyBpcyBub24tZXhoYXVzdGl2ZSBidXQgY292ZXJzIHRoZSBtb3N0IGNvbW1vbiBDU1MgcHJvcGVydGllcyB0aGF0XG4gICAgLy8gY3JlYXRlIGEgY29udGFpbmluZyBibG9jay5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ29udGFpbmluZ19ibG9jayNpZGVudGlmeWluZ190aGVfY29udGFpbmluZ19ibG9ja1xuICAgIGlmIChcbiAgICAgIGNzcy50cmFuc2Zvcm0gIT09ICdub25lJyB8fFxuICAgICAgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHxcbiAgICAgIGNzcy5jb250YWluID09PSAncGFpbnQnIHx8XG4gICAgICBbJ3RyYW5zZm9ybScsICdwZXJzcGVjdGl2ZSddLmluZGV4T2YoY3NzLndpbGxDaGFuZ2UpICE9PSAtMSB8fFxuICAgICAgKGlzRmlyZWZveCAmJiBjc3Mud2lsbENoYW5nZSA9PT0gJ2ZpbHRlcicpIHx8XG4gICAgICAoaXNGaXJlZm94ICYmIGNzcy5maWx0ZXIgJiYgY3NzLmZpbHRlciAhPT0gJ25vbmUnKVxuICAgICkge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudDogRWxlbWVudCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XG5cbiAgbGV0IG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7XG5cbiAgd2hpbGUgKFxuICAgIG9mZnNldFBhcmVudCAmJlxuICAgIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkgJiZcbiAgICBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnXG4gICkge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIGlmIChcbiAgICBvZmZzZXRQYXJlbnQgJiZcbiAgICAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2h0bWwnIHx8XG4gICAgICAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmXG4gICAgICAgIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpKVxuICApIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luZG93O1xufVxuIiwiLy8gQGZsb3dcbmV4cG9ydCBjb25zdCB0b3A6ICd0b3AnID0gJ3RvcCc7XG5leHBvcnQgY29uc3QgYm90dG9tOiAnYm90dG9tJyA9ICdib3R0b20nO1xuZXhwb3J0IGNvbnN0IHJpZ2h0OiAncmlnaHQnID0gJ3JpZ2h0JztcbmV4cG9ydCBjb25zdCBsZWZ0OiAnbGVmdCcgPSAnbGVmdCc7XG5leHBvcnQgY29uc3QgYXV0bzogJ2F1dG8nID0gJ2F1dG8nO1xuZXhwb3J0IHR5cGUgQmFzZVBsYWNlbWVudCA9XG4gIHwgdHlwZW9mIHRvcFxuICB8IHR5cGVvZiBib3R0b21cbiAgfCB0eXBlb2YgcmlnaHRcbiAgfCB0eXBlb2YgbGVmdDtcbmV4cG9ydCBjb25zdCBiYXNlUGxhY2VtZW50czogQXJyYXk8QmFzZVBsYWNlbWVudD4gPSBbdG9wLCBib3R0b20sIHJpZ2h0LCBsZWZ0XTtcblxuZXhwb3J0IGNvbnN0IHN0YXJ0OiAnc3RhcnQnID0gJ3N0YXJ0JztcbmV4cG9ydCBjb25zdCBlbmQ6ICdlbmQnID0gJ2VuZCc7XG5leHBvcnQgdHlwZSBWYXJpYXRpb24gPSB0eXBlb2Ygc3RhcnQgfCB0eXBlb2YgZW5kO1xuXG5leHBvcnQgY29uc3QgY2xpcHBpbmdQYXJlbnRzOiAnY2xpcHBpbmdQYXJlbnRzJyA9ICdjbGlwcGluZ1BhcmVudHMnO1xuZXhwb3J0IGNvbnN0IHZpZXdwb3J0OiAndmlld3BvcnQnID0gJ3ZpZXdwb3J0JztcbmV4cG9ydCB0eXBlIEJvdW5kYXJ5ID0gRWxlbWVudCB8IEFycmF5PEVsZW1lbnQ+IHwgdHlwZW9mIGNsaXBwaW5nUGFyZW50cztcbmV4cG9ydCB0eXBlIFJvb3RCb3VuZGFyeSA9IHR5cGVvZiB2aWV3cG9ydCB8ICdkb2N1bWVudCc7XG5cbmV4cG9ydCBjb25zdCBwb3BwZXI6ICdwb3BwZXInID0gJ3BvcHBlcic7XG5leHBvcnQgY29uc3QgcmVmZXJlbmNlOiAncmVmZXJlbmNlJyA9ICdyZWZlcmVuY2UnO1xuZXhwb3J0IHR5cGUgQ29udGV4dCA9IHR5cGVvZiBwb3BwZXIgfCB0eXBlb2YgcmVmZXJlbmNlO1xuXG5leHBvcnQgdHlwZSBWYXJpYXRpb25QbGFjZW1lbnQgPVxuICB8ICd0b3Atc3RhcnQnXG4gIHwgJ3RvcC1lbmQnXG4gIHwgJ2JvdHRvbS1zdGFydCdcbiAgfCAnYm90dG9tLWVuZCdcbiAgfCAncmlnaHQtc3RhcnQnXG4gIHwgJ3JpZ2h0LWVuZCdcbiAgfCAnbGVmdC1zdGFydCdcbiAgfCAnbGVmdC1lbmQnO1xuZXhwb3J0IHR5cGUgQXV0b1BsYWNlbWVudCA9ICdhdXRvJyB8ICdhdXRvLXN0YXJ0JyB8ICdhdXRvLWVuZCc7XG5leHBvcnQgdHlwZSBDb21wdXRlZFBsYWNlbWVudCA9IFZhcmlhdGlvblBsYWNlbWVudCB8IEJhc2VQbGFjZW1lbnQ7XG5leHBvcnQgdHlwZSBQbGFjZW1lbnQgPSBBdXRvUGxhY2VtZW50IHwgQmFzZVBsYWNlbWVudCB8IFZhcmlhdGlvblBsYWNlbWVudDtcblxuZXhwb3J0IGNvbnN0IHZhcmlhdGlvblBsYWNlbWVudHM6IEFycmF5PFZhcmlhdGlvblBsYWNlbWVudD4gPSBiYXNlUGxhY2VtZW50cy5yZWR1Y2UoXG4gIChhY2M6IEFycmF5PFZhcmlhdGlvblBsYWNlbWVudD4sIHBsYWNlbWVudDogQmFzZVBsYWNlbWVudCkgPT5cbiAgICBhY2MuY29uY2F0KFsoYCR7cGxhY2VtZW50fS0ke3N0YXJ0fWA6IGFueSksIChgJHtwbGFjZW1lbnR9LSR7ZW5kfWA6IGFueSldKSxcbiAgW11cbik7XG5leHBvcnQgY29uc3QgcGxhY2VtZW50czogQXJyYXk8UGxhY2VtZW50PiA9IFsuLi5iYXNlUGxhY2VtZW50cywgYXV0b10ucmVkdWNlKFxuICAoXG4gICAgYWNjOiBBcnJheTxQbGFjZW1lbnQ+LFxuICAgIHBsYWNlbWVudDogQmFzZVBsYWNlbWVudCB8IHR5cGVvZiBhdXRvXG4gICk6IEFycmF5PFBsYWNlbWVudD4gPT5cbiAgICBhY2MuY29uY2F0KFtcbiAgICAgIHBsYWNlbWVudCxcbiAgICAgIChgJHtwbGFjZW1lbnR9LSR7c3RhcnR9YDogYW55KSxcbiAgICAgIChgJHtwbGFjZW1lbnR9LSR7ZW5kfWA6IGFueSksXG4gICAgXSksXG4gIFtdXG4pO1xuXG4vLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuZXhwb3J0IGNvbnN0IGJlZm9yZVJlYWQ6ICdiZWZvcmVSZWFkJyA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCBjb25zdCByZWFkOiAncmVhZCcgPSAncmVhZCc7XG5leHBvcnQgY29uc3QgYWZ0ZXJSZWFkOiAnYWZ0ZXJSZWFkJyA9ICdhZnRlclJlYWQnO1xuLy8gcHVyZS1sb2dpYyBtb2RpZmllcnNcbmV4cG9ydCBjb25zdCBiZWZvcmVNYWluOiAnYmVmb3JlTWFpbicgPSAnYmVmb3JlTWFpbic7XG5leHBvcnQgY29uc3QgbWFpbjogJ21haW4nID0gJ21haW4nO1xuZXhwb3J0IGNvbnN0IGFmdGVyTWFpbjogJ2FmdGVyTWFpbicgPSAnYWZ0ZXJNYWluJztcbi8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcbmV4cG9ydCBjb25zdCBiZWZvcmVXcml0ZTogJ2JlZm9yZVdyaXRlJyA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgY29uc3Qgd3JpdGU6ICd3cml0ZScgPSAnd3JpdGUnO1xuZXhwb3J0IGNvbnN0IGFmdGVyV3JpdGU6ICdhZnRlcldyaXRlJyA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCBjb25zdCBtb2RpZmllclBoYXNlczogQXJyYXk8TW9kaWZpZXJQaGFzZXM+ID0gW1xuICBiZWZvcmVSZWFkLFxuICByZWFkLFxuICBhZnRlclJlYWQsXG4gIGJlZm9yZU1haW4sXG4gIG1haW4sXG4gIGFmdGVyTWFpbixcbiAgYmVmb3JlV3JpdGUsXG4gIHdyaXRlLFxuICBhZnRlcldyaXRlLFxuXTtcblxuZXhwb3J0IHR5cGUgTW9kaWZpZXJQaGFzZXMgPVxuICB8IHR5cGVvZiBiZWZvcmVSZWFkXG4gIHwgdHlwZW9mIHJlYWRcbiAgfCB0eXBlb2YgYWZ0ZXJSZWFkXG4gIHwgdHlwZW9mIGJlZm9yZU1haW5cbiAgfCB0eXBlb2YgbWFpblxuICB8IHR5cGVvZiBhZnRlck1haW5cbiAgfCB0eXBlb2YgYmVmb3JlV3JpdGVcbiAgfCB0eXBlb2Ygd3JpdGVcbiAgfCB0eXBlb2YgYWZ0ZXJXcml0ZTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IE1vZGlmaWVyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tICcuLi9lbnVtcyc7XG5cbi8vIHNvdXJjZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDk4NzUyNTVcbmZ1bmN0aW9uIG9yZGVyKG1vZGlmaWVycykge1xuICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gIG1vZGlmaWVycy5mb3JFYWNoKG1vZGlmaWVyID0+IHtcbiAgICBtYXAuc2V0KG1vZGlmaWVyLm5hbWUsIG1vZGlmaWVyKTtcbiAgfSk7XG5cbiAgLy8gT24gdmlzaXRpbmcgb2JqZWN0LCBjaGVjayBmb3IgaXRzIGRlcGVuZGVuY2llcyBhbmQgdmlzaXQgdGhlbSByZWN1cnNpdmVseVxuICBmdW5jdGlvbiBzb3J0KG1vZGlmaWVyOiBNb2RpZmllcjxhbnksIGFueT4pIHtcbiAgICB2aXNpdGVkLmFkZChtb2RpZmllci5uYW1lKTtcblxuICAgIGNvbnN0IHJlcXVpcmVzID0gW1xuICAgICAgLi4uKG1vZGlmaWVyLnJlcXVpcmVzIHx8IFtdKSxcbiAgICAgIC4uLihtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzIHx8IFtdKSxcbiAgICBdO1xuXG4gICAgcmVxdWlyZXMuZm9yRWFjaChkZXAgPT4ge1xuICAgICAgaWYgKCF2aXNpdGVkLmhhcyhkZXApKSB7XG4gICAgICAgIGNvbnN0IGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXN1bHQucHVzaChtb2RpZmllcik7XG4gIH1cblxuICBtb2RpZmllcnMuZm9yRWFjaChtb2RpZmllciA9PiB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGVyTW9kaWZpZXJzKFxuICBtb2RpZmllcnM6IEFycmF5PE1vZGlmaWVyPGFueSwgYW55Pj5cbik6IEFycmF5PE1vZGlmaWVyPGFueSwgYW55Pj4ge1xuICAvLyBvcmRlciBiYXNlZCBvbiBkZXBlbmRlbmNpZXNcbiAgY29uc3Qgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyKG1vZGlmaWVycyk7XG5cbiAgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcbiAgcmV0dXJuIG1vZGlmaWVyUGhhc2VzLnJlZHVjZSgoYWNjLCBwaGFzZSkgPT4ge1xuICAgIHJldHVybiBhY2MuY29uY2F0KFxuICAgICAgb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIobW9kaWZpZXIgPT4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlKVxuICAgICk7XG4gIH0sIFtdKTtcbn1cbiIsIi8vIEBmbG93XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlPFQ+KGZuOiBGdW5jdGlvbik6ICgpID0+IFByb21pc2U8VD4ge1xuICBsZXQgcGVuZGluZztcbiAgcmV0dXJuICgpID0+IHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZTxUPihyZXNvbHZlID0+IHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgcGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXNvbHZlKGZuKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwZW5kaW5nO1xuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQnlOYW1lKFxuICBtb2RpZmllcnM6IEFycmF5PCRTaGFwZTxNb2RpZmllcjxhbnksIGFueT4+PlxuKTogQXJyYXk8JFNoYXBlPE1vZGlmaWVyPGFueSwgYW55Pj4+IHtcbiAgY29uc3QgbWVyZ2VkID0gbW9kaWZpZXJzLnJlZHVjZSgobWVyZ2VkLCBjdXJyZW50KSA9PiB7XG4gICAgY29uc3QgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nXG4gICAgICA/IHtcbiAgICAgICAgICAuLi5leGlzdGluZyxcbiAgICAgICAgICAuLi5jdXJyZW50LFxuICAgICAgICAgIG9wdGlvbnM6IHsgLi4uZXhpc3Rpbmcub3B0aW9ucywgLi4uY3VycmVudC5vcHRpb25zIH0sXG4gICAgICAgICAgZGF0YTogeyAuLi5leGlzdGluZy5kYXRhLCAuLi5jdXJyZW50LmRhdGEgfSxcbiAgICAgICAgfVxuICAgICAgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTtcblxuICAvLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgT2JqZWN0LnZhbHVlc1xuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoa2V5ID0+IG1lcmdlZFtrZXldKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSAnLi9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSAnLi9nZXRXaW5kb3dTY3JvbGxCYXJYJztcbmltcG9ydCBpc0xheW91dFZpZXdwb3J0IGZyb20gJy4vaXNMYXlvdXRWaWV3cG9ydCc7XG5pbXBvcnQgdHlwZSB7IFBvc2l0aW9uaW5nU3RyYXRlZ3kgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZpZXdwb3J0UmVjdChcbiAgZWxlbWVudDogRWxlbWVudCxcbiAgc3RyYXRlZ3k6IFBvc2l0aW9uaW5nU3RyYXRlZ3lcbikge1xuICBjb25zdCB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIGNvbnN0IGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIGNvbnN0IHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuXG4gIGxldCB3aWR0aCA9IGh0bWwuY2xpZW50V2lkdGg7XG4gIGxldCBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG5cbiAgaWYgKHZpc3VhbFZpZXdwb3J0KSB7XG4gICAgd2lkdGggPSB2aXN1YWxWaWV3cG9ydC53aWR0aDtcbiAgICBoZWlnaHQgPSB2aXN1YWxWaWV3cG9ydC5oZWlnaHQ7XG5cbiAgICBjb25zdCBsYXlvdXRWaWV3cG9ydCA9IGlzTGF5b3V0Vmlld3BvcnQoKTtcblxuICAgIGlmIChsYXlvdXRWaWV3cG9ydCB8fCAoIWxheW91dFZpZXdwb3J0ICYmIHN0cmF0ZWd5ID09PSAnZml4ZWQnKSkge1xuICAgICAgeCA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQ7XG4gICAgICB5ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHg6IHggKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpLFxuICAgIHksXG4gIH07XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBSZWN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tICcuL2dldERvY3VtZW50RWxlbWVudCc7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tICcuL2dldENvbXB1dGVkU3R5bGUnO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSAnLi9nZXRXaW5kb3dTY3JvbGxCYXJYJztcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSAnLi9nZXRXaW5kb3dTY3JvbGwnO1xuaW1wb3J0IHsgbWF4IH0gZnJvbSAnLi4vdXRpbHMvbWF0aCc7XG5cbi8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50OiBIVE1MRWxlbWVudCk6IFJlY3Qge1xuICBjb25zdCBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICBjb25zdCB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIGNvbnN0IGJvZHkgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ/LmJvZHk7XG5cbiAgY29uc3Qgd2lkdGggPSBtYXgoXG4gICAgaHRtbC5zY3JvbGxXaWR0aCxcbiAgICBodG1sLmNsaWVudFdpZHRoLFxuICAgIGJvZHkgPyBib2R5LnNjcm9sbFdpZHRoIDogMCxcbiAgICBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDBcbiAgKTtcbiAgY29uc3QgaGVpZ2h0ID0gbWF4KFxuICAgIGh0bWwuc2Nyb2xsSGVpZ2h0LFxuICAgIGh0bWwuY2xpZW50SGVpZ2h0LFxuICAgIGJvZHkgPyBib2R5LnNjcm9sbEhlaWdodCA6IDAsXG4gICAgYm9keSA/IGJvZHkuY2xpZW50SGVpZ2h0IDogMFxuICApO1xuXG4gIGxldCB4ID0gLXdpblNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgY29uc3QgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7IHdpZHRoLCBoZWlnaHQsIHgsIHkgfTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tICcuL2luc3RhbmNlT2YnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhwYXJlbnQ6IEVsZW1lbnQsIGNoaWxkOiBFbGVtZW50KSB7XG4gIGNvbnN0IHJvb3ROb2RlID0gY2hpbGQuZ2V0Um9vdE5vZGUgJiYgY2hpbGQuZ2V0Um9vdE5vZGUoKTtcblxuICAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG4gIGlmIChwYXJlbnQuY29udGFpbnMoY2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gdGhlbiBmYWxsYmFjayB0byBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBTaGFkb3cgRE9NIHN1cHBvcnRcbiAgZWxzZSBpZiAocm9vdE5vZGUgJiYgaXNTaGFkb3dSb290KHJvb3ROb2RlKSkge1xuICAgIGxldCBuZXh0ID0gY2hpbGQ7XG4gICAgZG8ge1xuICAgICAgaWYgKG5leHQgJiYgcGFyZW50LmlzU2FtZU5vZGUobmV4dCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ106IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG4gICAgICBuZXh0ID0gbmV4dC5wYXJlbnROb2RlIHx8IG5leHQuaG9zdDtcbiAgICB9IHdoaWxlIChuZXh0KTtcbiAgfVxuXG4gIC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgUmVjdCwgQ2xpZW50UmVjdE9iamVjdCB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0OiBSZWN0KTogQ2xpZW50UmVjdE9iamVjdCB7XG4gIHJldHVybiB7XG4gICAgLi4ucmVjdCxcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodCxcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IENsaWVudFJlY3RPYmplY3QsIFBvc2l0aW9uaW5nU3RyYXRlZ3kgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEJvdW5kYXJ5LCBSb290Qm91bmRhcnkgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCBnZXRWaWV3cG9ydFJlY3QgZnJvbSAnLi9nZXRWaWV3cG9ydFJlY3QnO1xuaW1wb3J0IGdldERvY3VtZW50UmVjdCBmcm9tICcuL2dldERvY3VtZW50UmVjdCc7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSAnLi9saXN0U2Nyb2xsUGFyZW50cyc7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4vZ2V0T2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSAnLi9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi9nZXRDb21wdXRlZFN0eWxlJztcbmltcG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCB9IGZyb20gJy4vaW5zdGFuY2VPZic7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0JztcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gJy4vZ2V0UGFyZW50Tm9kZSc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnLi9jb250YWlucyc7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSAnLi9nZXROb2RlTmFtZSc7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tICcuLi91dGlscy9yZWN0VG9DbGllbnRSZWN0JztcbmltcG9ydCB7IG1heCwgbWluIH0gZnJvbSAnLi4vdXRpbHMvbWF0aCc7XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KFxuICBlbGVtZW50OiBFbGVtZW50LFxuICBzdHJhdGVneTogUG9zaXRpb25pbmdTdHJhdGVneVxuKSB7XG4gIGNvbnN0IHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgZmFsc2UsIHN0cmF0ZWd5ID09PSAnZml4ZWQnKTtcblxuICByZWN0LnRvcCA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRUb3A7XG4gIHJlY3QubGVmdCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50TGVmdDtcbiAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnJpZ2h0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC53aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3QuaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QueCA9IHJlY3QubGVmdDtcbiAgcmVjdC55ID0gcmVjdC50b3A7XG5cbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKFxuICBlbGVtZW50OiBFbGVtZW50LFxuICBjbGlwcGluZ1BhcmVudDogRWxlbWVudCB8IFJvb3RCb3VuZGFyeSxcbiAgc3RyYXRlZ3k6IFBvc2l0aW9uaW5nU3RyYXRlZ3lcbik6IENsaWVudFJlY3RPYmplY3Qge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0XG4gICAgPyByZWN0VG9DbGllbnRSZWN0KGdldFZpZXdwb3J0UmVjdChlbGVtZW50LCBzdHJhdGVneSkpXG4gICAgOiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpXG4gICAgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpXG4gICAgOiByZWN0VG9DbGllbnRSZWN0KGdldERvY3VtZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpKTtcbn1cblxuLy8gQSBcImNsaXBwaW5nIHBhcmVudFwiIGlzIGFuIG92ZXJmbG93YWJsZSBjb250YWluZXIgd2l0aCB0aGUgY2hhcmFjdGVyaXN0aWMgb2Zcbi8vIGNsaXBwaW5nIChvciBoaWRpbmcpIG92ZXJmbG93aW5nIGVsZW1lbnRzIHdpdGggYSBwb3NpdGlvbiBkaWZmZXJlbnQgZnJvbVxuLy8gYGluaXRpYWxgXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudDogRWxlbWVudCk6IEFycmF5PEVsZW1lbnQ+IHtcbiAgY29uc3QgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG4gIGNvbnN0IGNhbkVzY2FwZUNsaXBwaW5nID1cbiAgICBbJ2Fic29sdXRlJywgJ2ZpeGVkJ10uaW5kZXhPZihnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uKSA+PSAwO1xuICBjb25zdCBjbGlwcGVyRWxlbWVudCA9XG4gICAgY2FuRXNjYXBlQ2xpcHBpbmcgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KVxuICAgICAgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudClcbiAgICAgIDogZWxlbWVudDtcblxuICBpZiAoIWlzRWxlbWVudChjbGlwcGVyRWxlbWVudCkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuICByZXR1cm4gY2xpcHBpbmdQYXJlbnRzLmZpbHRlcihcbiAgICAoY2xpcHBpbmdQYXJlbnQpID0+XG4gICAgICBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpICYmXG4gICAgICBjb250YWlucyhjbGlwcGluZ1BhcmVudCwgY2xpcHBlckVsZW1lbnQpICYmXG4gICAgICBnZXROb2RlTmFtZShjbGlwcGluZ1BhcmVudCkgIT09ICdib2R5J1xuICApO1xufVxuXG4vLyBHZXRzIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIGluIGR1ZSB0byBhbnkgbnVtYmVyIG9mXG4vLyBjbGlwcGluZyBwYXJlbnRzXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoXG4gIGVsZW1lbnQ6IEVsZW1lbnQsXG4gIGJvdW5kYXJ5OiBCb3VuZGFyeSxcbiAgcm9vdEJvdW5kYXJ5OiBSb290Qm91bmRhcnksXG4gIHN0cmF0ZWd5OiBQb3NpdGlvbmluZ1N0cmF0ZWd5XG4pOiBDbGllbnRSZWN0T2JqZWN0IHtcbiAgY29uc3QgbWFpbkNsaXBwaW5nUGFyZW50cyA9XG4gICAgYm91bmRhcnkgPT09ICdjbGlwcGluZ1BhcmVudHMnXG4gICAgICA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KVxuICAgICAgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICBjb25zdCBjbGlwcGluZ1BhcmVudHMgPSBbLi4ubWFpbkNsaXBwaW5nUGFyZW50cywgcm9vdEJvdW5kYXJ5XTtcbiAgY29uc3QgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcblxuICBjb25zdCBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ1BhcmVudHMucmVkdWNlKChhY2NSZWN0LCBjbGlwcGluZ1BhcmVudCkgPT4ge1xuICAgIGNvbnN0IHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpO1xuXG4gICAgYWNjUmVjdC50b3AgPSBtYXgocmVjdC50b3AsIGFjY1JlY3QudG9wKTtcbiAgICBhY2NSZWN0LnJpZ2h0ID0gbWluKHJlY3QucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xuICAgIGFjY1JlY3QuYm90dG9tID0gbWluKHJlY3QuYm90dG9tLCBhY2NSZWN0LmJvdHRvbSk7XG4gICAgYWNjUmVjdC5sZWZ0ID0gbWF4KHJlY3QubGVmdCwgYWNjUmVjdC5sZWZ0KTtcblxuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBmaXJzdENsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkpO1xuXG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcblxuICByZXR1cm4gY2xpcHBpbmdSZWN0O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB7IHR5cGUgQmFzZVBsYWNlbWVudCwgdHlwZSBQbGFjZW1lbnQsIGF1dG8gfSBmcm9tICcuLi9lbnVtcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQoXG4gIHBsYWNlbWVudDogUGxhY2VtZW50IHwgdHlwZW9mIGF1dG9cbik6IEJhc2VQbGFjZW1lbnQge1xuICByZXR1cm4gKHBsYWNlbWVudC5zcGxpdCgnLScpWzBdOiBhbnkpO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB7IHR5cGUgVmFyaWF0aW9uLCB0eXBlIFBsYWNlbWVudCB9IGZyb20gJy4uL2VudW1zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudDogUGxhY2VtZW50KTogP1ZhcmlhdGlvbiB7XG4gIHJldHVybiAocGxhY2VtZW50LnNwbGl0KCctJylbMV06IGFueSk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBQbGFjZW1lbnQgfSBmcm9tICcuLi9lbnVtcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChcbiAgcGxhY2VtZW50OiBQbGFjZW1lbnRcbik6ICd4JyB8ICd5JyB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tICcuL2dldEJhc2VQbGFjZW1lbnQnO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tICcuL2dldFZhcmlhdGlvbic7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gJy4vZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50JztcbmltcG9ydCB0eXBlIHtcbiAgUmVjdCxcbiAgUG9zaXRpb25pbmdTdHJhdGVneSxcbiAgT2Zmc2V0cyxcbiAgQ2xpZW50UmVjdE9iamVjdCxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzdGFydCwgZW5kLCB0eXBlIFBsYWNlbWVudCB9IGZyb20gJy4uL2VudW1zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoe1xuICByZWZlcmVuY2UsXG4gIGVsZW1lbnQsXG4gIHBsYWNlbWVudCxcbn06IHtcbiAgcmVmZXJlbmNlOiBSZWN0IHwgQ2xpZW50UmVjdE9iamVjdCxcbiAgZWxlbWVudDogUmVjdCB8IENsaWVudFJlY3RPYmplY3QsXG4gIHN0cmF0ZWd5OiBQb3NpdGlvbmluZ1N0cmF0ZWd5LFxuICBwbGFjZW1lbnQ/OiBQbGFjZW1lbnQsXG59KTogT2Zmc2V0cyB7XG4gIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICBjb25zdCB2YXJpYXRpb24gPSBwbGFjZW1lbnQgPyBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA6IG51bGw7XG4gIGNvbnN0IGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgY29uc3QgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG5cbiAgbGV0IG9mZnNldHM7XG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodCxcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIGJvdHRvbTpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCxcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vblksXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZLFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnksXG4gICAgICB9O1xuICB9XG5cbiAgY29uc3QgbWFpbkF4aXMgPSBiYXNlUGxhY2VtZW50XG4gICAgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudClcbiAgICA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICBjb25zdCBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgc3dpdGNoICh2YXJpYXRpb24pIHtcbiAgICAgIGNhc2Ugc3RhcnQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID1cbiAgICAgICAgICBvZmZzZXRzW21haW5BeGlzXSAtIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGVuZDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPVxuICAgICAgICAgIG9mZnNldHNbbWFpbkF4aXNdICsgKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBTaWRlT2JqZWN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKTogU2lkZU9iamVjdCB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwLFxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgU2lkZU9iamVjdCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSAnLi9nZXRGcmVzaFNpZGVPYmplY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZVBhZGRpbmdPYmplY3QoXG4gIHBhZGRpbmdPYmplY3Q6ICRTaGFwZTxTaWRlT2JqZWN0PlxuKTogU2lkZU9iamVjdCB7XG4gIHJldHVybiB7XG4gICAgLi4uZ2V0RnJlc2hTaWRlT2JqZWN0KCksXG4gICAgLi4ucGFkZGluZ09iamVjdCxcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcDxcbiAgVDogbnVtYmVyIHwgc3RyaW5nIHwgYm9vbGVhbixcbiAgSzogc3RyaW5nXG4+KHZhbHVlOiBULCBrZXlzOiBBcnJheTxLPik6IHsgW2tleTogc3RyaW5nXTogVCB9IHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKChoYXNoTWFwLCBrZXkpID0+IHtcbiAgICBoYXNoTWFwW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gaGFzaE1hcDtcbiAgfSwge30pO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgU3RhdGUsIFNpZGVPYmplY3QsIFBhZGRpbmcsIFBvc2l0aW9uaW5nU3RyYXRlZ3kgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCwgQm91bmRhcnksIFJvb3RCb3VuZGFyeSwgQ29udGV4dCB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCBnZXRDbGlwcGluZ1JlY3QgZnJvbSAnLi4vZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdCc7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gJy4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0JztcbmltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tICcuL2NvbXB1dGVPZmZzZXRzJztcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gJy4vcmVjdFRvQ2xpZW50UmVjdCc7XG5pbXBvcnQge1xuICBjbGlwcGluZ1BhcmVudHMsXG4gIHJlZmVyZW5jZSxcbiAgcG9wcGVyLFxuICBib3R0b20sXG4gIHRvcCxcbiAgcmlnaHQsXG4gIGJhc2VQbGFjZW1lbnRzLFxuICB2aWV3cG9ydCxcbn0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSAnLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YnO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tICcuL21lcmdlUGFkZGluZ09iamVjdCc7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gJy4vZXhwYW5kVG9IYXNoTWFwJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgT3B0aW9ucyA9IHtcbiAgcGxhY2VtZW50OiBQbGFjZW1lbnQsXG4gIHN0cmF0ZWd5OiBQb3NpdGlvbmluZ1N0cmF0ZWd5LFxuICBib3VuZGFyeTogQm91bmRhcnksXG4gIHJvb3RCb3VuZGFyeTogUm9vdEJvdW5kYXJ5LFxuICBlbGVtZW50Q29udGV4dDogQ29udGV4dCxcbiAgYWx0Qm91bmRhcnk6IGJvb2xlYW4sXG4gIHBhZGRpbmc6IFBhZGRpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhcbiAgc3RhdGU6IFN0YXRlLFxuICBvcHRpb25zOiAkU2hhcGU8T3B0aW9ucz4gPSB7fVxuKTogU2lkZU9iamVjdCB7XG4gIGNvbnN0IHtcbiAgICBwbGFjZW1lbnQgPSBzdGF0ZS5wbGFjZW1lbnQsXG4gICAgc3RyYXRlZ3kgPSBzdGF0ZS5zdHJhdGVneSxcbiAgICBib3VuZGFyeSA9IGNsaXBwaW5nUGFyZW50cyxcbiAgICByb290Qm91bmRhcnkgPSB2aWV3cG9ydCxcbiAgICBlbGVtZW50Q29udGV4dCA9IHBvcHBlcixcbiAgICBhbHRCb3VuZGFyeSA9IGZhbHNlLFxuICAgIHBhZGRpbmcgPSAwLFxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCBwYWRkaW5nT2JqZWN0ID0gbWVyZ2VQYWRkaW5nT2JqZWN0KFxuICAgIHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJ1xuICAgICAgPyBwYWRkaW5nXG4gICAgICA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cylcbiAgKTtcblxuICBjb25zdCBhbHRDb250ZXh0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHJlZmVyZW5jZSA6IHBvcHBlcjtcblxuICBjb25zdCBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICBjb25zdCBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuXG4gIGNvbnN0IGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChcbiAgICBpc0VsZW1lbnQoZWxlbWVudClcbiAgICAgID8gZWxlbWVudFxuICAgICAgOiBlbGVtZW50LmNvbnRleHRFbGVtZW50IHx8IGdldERvY3VtZW50RWxlbWVudChzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBzdHJhdGVneVxuICApO1xuXG4gIGNvbnN0IHJlZmVyZW5jZUNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qoc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlKTtcblxuICBjb25zdCBwb3BwZXJPZmZzZXRzID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICBlbGVtZW50OiBwb3BwZXJSZWN0LFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudCxcbiAgfSk7XG5cbiAgY29uc3QgcG9wcGVyQ2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3Qoe1xuICAgIC4uLnBvcHBlclJlY3QsXG4gICAgLi4ucG9wcGVyT2Zmc2V0cyxcbiAgfSk7XG5cbiAgY29uc3QgZWxlbWVudENsaWVudFJlY3QgPVxuICAgIGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDtcblxuICAvLyBwb3NpdGl2ZSA9IG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyByZWN0XG4gIC8vIDAgb3IgbmVnYXRpdmUgPSB3aXRoaW4gdGhlIGNsaXBwaW5nIHJlY3RcbiAgY29uc3Qgb3ZlcmZsb3dPZmZzZXRzID0ge1xuICAgIHRvcDogY2xpcHBpbmdDbGllbnRSZWN0LnRvcCAtIGVsZW1lbnRDbGllbnRSZWN0LnRvcCArIHBhZGRpbmdPYmplY3QudG9wLFxuICAgIGJvdHRvbTpcbiAgICAgIGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtXG4gICAgICBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICtcbiAgICAgIHBhZGRpbmdPYmplY3QuYm90dG9tLFxuICAgIGxlZnQ6IGNsaXBwaW5nQ2xpZW50UmVjdC5sZWZ0IC0gZWxlbWVudENsaWVudFJlY3QubGVmdCArIHBhZGRpbmdPYmplY3QubGVmdCxcbiAgICByaWdodDpcbiAgICAgIGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodCxcbiAgfTtcblxuICBjb25zdCBvZmZzZXREYXRhID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQ7XG5cbiAgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuICBpZiAoZWxlbWVudENvbnRleHQgPT09IHBvcHBlciAmJiBvZmZzZXREYXRhKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuXG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IG11bHRpcGx5ID0gW3JpZ2h0LCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gMSA6IC0xO1xuICAgICAgY29uc3QgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUge1xuICBTdGF0ZSxcbiAgT3B0aW9uc0dlbmVyaWMsXG4gIE1vZGlmaWVyLFxuICBJbnN0YW5jZSxcbiAgVmlydHVhbEVsZW1lbnQsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IGdldENvbXBvc2l0ZVJlY3QgZnJvbSAnLi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdCc7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tICcuL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0JztcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tICcuL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cyc7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgb3JkZXJNb2RpZmllcnMgZnJvbSAnLi91dGlscy9vcmRlck1vZGlmaWVycyc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgbWVyZ2VCeU5hbWUgZnJvbSAnLi91dGlscy9tZXJnZUJ5TmFtZSc7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSAnLi91dGlscy9kZXRlY3RPdmVyZmxvdyc7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tICcuL2RvbS11dGlscy9pbnN0YW5jZU9mJztcblxuY29uc3QgREVGQVVMVF9PUFRJT05TOiBPcHRpb25zR2VuZXJpYzxhbnk+ID0ge1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICBtb2RpZmllcnM6IFtdLFxuICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbn07XG5cbnR5cGUgUG9wcGVyR2VuZXJhdG9yQXJncyA9IHtcbiAgZGVmYXVsdE1vZGlmaWVycz86IEFycmF5PE1vZGlmaWVyPGFueSwgYW55Pj4sXG4gIGRlZmF1bHRPcHRpb25zPzogJFNoYXBlPE9wdGlvbnNHZW5lcmljPGFueT4+LFxufTtcblxuZnVuY3Rpb24gYXJlVmFsaWRFbGVtZW50cyguLi5hcmdzOiBBcnJheTxhbnk+KTogYm9vbGVhbiB7XG4gIHJldHVybiAhYXJncy5zb21lKFxuICAgIChlbGVtZW50KSA9PlxuICAgICAgIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJylcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvcHBlckdlbmVyYXRvcihnZW5lcmF0b3JPcHRpb25zOiBQb3BwZXJHZW5lcmF0b3JBcmdzID0ge30pIHtcbiAgY29uc3QgeyBkZWZhdWx0TW9kaWZpZXJzID0gW10sIGRlZmF1bHRPcHRpb25zID0gREVGQVVMVF9PUFRJT05TIH0gPVxuICAgIGdlbmVyYXRvck9wdGlvbnM7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlcjxUTW9kaWZpZXI6ICRTaGFwZTxNb2RpZmllcjxhbnksIGFueT4+PihcbiAgICByZWZlcmVuY2U6IEVsZW1lbnQgfCBWaXJ0dWFsRWxlbWVudCxcbiAgICBwb3BwZXI6IEhUTUxFbGVtZW50LFxuICAgIG9wdGlvbnM6ICRTaGFwZTxPcHRpb25zR2VuZXJpYzxUTW9kaWZpZXI+PiA9IGRlZmF1bHRPcHRpb25zXG4gICk6IEluc3RhbmNlIHtcbiAgICBsZXQgc3RhdGU6ICRTaGFwZTxTdGF0ZT4gPSB7XG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICBvcHRpb25zOiB7IC4uLkRFRkFVTFRfT1BUSU9OUywgLi4uZGVmYXVsdE9wdGlvbnMgfSxcbiAgICAgIG1vZGlmaWVyc0RhdGE6IHt9LFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIsXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBzdHlsZXM6IHt9LFxuICAgIH07XG5cbiAgICBsZXQgZWZmZWN0Q2xlYW51cEZuczogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcbiAgICBsZXQgaXNEZXN0cm95ZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IGluc3RhbmNlID0ge1xuICAgICAgc3RhdGUsXG4gICAgICBzZXRPcHRpb25zKHNldE9wdGlvbnNBY3Rpb24pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9XG4gICAgICAgICAgdHlwZW9mIHNldE9wdGlvbnNBY3Rpb24gPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gc2V0T3B0aW9uc0FjdGlvbihzdGF0ZS5vcHRpb25zKVxuICAgICAgICAgICAgOiBzZXRPcHRpb25zQWN0aW9uO1xuXG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcblxuICAgICAgICBzdGF0ZS5vcHRpb25zID0ge1xuICAgICAgICAgIC8vICRGbG93Rml4TWVbZXhwb25lbnRpYWwtc3ByZWFkXVxuICAgICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgIC4uLnN0YXRlLm9wdGlvbnMsXG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfTtcblxuICAgICAgICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogaXNFbGVtZW50KHJlZmVyZW5jZSlcbiAgICAgICAgICAgID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlKVxuICAgICAgICAgICAgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnRcbiAgICAgICAgICAgID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlLmNvbnRleHRFbGVtZW50KVxuICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgICBwb3BwZXI6IGxpc3RTY3JvbGxQYXJlbnRzKHBvcHBlciksXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gT3JkZXJzIHRoZSBtb2RpZmllcnMgYmFzZWQgb24gdGhlaXIgZGVwZW5kZW5jaWVzIGFuZCBgcGhhc2VgXG4gICAgICAgIC8vIHByb3BlcnRpZXNcbiAgICAgICAgY29uc3Qgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyTW9kaWZpZXJzKFxuICAgICAgICAgIG1lcmdlQnlOYW1lKFsuLi5kZWZhdWx0TW9kaWZpZXJzLCAuLi5zdGF0ZS5vcHRpb25zLm1vZGlmaWVyc10pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gU3RyaXAgb3V0IGRpc2FibGVkIG1vZGlmaWVyc1xuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoKG0pID0+IG0uZW5hYmxlZCk7XG5cbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfSxcblxuICAgICAgLy8gU3luYyB1cGRhdGUg4oCTIGl0IHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkLCBldmVuIGlmIG5vdCBuZWNlc3NhcnkuIFRoaXNcbiAgICAgIC8vIGlzIHVzZWZ1bCBmb3IgbG93IGZyZXF1ZW5jeSB1cGRhdGVzIHdoZXJlIHN5bmMgYmVoYXZpb3Igc2ltcGxpZmllcyB0aGVcbiAgICAgIC8vIGxvZ2ljLlxuICAgICAgLy8gRm9yIGhpZ2ggZnJlcXVlbmN5IHVwZGF0ZXMgKGUuZy4gYHJlc2l6ZWAgYW5kIGBzY3JvbGxgIGV2ZW50cyksIGFsd2F5c1xuICAgICAgLy8gcHJlZmVyIHRoZSBhc3luYyBQb3BwZXIjdXBkYXRlIG1ldGhvZFxuICAgICAgZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgcmVmZXJlbmNlLCBwb3BwZXIgfSA9IHN0YXRlLmVsZW1lbnRzO1xuXG4gICAgICAgIC8vIERvbid0IHByb2NlZWQgaWYgYHJlZmVyZW5jZWAgb3IgYHBvcHBlcmAgYXJlIG5vdCB2YWxpZCBlbGVtZW50c1xuICAgICAgICAvLyBhbnltb3JlXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcbiAgICAgICAgc3RhdGUucmVjdHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBnZXRDb21wb3NpdGVSZWN0KFxuICAgICAgICAgICAgcmVmZXJlbmNlLFxuICAgICAgICAgICAgZ2V0T2Zmc2V0UGFyZW50KHBvcHBlciksXG4gICAgICAgICAgICBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKSxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcblxuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcblxuICAgICAgICAvLyBPbiBlYWNoIHVwZGF0ZSBjeWNsZSwgdGhlIGBtb2RpZmllcnNEYXRhYCBwcm9wZXJ0eSBmb3IgZWFjaCBtb2RpZmllclxuICAgICAgICAvLyBpcyBmaWxsZWQgd2l0aCB0aGUgaW5pdGlhbCBkYXRhIHNwZWNpZmllZCBieSB0aGUgbW9kaWZpZXIuIFRoaXMgbWVhbnNcbiAgICAgICAgLy8gaXQgZG9lc24ndCBwZXJzaXN0IGFuZCBpcyBmcmVzaCBvbiBlYWNoIHVwZGF0ZS5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHBlcnNpc3RlbnQgZGF0YSwgdXNlIGAke25hbWV9I3BlcnNpc3RlbnRgXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChcbiAgICAgICAgICAobW9kaWZpZXIpID0+XG4gICAgICAgICAgICAoc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgLi4ubW9kaWZpZXIuZGF0YSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHsgZm4sIG9wdGlvbnMgPSB7fSwgbmFtZSB9ID0gc3RhdGUub3JkZXJlZE1vZGlmaWVyc1tpbmRleF07XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGZuKHsgc3RhdGUsIG9wdGlvbnMsIG5hbWUsIGluc3RhbmNlIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLy8gQXN5bmMgYW5kIG9wdGltaXN0aWNhbGx5IG9wdGltaXplZCB1cGRhdGUg4oCTIGl0IHdpbGwgbm90IGJlIGV4ZWN1dGVkIGlmXG4gICAgICAvLyBub3QgbmVjZXNzYXJ5IChkZWJvdW5jZWQgdG8gcnVuIGF0IG1vc3Qgb25jZS1wZXItdGljaylcbiAgICAgIHVwZGF0ZTogZGVib3VuY2U8JFNoYXBlPFN0YXRlPj4oXG4gICAgICAgICgpID0+XG4gICAgICAgICAgbmV3IFByb21pc2U8JFNoYXBlPFN0YXRlPj4oKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgICB9KVxuICAgICAgKSxcblxuICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBpc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKChzdGF0ZSkgPT4ge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHVwZGF0ZSBjeWNsZSBydW5zLiBUaGV5IHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHVwZGF0ZVxuICAgIC8vIGN5Y2xlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgbW9kaWZpZXIgYWRkcyBzb21lIHBlcnNpc3RlbnQgZGF0YSB0aGF0XG4gICAgLy8gb3RoZXIgbW9kaWZpZXJzIG5lZWQgdG8gdXNlLCBidXQgdGhlIG1vZGlmaWVyIGlzIHJ1biBhZnRlciB0aGUgZGVwZW5kZW50XG4gICAgLy8gb25lLlxuICAgIGZ1bmN0aW9uIHJ1bk1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaCgoeyBuYW1lLCBvcHRpb25zID0ge30sIGVmZmVjdCB9KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY29uc3QgY2xlYW51cEZuID0gZWZmZWN0KHsgc3RhdGUsIG5hbWUsIGluc3RhbmNlLCBvcHRpb25zIH0pO1xuICAgICAgICAgIGNvbnN0IG5vb3BGbiA9ICgpID0+IHt9O1xuICAgICAgICAgIGVmZmVjdENsZWFudXBGbnMucHVzaChjbGVhbnVwRm4gfHwgbm9vcEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMuZm9yRWFjaCgoZm4pID0+IGZuKCkpO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVBvcHBlciA9IHBvcHBlckdlbmVyYXRvcigpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgeyBkZXRlY3RPdmVyZmxvdyB9O1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXJBcmd1bWVudHMsIE1vZGlmaWVyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuLi9kb20tdXRpbHMvZ2V0V2luZG93JztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgT3B0aW9ucyA9IHtcbiAgc2Nyb2xsOiBib29sZWFuLFxuICByZXNpemU6IGJvb2xlYW4sXG59O1xuXG5jb25zdCBwYXNzaXZlID0geyBwYXNzaXZlOiB0cnVlIH07XG5cbmZ1bmN0aW9uIGVmZmVjdCh7IHN0YXRlLCBpbnN0YW5jZSwgb3B0aW9ucyB9OiBNb2RpZmllckFyZ3VtZW50czxPcHRpb25zPikge1xuICBjb25zdCB7IHNjcm9sbCA9IHRydWUsIHJlc2l6ZSA9IHRydWUgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KHN0YXRlLmVsZW1lbnRzLnBvcHBlcik7XG4gIGNvbnN0IHNjcm9sbFBhcmVudHMgPSBbXG4gICAgLi4uc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsXG4gICAgLi4uc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIsXG4gIF07XG5cbiAgaWYgKHNjcm9sbCkge1xuICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChzY3JvbGxQYXJlbnQgPT4ge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChzY3JvbGxQYXJlbnQgPT4ge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgRXZlbnRMaXN0ZW5lcnNNb2RpZmllciA9IE1vZGlmaWVyPCdldmVudExpc3RlbmVycycsIE9wdGlvbnM+O1xuZXhwb3J0IGRlZmF1bHQgKHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiAoKSA9PiB7fSxcbiAgZWZmZWN0LFxuICBkYXRhOiB7fSxcbn06IEV2ZW50TGlzdGVuZXJzTW9kaWZpZXIpO1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXJBcmd1bWVudHMsIE1vZGlmaWVyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gJy4uL3V0aWxzL2NvbXB1dGVPZmZzZXRzJztcblxuZnVuY3Rpb24gcG9wcGVyT2Zmc2V0cyh7IHN0YXRlLCBuYW1lIH06IE1vZGlmaWVyQXJndW1lbnRzPHt8fH0+KSB7XG4gIC8vIE9mZnNldHMgYXJlIHRoZSBhY3R1YWwgcG9zaXRpb24gdGhlIHBvcHBlciBuZWVkcyB0byBoYXZlIHRvIGJlXG4gIC8vIHByb3Blcmx5IHBvc2l0aW9uZWQgbmVhciBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBwbGFjZW1lbnQsIGFuZCB3aWxsIGJlIGFkanVzdGVkIGJ5XG4gIC8vIHRoZSBtb2RpZmllcnMgaW4gdGhlIG5leHQgc3RlcFxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogc3RhdGUucmVjdHMucmVmZXJlbmNlLFxuICAgIGVsZW1lbnQ6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudCxcbiAgfSk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIFBvcHBlck9mZnNldHNNb2RpZmllciA9IE1vZGlmaWVyPCdwb3BwZXJPZmZzZXRzJywge3x8fT47XG5leHBvcnQgZGVmYXVsdCAoe1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fSxcbn06IFBvcHBlck9mZnNldHNNb2RpZmllcik7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUge1xuICBQb3NpdGlvbmluZ1N0cmF0ZWd5LFxuICBPZmZzZXRzLFxuICBNb2RpZmllcixcbiAgTW9kaWZpZXJBcmd1bWVudHMsXG4gIFJlY3QsXG4gIFdpbmRvdyxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgdHlwZSBCYXNlUGxhY2VtZW50LFxuICB0eXBlIFZhcmlhdGlvbixcbiAgdG9wLFxuICBsZWZ0LFxuICByaWdodCxcbiAgYm90dG9tLFxuICBlbmQsXG59IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4uL2RvbS11dGlscy9nZXRXaW5kb3cnO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50JztcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gJy4uL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlJztcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQnO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tICcuLi91dGlscy9nZXRWYXJpYXRpb24nO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tICcuLi91dGlscy9tYXRoJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgUm91bmRPZmZzZXRzID0gKFxuICBvZmZzZXRzOiAkU2hhcGU8eyB4OiBudW1iZXIsIHk6IG51bWJlciwgY2VudGVyT2Zmc2V0OiBudW1iZXIgfT5cbikgPT4gT2Zmc2V0cztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgT3B0aW9ucyA9IHtcbiAgZ3B1QWNjZWxlcmF0aW9uOiBib29sZWFuLFxuICBhZGFwdGl2ZTogYm9vbGVhbixcbiAgcm91bmRPZmZzZXRzPzogYm9vbGVhbiB8IFJvdW5kT2Zmc2V0cyxcbn07XG5cbmNvbnN0IHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nLFxufTtcblxuLy8gUm91bmQgdGhlIG9mZnNldHMgdG8gdGhlIG5lYXJlc3Qgc3VpdGFibGUgc3VicGl4ZWwgYmFzZWQgb24gdGhlIERQUi5cbi8vIFpvb21pbmcgY2FuIGNoYW5nZSB0aGUgRFBSLCBidXQgaXQgc2VlbXMgdG8gcmVwb3J0IGEgdmFsdWUgdGhhdCB3aWxsXG4vLyBjbGVhbmx5IGRpdmlkZSB0aGUgdmFsdWVzIGludG8gdGhlIGFwcHJvcHJpYXRlIHN1YnBpeGVscy5cbmZ1bmN0aW9uIHJvdW5kT2Zmc2V0c0J5RFBSKHsgeCwgeSB9LCB3aW46IFdpbmRvdyk6IE9mZnNldHMge1xuICBjb25zdCBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXG4gIHJldHVybiB7XG4gICAgeDogcm91bmQoeCAqIGRwcikgLyBkcHIgfHwgMCxcbiAgICB5OiByb3VuZCh5ICogZHByKSAvIGRwciB8fCAwLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9TdHlsZXMoe1xuICBwb3BwZXIsXG4gIHBvcHBlclJlY3QsXG4gIHBsYWNlbWVudCxcbiAgdmFyaWF0aW9uLFxuICBvZmZzZXRzLFxuICBwb3NpdGlvbixcbiAgZ3B1QWNjZWxlcmF0aW9uLFxuICBhZGFwdGl2ZSxcbiAgcm91bmRPZmZzZXRzLFxuICBpc0ZpeGVkLFxufToge1xuICBwb3BwZXI6IEhUTUxFbGVtZW50LFxuICBwb3BwZXJSZWN0OiBSZWN0LFxuICBwbGFjZW1lbnQ6IEJhc2VQbGFjZW1lbnQsXG4gIHZhcmlhdGlvbjogP1ZhcmlhdGlvbixcbiAgb2Zmc2V0czogJFNoYXBlPHsgeDogbnVtYmVyLCB5OiBudW1iZXIsIGNlbnRlck9mZnNldDogbnVtYmVyIH0+LFxuICBwb3NpdGlvbjogUG9zaXRpb25pbmdTdHJhdGVneSxcbiAgZ3B1QWNjZWxlcmF0aW9uOiBib29sZWFuLFxuICBhZGFwdGl2ZTogYm9vbGVhbixcbiAgcm91bmRPZmZzZXRzOiBib29sZWFuIHwgUm91bmRPZmZzZXRzLFxuICBpc0ZpeGVkOiBib29sZWFuLFxufSkge1xuICBsZXQgeyB4ID0gMCwgeSA9IDAgfSA9IG9mZnNldHM7XG5cbiAgKHsgeCwgeSB9ID1cbiAgICB0eXBlb2Ygcm91bmRPZmZzZXRzID09PSAnZnVuY3Rpb24nID8gcm91bmRPZmZzZXRzKHsgeCwgeSB9KSA6IHsgeCwgeSB9KTtcblxuICBjb25zdCBoYXNYID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneCcpO1xuICBjb25zdCBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuXG4gIGxldCBzaWRlWDogc3RyaW5nID0gbGVmdDtcbiAgbGV0IHNpZGVZOiBzdHJpbmcgPSB0b3A7XG5cbiAgY29uc3Qgd2luOiBXaW5kb3cgPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgbGV0IG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIGxldCBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgbGV0IHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChcbiAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uICE9PSAnc3RhdGljJyAmJlxuICAgICAgICBwb3NpdGlvbiA9PT0gJ2Fic29sdXRlJ1xuICAgICAgKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XTogZm9yY2UgdHlwZSByZWZpbmVtZW50LCB3ZSBjb21wYXJlIG9mZnNldFBhcmVudCB3aXRoIHdpbmRvdyBhYm92ZSwgYnV0IEZsb3cgZG9lc24ndCBkZXRlY3QgaXRcbiAgICBvZmZzZXRQYXJlbnQgPSAob2Zmc2V0UGFyZW50OiBFbGVtZW50KTtcblxuICAgIGlmIChcbiAgICAgIHBsYWNlbWVudCA9PT0gdG9wIHx8XG4gICAgICAoKHBsYWNlbWVudCA9PT0gbGVmdCB8fCBwbGFjZW1lbnQgPT09IHJpZ2h0KSAmJiB2YXJpYXRpb24gPT09IGVuZClcbiAgICApIHtcbiAgICAgIHNpZGVZID0gYm90dG9tO1xuICAgICAgY29uc3Qgb2Zmc2V0WSA9XG4gICAgICAgIGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0XG4gICAgICAgICAgPyB3aW4udmlzdWFsVmlld3BvcnQuaGVpZ2h0XG4gICAgICAgICAgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgICAgICAgIG9mZnNldFBhcmVudFtoZWlnaHRQcm9wXTtcbiAgICAgIHkgLT0gb2Zmc2V0WSAtIHBvcHBlclJlY3QuaGVpZ2h0O1xuICAgICAgeSAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgcGxhY2VtZW50ID09PSBsZWZ0IHx8XG4gICAgICAoKHBsYWNlbWVudCA9PT0gdG9wIHx8IHBsYWNlbWVudCA9PT0gYm90dG9tKSAmJiB2YXJpYXRpb24gPT09IGVuZClcbiAgICApIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7XG4gICAgICBjb25zdCBvZmZzZXRYID1cbiAgICAgICAgaXNGaXhlZCAmJiBvZmZzZXRQYXJlbnQgPT09IHdpbiAmJiB3aW4udmlzdWFsVmlld3BvcnRcbiAgICAgICAgICA/IHdpbi52aXN1YWxWaWV3cG9ydC53aWR0aFxuICAgICAgICAgIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgICAgICBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXTtcbiAgICAgIHggLT0gb2Zmc2V0WCAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb21tb25TdHlsZXMgPSB7XG4gICAgcG9zaXRpb24sXG4gICAgLi4uKGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpLFxuICB9O1xuXG4gICh7IHgsIHkgfSA9XG4gICAgcm91bmRPZmZzZXRzID09PSB0cnVlXG4gICAgICA/IHJvdW5kT2Zmc2V0c0J5RFBSKHsgeCwgeSB9LCBnZXRXaW5kb3cocG9wcGVyKSlcbiAgICAgIDogeyB4LCB5IH0pO1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uY29tbW9uU3R5bGVzLFxuICAgICAgW3NpZGVZXTogaGFzWSA/ICcwJyA6ICcnLFxuICAgICAgW3NpZGVYXTogaGFzWCA/ICcwJyA6ICcnLFxuICAgICAgLy8gTGF5ZXIgYWNjZWxlcmF0aW9uIGNhbiBkaXNhYmxlIHN1YnBpeGVsIHJlbmRlcmluZyB3aGljaCBjYXVzZXMgc2xpZ2h0bHlcbiAgICAgIC8vIGJsdXJyeSB0ZXh0IG9uIGxvdyBQUEkgZGlzcGxheXMsIHNvIHdlIHdhbnQgdG8gdXNlIDJEIHRyYW5zZm9ybXNcbiAgICAgIC8vIGluc3RlYWRcbiAgICAgIHRyYW5zZm9ybTpcbiAgICAgICAgKHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIDw9IDFcbiAgICAgICAgICA/IGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpYFxuICAgICAgICAgIDogYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAwKWAsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4uY29tbW9uU3R5bGVzLFxuICAgIFtzaWRlWV06IGhhc1kgPyBgJHt5fXB4YCA6ICcnLFxuICAgIFtzaWRlWF06IGhhc1ggPyBgJHt4fXB4YCA6ICcnLFxuICAgIHRyYW5zZm9ybTogJycsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZXMoeyBzdGF0ZSwgb3B0aW9ucyB9OiBNb2RpZmllckFyZ3VtZW50czxPcHRpb25zPikge1xuICBjb25zdCB7XG4gICAgZ3B1QWNjZWxlcmF0aW9uID0gdHJ1ZSxcbiAgICBhZGFwdGl2ZSA9IHRydWUsXG4gICAgLy8gZGVmYXVsdHMgdG8gdXNlIGJ1aWx0aW4gYHJvdW5kT2Zmc2V0c0J5RFBSYFxuICAgIHJvdW5kT2Zmc2V0cyA9IHRydWUsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IGNvbW1vblN0eWxlcyA9IHtcbiAgICBwbGFjZW1lbnQ6IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KSxcbiAgICB2YXJpYXRpb246IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHBvcHBlcjogc3RhdGUuZWxlbWVudHMucG9wcGVyLFxuICAgIHBvcHBlclJlY3Q6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBncHVBY2NlbGVyYXRpb24sXG4gICAgaXNGaXhlZDogc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyxcbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0ge1xuICAgICAgLi4uc3RhdGUuc3R5bGVzLnBvcHBlcixcbiAgICAgIC4uLm1hcFRvU3R5bGVzKHtcbiAgICAgICAgLi4uY29tbW9uU3R5bGVzLFxuICAgICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgICBhZGFwdGl2ZSxcbiAgICAgICAgcm91bmRPZmZzZXRzLFxuICAgICAgfSksXG4gICAgfTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSB7XG4gICAgICAuLi5zdGF0ZS5zdHlsZXMuYXJyb3csXG4gICAgICAuLi5tYXBUb1N0eWxlcyh7XG4gICAgICAgIC4uLmNvbW1vblN0eWxlcyxcbiAgICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGFkYXB0aXZlOiBmYWxzZSxcbiAgICAgICAgcm91bmRPZmZzZXRzLFxuICAgICAgfSksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0ge1xuICAgIC4uLnN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLFxuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnQsXG4gIH07XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIENvbXB1dGVTdHlsZXNNb2RpZmllciA9IE1vZGlmaWVyPCdjb21wdXRlU3R5bGVzJywgT3B0aW9ucz47XG5leHBvcnQgZGVmYXVsdCAoe1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge30sXG59OiBDb21wdXRlU3R5bGVzTW9kaWZpZXIpO1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXIsIE1vZGlmaWVyQXJndW1lbnRzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gJy4uL2RvbS11dGlscy9nZXROb2RlTmFtZSc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YnO1xuXG4vLyBUaGlzIG1vZGlmaWVyIHRha2VzIHRoZSBzdHlsZXMgcHJlcGFyZWQgYnkgdGhlIGBjb21wdXRlU3R5bGVzYCBtb2RpZmllclxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyh7IHN0YXRlIH06IE1vZGlmaWVyQXJndW1lbnRzPHt8fH0+KSB7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgY29uc3Qgc3R5bGUgPSBzdGF0ZS5zdHlsZXNbbmFtZV0gfHwge307XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICBjb25zdCBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG5cbiAgICAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcblxuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KHsgc3RhdGUgfTogTW9kaWZpZXJBcmd1bWVudHM8e3x8fT4pIHtcbiAgY29uc3QgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJyxcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB9LFxuICAgIHJlZmVyZW5jZToge30sXG4gIH07XG5cbiAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsIGluaXRpYWxTdHlsZXMucG9wcGVyKTtcbiAgc3RhdGUuc3R5bGVzID0gaW5pdGlhbFN0eWxlcztcblxuICBpZiAoc3RhdGUuZWxlbWVudHMuYXJyb3cpIHtcbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLmFycm93LnN0eWxlLCBpbml0aWFsU3R5bGVzLmFycm93KTtcbiAgfVxuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuXG4gICAgICBjb25zdCBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhcbiAgICAgICAgc3RhdGUuc3R5bGVzLmhhc093blByb3BlcnR5KG5hbWUpXG4gICAgICAgICAgPyBzdGF0ZS5zdHlsZXNbbmFtZV1cbiAgICAgICAgICA6IGluaXRpYWxTdHlsZXNbbmFtZV1cbiAgICAgICk7XG5cbiAgICAgIC8vIFNldCBhbGwgdmFsdWVzIHRvIGFuIGVtcHR5IHN0cmluZyB0byB1bnNldCB0aGVtXG4gICAgICBjb25zdCBzdHlsZSA9IHN0eWxlUHJvcGVydGllcy5yZWR1Y2UoKHN0eWxlLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfSwge30pO1xuXG4gICAgICAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcblxuICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaCgoYXR0cmlidXRlKSA9PiB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgQXBwbHlTdHlsZXNNb2RpZmllciA9IE1vZGlmaWVyPCdhcHBseVN0eWxlcycsIHt8fH0+O1xuZXhwb3J0IGRlZmF1bHQgKHtcbiAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBhcHBseVN0eWxlcyxcbiAgZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ10sXG59OiBBcHBseVN0eWxlc01vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXJBcmd1bWVudHMsIE1vZGlmaWVyLCBSZWN0LCBPZmZzZXRzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudCc7XG5pbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBwbGFjZW1lbnRzIH0gZnJvbSAnLi4vZW51bXMnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBPZmZzZXRzRnVuY3Rpb24gPSAoe1xuICBwb3BwZXI6IFJlY3QsXG4gIHJlZmVyZW5jZTogUmVjdCxcbiAgcGxhY2VtZW50OiBQbGFjZW1lbnQsXG59KSA9PiBbP251bWJlciwgP251bWJlcl07XG5cbnR5cGUgT2Zmc2V0ID0gT2Zmc2V0c0Z1bmN0aW9uIHwgWz9udW1iZXIsID9udW1iZXJdO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBPcHRpb25zID0ge1xuICBvZmZzZXQ6IE9mZnNldCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShcbiAgcGxhY2VtZW50OiBQbGFjZW1lbnQsXG4gIHJlY3RzOiB7IHBvcHBlcjogUmVjdCwgcmVmZXJlbmNlOiBSZWN0IH0sXG4gIG9mZnNldDogT2Zmc2V0XG4pOiBPZmZzZXRzIHtcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgY29uc3QgaW52ZXJ0RGlzdGFuY2UgPSBbbGVmdCwgdG9wXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyAtMSA6IDE7XG5cbiAgbGV0IFtza2lkZGluZywgZGlzdGFuY2VdID1cbiAgICB0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nXG4gICAgICA/IG9mZnNldCh7XG4gICAgICAgICAgLi4ucmVjdHMsXG4gICAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICB9KVxuICAgICAgOiBvZmZzZXQ7XG5cbiAgc2tpZGRpbmcgPSBza2lkZGluZyB8fCAwO1xuICBkaXN0YW5jZSA9IChkaXN0YW5jZSB8fCAwKSAqIGludmVydERpc3RhbmNlO1xuXG4gIHJldHVybiBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMFxuICAgID8geyB4OiBkaXN0YW5jZSwgeTogc2tpZGRpbmcgfVxuICAgIDogeyB4OiBza2lkZGluZywgeTogZGlzdGFuY2UgfTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KHsgc3RhdGUsIG9wdGlvbnMsIG5hbWUgfTogTW9kaWZpZXJBcmd1bWVudHM8T3B0aW9ucz4pIHtcbiAgY29uc3QgeyBvZmZzZXQgPSBbMCwgMF0gfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgZGF0YSA9IHBsYWNlbWVudHMucmVkdWNlKChhY2MsIHBsYWNlbWVudCkgPT4ge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCBzdGF0ZS5yZWN0cywgb2Zmc2V0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgY29uc3QgeyB4LCB5IH0gPSBkYXRhW3N0YXRlLnBsYWNlbWVudF07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnggKz0geDtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSArPSB5O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIE9mZnNldE1vZGlmaWVyID0gTW9kaWZpZXI8J29mZnNldCcsIE9wdGlvbnM+O1xuZXhwb3J0IGRlZmF1bHQgKHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldCxcbn06IE9mZnNldE1vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4uL2VudW1zJztcblxuY29uc3QgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQ6IFBsYWNlbWVudCk6IFBsYWNlbWVudCB7XG4gIHJldHVybiAocGxhY2VtZW50LnJlcGxhY2UoXG4gICAgL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLFxuICAgIG1hdGNoZWQgPT4gaGFzaFttYXRjaGVkXVxuICApOiBhbnkpO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgUGxhY2VtZW50IH0gZnJvbSAnLi4vZW51bXMnO1xuXG5jb25zdCBoYXNoID0geyBzdGFydDogJ2VuZCcsIGVuZDogJ3N0YXJ0JyB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChcbiAgcGxhY2VtZW50OiBQbGFjZW1lbnRcbik6IFBsYWNlbWVudCB7XG4gIHJldHVybiAocGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBtYXRjaGVkID0+IGhhc2hbbWF0Y2hlZF0pOiBhbnkpO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgU3RhdGUsIFBhZGRpbmcgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7XG4gIFBsYWNlbWVudCxcbiAgQ29tcHV0ZWRQbGFjZW1lbnQsXG4gIEJvdW5kYXJ5LFxuICBSb290Qm91bmRhcnksXG59IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSAnLi9nZXRWYXJpYXRpb24nO1xuaW1wb3J0IHtcbiAgdmFyaWF0aW9uUGxhY2VtZW50cyxcbiAgYmFzZVBsYWNlbWVudHMsXG4gIHBsYWNlbWVudHMgYXMgYWxsUGxhY2VtZW50cyxcbn0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gJy4vZGV0ZWN0T3ZlcmZsb3cnO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi9nZXRCYXNlUGxhY2VtZW50JztcblxudHlwZSBPcHRpb25zID0ge1xuICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgcGFkZGluZzogUGFkZGluZyxcbiAgYm91bmRhcnk6IEJvdW5kYXJ5LFxuICByb290Qm91bmRhcnk6IFJvb3RCb3VuZGFyeSxcbiAgZmxpcFZhcmlhdGlvbnM6IGJvb2xlYW4sXG4gIGFsbG93ZWRBdXRvUGxhY2VtZW50cz86IEFycmF5PFBsYWNlbWVudD4sXG59O1xuXG50eXBlIE92ZXJmbG93c01hcCA9IHsgW0NvbXB1dGVkUGxhY2VtZW50XTogbnVtYmVyIH07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KFxuICBzdGF0ZTogJFNoYXBlPFN0YXRlPixcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9XG4pOiBBcnJheTxDb21wdXRlZFBsYWNlbWVudD4ge1xuICBjb25zdCB7XG4gICAgcGxhY2VtZW50LFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBwYWRkaW5nLFxuICAgIGZsaXBWYXJpYXRpb25zLFxuICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IGFsbFBsYWNlbWVudHMsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuXG4gIGNvbnN0IHBsYWNlbWVudHMgPSB2YXJpYXRpb25cbiAgICA/IGZsaXBWYXJpYXRpb25zXG4gICAgICA/IHZhcmlhdGlvblBsYWNlbWVudHNcbiAgICAgIDogdmFyaWF0aW9uUGxhY2VtZW50cy5maWx0ZXIoXG4gICAgICAgICAgKHBsYWNlbWVudCkgPT4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvblxuICAgICAgICApXG4gICAgOiBiYXNlUGxhY2VtZW50cztcblxuICBsZXQgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLmZpbHRlcihcbiAgICAocGxhY2VtZW50KSA9PiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDBcbiAgKTtcblxuICBpZiAoYWxsb3dlZFBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuICB9XG5cbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV06IEZsb3cgc2VlbXMgdG8gaGF2ZSBwcm9ibGVtcyB3aXRoIHR3byBhcnJheSB1bmlvbnMuLi5cbiAgY29uc3Qgb3ZlcmZsb3dzOiBPdmVyZmxvd3NNYXAgPSBhbGxvd2VkUGxhY2VtZW50cy5yZWR1Y2UoKGFjYywgcGxhY2VtZW50KSA9PiB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nLFxuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG92ZXJmbG93cykuc29ydCgoYSwgYikgPT4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCwgQm91bmRhcnksIFJvb3RCb3VuZGFyeSB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXJBcmd1bWVudHMsIE1vZGlmaWVyLCBQYWRkaW5nIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50JztcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQnO1xuaW1wb3J0IGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50JztcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tICcuLi91dGlscy9kZXRlY3RPdmVyZmxvdyc7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQnO1xuaW1wb3J0IHsgYm90dG9tLCB0b3AsIHN0YXJ0LCByaWdodCwgbGVmdCwgYXV0byB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSAnLi4vdXRpbHMvZ2V0VmFyaWF0aW9uJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgT3B0aW9ucyA9IHtcbiAgbWFpbkF4aXM6IGJvb2xlYW4sXG4gIGFsdEF4aXM6IGJvb2xlYW4sXG4gIGZhbGxiYWNrUGxhY2VtZW50czogQXJyYXk8UGxhY2VtZW50PixcbiAgcGFkZGluZzogUGFkZGluZyxcbiAgYm91bmRhcnk6IEJvdW5kYXJ5LFxuICByb290Qm91bmRhcnk6IFJvb3RCb3VuZGFyeSxcbiAgYWx0Qm91bmRhcnk6IGJvb2xlYW4sXG4gIGZsaXBWYXJpYXRpb25zOiBib29sZWFuLFxuICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IEFycmF5PFBsYWNlbWVudD4sXG59O1xuXG5mdW5jdGlvbiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwbGFjZW1lbnQ6IFBsYWNlbWVudCk6IEFycmF5PFBsYWNlbWVudD4ge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3Qgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gIHJldHVybiBbXG4gICAgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSxcbiAgICBvcHBvc2l0ZVBsYWNlbWVudCxcbiAgICBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCksXG4gIF07XG59XG5cbmZ1bmN0aW9uIGZsaXAoeyBzdGF0ZSwgb3B0aW9ucywgbmFtZSB9OiBNb2RpZmllckFyZ3VtZW50czxPcHRpb25zPikge1xuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBtYWluQXhpczogY2hlY2tNYWluQXhpcyA9IHRydWUsXG4gICAgYWx0QXhpczogY2hlY2tBbHRBeGlzID0gdHJ1ZSxcbiAgICBmYWxsYmFja1BsYWNlbWVudHM6IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICBwYWRkaW5nLFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBhbHRCb3VuZGFyeSxcbiAgICBmbGlwVmFyaWF0aW9ucyA9IHRydWUsXG4gICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgY29uc3QgaXNCYXNlUGxhY2VtZW50ID0gYmFzZVBsYWNlbWVudCA9PT0gcHJlZmVycmVkUGxhY2VtZW50O1xuXG4gIGNvbnN0IGZhbGxiYWNrUGxhY2VtZW50cyA9XG4gICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8XG4gICAgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnNcbiAgICAgID8gW2dldE9wcG9zaXRlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCldXG4gICAgICA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuXG4gIGNvbnN0IHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50LCAuLi5mYWxsYmFja1BsYWNlbWVudHNdLnJlZHVjZShcbiAgICAoYWNjLCBwbGFjZW1lbnQpID0+IHtcbiAgICAgIHJldHVybiBhY2MuY29uY2F0KFxuICAgICAgICBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG9cbiAgICAgICAgICA/IGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCB7XG4gICAgICAgICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgICAgICAgYm91bmRhcnksXG4gICAgICAgICAgICAgIHJvb3RCb3VuZGFyeSxcbiAgICAgICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICAgICAgZmxpcFZhcmlhdGlvbnMsXG4gICAgICAgICAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiBwbGFjZW1lbnRcbiAgICAgICk7XG4gICAgfSxcbiAgICBbXVxuICApO1xuXG4gIGNvbnN0IHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIGNvbnN0IHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG5cbiAgY29uc3QgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICBsZXQgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgbGV0IGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcbiAgICBjb25zdCBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICAgIGNvbnN0IGlzU3RhcnRWYXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gc3RhcnQ7XG4gICAgY29uc3QgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIGNvbnN0IGxlbiA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICBjb25zdCBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyxcbiAgICB9KTtcblxuICAgIGxldCBtYWluVmFyaWF0aW9uU2lkZTogYW55ID0gaXNWZXJ0aWNhbFxuICAgICAgPyBpc1N0YXJ0VmFyaWF0aW9uXG4gICAgICAgID8gcmlnaHRcbiAgICAgICAgOiBsZWZ0XG4gICAgICA6IGlzU3RhcnRWYXJpYXRpb25cbiAgICAgID8gYm90dG9tXG4gICAgICA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIGNvbnN0IGFsdFZhcmlhdGlvblNpZGU6IGFueSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcblxuICAgIGNvbnN0IGNoZWNrcyA9IFtdO1xuXG4gICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKFxuICAgICAgICBvdmVyZmxvd1ttYWluVmFyaWF0aW9uU2lkZV0gPD0gMCxcbiAgICAgICAgb3ZlcmZsb3dbYWx0VmFyaWF0aW9uU2lkZV0gPD0gMFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KChjaGVjaykgPT4gY2hlY2spKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIOKAkyByZXNlYXJjaCBsYXRlclxuICAgIGNvbnN0IG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIGZvciAobGV0IGkgPSBudW1iZXJPZkNoZWNrczsgaSA+IDA7IGktLSkge1xuICAgICAgY29uc3QgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZCgocGxhY2VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrcyA9IGNoZWNrc01hcC5nZXQocGxhY2VtZW50KTtcbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgaSkuZXZlcnkoKGNoZWNrKSA9PiBjaGVjayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZml0dGluZ1BsYWNlbWVudCkge1xuICAgICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBmaXR0aW5nUGxhY2VtZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUucGxhY2VtZW50ICE9PSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwID0gdHJ1ZTtcbiAgICBzdGF0ZS5wbGFjZW1lbnQgPSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgc3RhdGUucmVzZXQgPSB0cnVlO1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIEZsaXBNb2RpZmllciA9IE1vZGlmaWVyPCdmbGlwJywgT3B0aW9ucz47XG5leHBvcnQgZGVmYXVsdCAoe1xuICBuYW1lOiAnZmxpcCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBmbGlwLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddLFxuICBkYXRhOiB7IF9za2lwOiBmYWxzZSB9LFxufTogRmxpcE1vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFsdEF4aXMoYXhpczogJ3gnIHwgJ3knKTogJ3gnIHwgJ3knIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBtYXggYXMgbWF0aE1heCwgbWluIGFzIG1hdGhNaW4gfSBmcm9tICcuL21hdGgnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2l0aGluKG1pbjogbnVtYmVyLCB2YWx1ZTogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiBtYXRoTWF4KG1pbiwgbWF0aE1pbih2YWx1ZSwgbWF4KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW5NYXhDbGFtcChtaW46IG51bWJlciwgdmFsdWU6IG51bWJlciwgbWF4OiBudW1iZXIpIHtcbiAgY29uc3QgdiA9IHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpO1xuICByZXR1cm4gdiA+IG1heCA/IG1heCA6IHY7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBzdGFydCB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB0eXBlIHsgUGxhY2VtZW50LCBCb3VuZGFyeSwgUm9vdEJvdW5kYXJ5IH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IHR5cGUgeyBSZWN0LCBNb2RpZmllckFyZ3VtZW50cywgTW9kaWZpZXIsIFBhZGRpbmcgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tICcuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50JztcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50JztcbmltcG9ydCBnZXRBbHRBeGlzIGZyb20gJy4uL3V0aWxzL2dldEFsdEF4aXMnO1xuaW1wb3J0IHsgd2l0aGluLCB3aXRoaW5NYXhDbGFtcCB9IGZyb20gJy4uL3V0aWxzL3dpdGhpbic7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdCc7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gJy4uL3V0aWxzL2RldGVjdE92ZXJmbG93JztcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSAnLi4vdXRpbHMvZ2V0VmFyaWF0aW9uJztcbmltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSAnLi4vdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0JztcbmltcG9ydCB7IG1pbiBhcyBtYXRoTWluLCBtYXggYXMgbWF0aE1heCB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuXG50eXBlIFRldGhlck9mZnNldCA9XG4gIHwgKCh7XG4gICAgICBwb3BwZXI6IFJlY3QsXG4gICAgICByZWZlcmVuY2U6IFJlY3QsXG4gICAgICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgICB9KSA9PiBudW1iZXIgfCB7IG1haW5BeGlzOiBudW1iZXIsIGFsdEF4aXM6IG51bWJlciB9KVxuICB8IG51bWJlclxuICB8IHsgbWFpbkF4aXM6IG51bWJlciwgYWx0QXhpczogbnVtYmVyIH07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIE9wdGlvbnMgPSB7XG4gIC8qIFByZXZlbnRzIGJvdW5kYXJpZXMgb3ZlcmZsb3cgb24gdGhlIG1haW4gYXhpcyAqL1xuICBtYWluQXhpczogYm9vbGVhbixcbiAgLyogUHJldmVudHMgYm91bmRhcmllcyBvdmVyZmxvdyBvbiB0aGUgYWx0ZXJuYXRlIGF4aXMgKi9cbiAgYWx0QXhpczogYm9vbGVhbixcbiAgLyogVGhlIGFyZWEgdG8gY2hlY2sgdGhlIHBvcHBlciBpcyBvdmVyZmxvd2luZyBpbiAqL1xuICBib3VuZGFyeTogQm91bmRhcnksXG4gIC8qIElmIHRoZSBwb3BwZXIgaXMgbm90IG92ZXJmbG93aW5nIHRoZSBtYWluIGFyZWEsIGZhbGxiYWNrIHRvIHRoaXMgb25lICovXG4gIHJvb3RCb3VuZGFyeTogUm9vdEJvdW5kYXJ5LFxuICAvKiBVc2UgdGhlIHJlZmVyZW5jZSdzIFwiY2xpcHBpbmdQYXJlbnRzXCIgYm91bmRhcnkgY29udGV4dCAqL1xuICBhbHRCb3VuZGFyeTogYm9vbGVhbixcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgcG9wcGVyIHRvIG92ZXJmbG93IGZyb20gaXRzIGJvdW5kYXJpZXMgdG8ga2VlcCBpdCBuZWFyIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudFxuICAgKi9cbiAgdGV0aGVyOiBib29sZWFuLFxuICAvKiBPZmZzZXRzIHdoZW4gdGhlIGB0ZXRoZXJgIG9wdGlvbiBzaG91bGQgYWN0aXZhdGUgKi9cbiAgdGV0aGVyT2Zmc2V0OiBUZXRoZXJPZmZzZXQsXG4gIC8qIFNldHMgYSBwYWRkaW5nIHRvIHRoZSBwcm92aWRlZCBib3VuZGFyeSAqL1xuICBwYWRkaW5nOiBQYWRkaW5nLFxufTtcblxuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KHsgc3RhdGUsIG9wdGlvbnMsIG5hbWUgfTogTW9kaWZpZXJBcmd1bWVudHM8T3B0aW9ucz4pIHtcbiAgY29uc3Qge1xuICAgIG1haW5BeGlzOiBjaGVja01haW5BeGlzID0gdHJ1ZSxcbiAgICBhbHRBeGlzOiBjaGVja0FsdEF4aXMgPSBmYWxzZSxcbiAgICBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnksXG4gICAgYWx0Qm91bmRhcnksXG4gICAgcGFkZGluZyxcbiAgICB0ZXRoZXIgPSB0cnVlLFxuICAgIHRldGhlck9mZnNldCA9IDAsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnksXG4gICAgcGFkZGluZyxcbiAgICBhbHRCb3VuZGFyeSxcbiAgfSk7XG4gIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIGNvbnN0IHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICBjb25zdCBpc0Jhc2VQbGFjZW1lbnQgPSAhdmFyaWF0aW9uO1xuICBjb25zdCBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgY29uc3QgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICBjb25zdCBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICBjb25zdCByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICBjb25zdCBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICBjb25zdCB0ZXRoZXJPZmZzZXRWYWx1ZSA9XG4gICAgdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyB0ZXRoZXJPZmZzZXQoe1xuICAgICAgICAgIC4uLnN0YXRlLnJlY3RzLFxuICAgICAgICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50LFxuICAgICAgICB9KVxuICAgICAgOiB0ZXRoZXJPZmZzZXQ7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZSA9XG4gICAgdHlwZW9mIHRldGhlck9mZnNldFZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgPyB7IG1haW5BeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZSwgYWx0QXhpczogdGV0aGVyT2Zmc2V0VmFsdWUgfVxuICAgICAgOiB7IG1haW5BeGlzOiAwLCBhbHRBeGlzOiAwLCAuLi50ZXRoZXJPZmZzZXRWYWx1ZSB9O1xuICBjb25zdCBvZmZzZXRNb2RpZmllclN0YXRlID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRcbiAgICA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF1cbiAgICA6IG51bGw7XG5cbiAgY29uc3QgZGF0YSA9IHsgeDogMCwgeTogMCB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgY29uc3QgbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgICBjb25zdCBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIGNvbnN0IGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgY29uc3Qgb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc107XG5cbiAgICBjb25zdCBtaW4gPSBvZmZzZXQgKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgY29uc3QgbWF4ID0gb2Zmc2V0IC0gb3ZlcmZsb3dbYWx0U2lkZV07XG5cbiAgICBjb25zdCBhZGRpdGl2ZSA9IHRldGhlciA/IC1wb3BwZXJSZWN0W2xlbl0gLyAyIDogMDtcblxuICAgIGNvbnN0IG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgY29uc3QgbWF4TGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IC1wb3BwZXJSZWN0W2xlbl0gOiAtcmVmZXJlbmNlUmVjdFtsZW5dO1xuXG4gICAgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG4gICAgY29uc3QgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgY29uc3QgYXJyb3dSZWN0ID1cbiAgICAgIHRldGhlciAmJiBhcnJvd0VsZW1lbnRcbiAgICAgICAgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudClcbiAgICAgICAgOiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcbiAgICBjb25zdCBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J11cbiAgICAgID8gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddLnBhZGRpbmdcbiAgICAgIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgY29uc3QgYXJyb3dQYWRkaW5nTWluID0gYXJyb3dQYWRkaW5nT2JqZWN0W21haW5TaWRlXTtcbiAgICBjb25zdCBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07XG5cbiAgICAvLyBJZiB0aGUgcmVmZXJlbmNlIGxlbmd0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIGFycm93IGxlbmd0aCwgd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHRvIGluY2x1ZGUgaXRzIGZ1bGwgc2l6ZSBpbiB0aGUgY2FsY3VsYXRpb24uIElmIHRoZSByZWZlcmVuY2UgaXMgc21hbGxcbiAgICAvLyBhbmQgbmVhciB0aGUgZWRnZSBvZiBhIGJvdW5kYXJ5LCB0aGUgcG9wcGVyIGNhbiBvdmVyZmxvdyBldmVuIGlmIHRoZVxuICAgIC8vIHJlZmVyZW5jZSBpcyBub3Qgb3ZlcmZsb3dpbmcgYXMgd2VsbCAoZS5nLiB2aXJ0dWFsIGVsZW1lbnRzIHdpdGggbm9cbiAgICAvLyB3aWR0aCBvciBoZWlnaHQpXG4gICAgY29uc3QgYXJyb3dMZW4gPSB3aXRoaW4oMCwgcmVmZXJlbmNlUmVjdFtsZW5dLCBhcnJvd1JlY3RbbGVuXSk7XG5cbiAgICBjb25zdCBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnRcbiAgICAgID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtXG4gICAgICAgIGFkZGl0aXZlIC1cbiAgICAgICAgYXJyb3dMZW4gLVxuICAgICAgICBhcnJvd1BhZGRpbmdNaW4gLVxuICAgICAgICBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXNcbiAgICAgIDogbWluTGVuIC1cbiAgICAgICAgYXJyb3dMZW4gLVxuICAgICAgICBhcnJvd1BhZGRpbmdNaW4gLVxuICAgICAgICBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXM7XG4gICAgY29uc3QgbWF4T2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50XG4gICAgICA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICtcbiAgICAgICAgYWRkaXRpdmUgK1xuICAgICAgICBhcnJvd0xlbiArXG4gICAgICAgIGFycm93UGFkZGluZ01heCArXG4gICAgICAgIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpc1xuICAgICAgOiBtYXhMZW4gK1xuICAgICAgICBhcnJvd0xlbiArXG4gICAgICAgIGFycm93UGFkZGluZ01heCArXG4gICAgICAgIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcblxuICAgIGNvbnN0IGFycm93T2Zmc2V0UGFyZW50ID1cbiAgICAgIHN0YXRlLmVsZW1lbnRzLmFycm93ICYmIGdldE9mZnNldFBhcmVudChzdGF0ZS5lbGVtZW50cy5hcnJvdyk7XG4gICAgY29uc3QgY2xpZW50T2Zmc2V0ID0gYXJyb3dPZmZzZXRQYXJlbnRcbiAgICAgID8gbWFpbkF4aXMgPT09ICd5J1xuICAgICAgICA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFRvcCB8fCAwXG4gICAgICAgIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50TGVmdCB8fCAwXG4gICAgICA6IDA7XG5cbiAgICBjb25zdCBvZmZzZXRNb2RpZmllclZhbHVlID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZT8uW21haW5BeGlzXSA/PyAwO1xuICAgIGNvbnN0IHRldGhlck1pbiA9IG9mZnNldCArIG1pbk9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWUgLSBjbGllbnRPZmZzZXQ7XG4gICAgY29uc3QgdGV0aGVyTWF4ID0gb2Zmc2V0ICsgbWF4T2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZTtcblxuICAgIGNvbnN0IHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbihcbiAgICAgIHRldGhlciA/IG1hdGhNaW4obWluLCB0ZXRoZXJNaW4pIDogbWluLFxuICAgICAgb2Zmc2V0LFxuICAgICAgdGV0aGVyID8gbWF0aE1heChtYXgsIHRldGhlck1heCkgOiBtYXhcbiAgICApO1xuXG4gICAgcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cblxuICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgY29uc3QgbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gdG9wIDogbGVmdDtcbiAgICBjb25zdCBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIGNvbnN0IG9mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICBjb25zdCBsZW4gPSBhbHRBeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBjb25zdCBtaW4gPSBvZmZzZXQgKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgY29uc3QgbWF4ID0gb2Zmc2V0IC0gb3ZlcmZsb3dbYWx0U2lkZV07XG5cbiAgICBjb25zdCBpc09yaWdpblNpZGUgPSBbdG9wLCBsZWZ0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIGNvbnN0IG9mZnNldE1vZGlmaWVyVmFsdWUgPSBvZmZzZXRNb2RpZmllclN0YXRlPy5bYWx0QXhpc10gPz8gMDtcbiAgICBjb25zdCB0ZXRoZXJNaW4gPSBpc09yaWdpblNpZGVcbiAgICAgID8gbWluXG4gICAgICA6IG9mZnNldCAtXG4gICAgICAgIHJlZmVyZW5jZVJlY3RbbGVuXSAtXG4gICAgICAgIHBvcHBlclJlY3RbbGVuXSAtXG4gICAgICAgIG9mZnNldE1vZGlmaWVyVmFsdWUgK1xuICAgICAgICBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUuYWx0QXhpcztcbiAgICBjb25zdCB0ZXRoZXJNYXggPSBpc09yaWdpblNpZGVcbiAgICAgID8gb2Zmc2V0ICtcbiAgICAgICAgcmVmZXJlbmNlUmVjdFtsZW5dICtcbiAgICAgICAgcG9wcGVyUmVjdFtsZW5dIC1cbiAgICAgICAgb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtXG4gICAgICAgIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzXG4gICAgICA6IG1heDtcblxuICAgIGNvbnN0IHByZXZlbnRlZE9mZnNldCA9XG4gICAgICB0ZXRoZXIgJiYgaXNPcmlnaW5TaWRlXG4gICAgICAgID8gd2l0aGluTWF4Q2xhbXAodGV0aGVyTWluLCBvZmZzZXQsIHRldGhlck1heClcbiAgICAgICAgOiB3aXRoaW4odGV0aGVyID8gdGV0aGVyTWluIDogbWluLCBvZmZzZXQsIHRldGhlciA/IHRldGhlck1heCA6IG1heCk7XG5cbiAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbYWx0QXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgUHJldmVudE92ZXJmbG93TW9kaWZpZXIgPSBNb2RpZmllcjwncHJldmVudE92ZXJmbG93JywgT3B0aW9ucz47XG5leHBvcnQgZGVmYXVsdCAoe1xuICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbn06IFByZXZlbnRPdmVyZmxvd01vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IE1vZGlmaWVyLCBNb2RpZmllckFyZ3VtZW50cywgUGFkZGluZywgUmVjdCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgUGxhY2VtZW50IH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudCc7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdCc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnLi4vZG9tLXV0aWxzL2NvbnRhaW5zJztcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudCc7XG5pbXBvcnQgeyB3aXRoaW4gfSBmcm9tICcuLi91dGlscy93aXRoaW4nO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tICcuLi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QnO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tICcuLi91dGlscy9leHBhbmRUb0hhc2hNYXAnO1xuaW1wb3J0IHsgbGVmdCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB0b3AsIGJvdHRvbSB9IGZyb20gJy4uL2VudW1zJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgT3B0aW9ucyA9IHtcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQgfCBzdHJpbmcgfCBudWxsLFxuICBwYWRkaW5nOlxuICAgIHwgUGFkZGluZ1xuICAgIHwgKCh7fFxuICAgICAgICBwb3BwZXI6IFJlY3QsXG4gICAgICAgIHJlZmVyZW5jZTogUmVjdCxcbiAgICAgICAgcGxhY2VtZW50OiBQbGFjZW1lbnQsXG4gICAgICB8fSkgPT4gUGFkZGluZyksXG59O1xuXG5jb25zdCB0b1BhZGRpbmdPYmplY3QgPSAocGFkZGluZywgc3RhdGUpID0+IHtcbiAgcGFkZGluZyA9XG4gICAgdHlwZW9mIHBhZGRpbmcgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcGFkZGluZyh7IC4uLnN0YXRlLnJlY3RzLCBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudCB9KVxuICAgICAgOiBwYWRkaW5nO1xuXG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QoXG4gICAgdHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInXG4gICAgICA/IHBhZGRpbmdcbiAgICAgIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKVxuICApO1xufTtcblxuZnVuY3Rpb24gYXJyb3coeyBzdGF0ZSwgbmFtZSwgb3B0aW9ucyB9OiBNb2RpZmllckFyZ3VtZW50czxPcHRpb25zPikge1xuICBjb25zdCBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgY29uc3QgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgY29uc3QgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgY29uc3QgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICBjb25zdCBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIGlmICghYXJyb3dFbGVtZW50IHx8ICFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcGFkZGluZ09iamVjdCA9IHRvUGFkZGluZ09iamVjdChvcHRpb25zLnBhZGRpbmcsIHN0YXRlKTtcbiAgY29uc3QgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICBjb25zdCBtaW5Qcm9wID0gYXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgY29uc3QgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gIGNvbnN0IGVuZERpZmYgPVxuICAgIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICtcbiAgICBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLVxuICAgIHBvcHBlck9mZnNldHNbYXhpc10gLVxuICAgIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICBjb25zdCBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuXG4gIGNvbnN0IGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIGNvbnN0IGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudFxuICAgID8gYXhpcyA9PT0gJ3knXG4gICAgICA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwXG4gICAgICA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDBcbiAgICA6IDA7XG5cbiAgY29uc3QgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7XG5cbiAgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG4gIGNvbnN0IG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIGNvbnN0IG1heCA9IGNsaWVudFNpemUgLSBhcnJvd1JlY3RbbGVuXSAtIHBhZGRpbmdPYmplY3RbbWF4UHJvcF07XG4gIGNvbnN0IGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIGNvbnN0IG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTtcblxuICAvLyBQcmV2ZW50cyBicmVha2luZyBzeW50YXggaGlnaGxpZ2h0aW5nLi4uXG4gIGNvbnN0IGF4aXNQcm9wOiBzdHJpbmcgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0ge1xuICAgIFtheGlzUHJvcF06IG9mZnNldCxcbiAgICBjZW50ZXJPZmZzZXQ6IG9mZnNldCAtIGNlbnRlcixcbiAgfTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KHsgc3RhdGUsIG9wdGlvbnMgfTogTW9kaWZpZXJBcmd1bWVudHM8T3B0aW9ucz4pIHtcbiAgbGV0IHsgZWxlbWVudDogYXJyb3dFbGVtZW50ID0gJ1tkYXRhLXBvcHBlci1hcnJvd10nIH0gPSBvcHRpb25zO1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRhaW5zKHN0YXRlLmVsZW1lbnRzLnBvcHBlciwgYXJyb3dFbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXRlLmVsZW1lbnRzLmFycm93ID0gYXJyb3dFbGVtZW50O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBBcnJvd01vZGlmaWVyID0gTW9kaWZpZXI8J2Fycm93JywgT3B0aW9ucz47XG5leHBvcnQgZGVmYXVsdCAoe1xuICBuYW1lOiAnYXJyb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogYXJyb3csXG4gIGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxufTogQXJyb3dNb2RpZmllcik7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUge1xuICBNb2RpZmllckFyZ3VtZW50cyxcbiAgTW9kaWZpZXIsXG4gIFJlY3QsXG4gIFNpZGVPYmplY3QsXG4gIE9mZnNldHMsXG59IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tICcuLi91dGlscy9kZXRlY3RPdmVyZmxvdyc7XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKFxuICBvdmVyZmxvdzogU2lkZU9iamVjdCxcbiAgcmVjdDogUmVjdCxcbiAgcHJldmVudGVkT2Zmc2V0czogT2Zmc2V0cyA9IHsgeDogMCwgeTogMCB9XG4pOiBTaWRlT2JqZWN0IHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93OiBTaWRlT2JqZWN0KTogYm9vbGVhbiB7XG4gIHJldHVybiBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5zb21lKChzaWRlKSA9PiBvdmVyZmxvd1tzaWRlXSA+PSAwKTtcbn1cblxuZnVuY3Rpb24gaGlkZSh7IHN0YXRlLCBuYW1lIH06IE1vZGlmaWVyQXJndW1lbnRzPHt8fH0+KSB7XG4gIGNvbnN0IHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIGNvbnN0IHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIGNvbnN0IHByZXZlbnRlZE9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdztcblxuICBjb25zdCByZWZlcmVuY2VPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgZWxlbWVudENvbnRleHQ6ICdyZWZlcmVuY2UnLFxuICB9KTtcbiAgY29uc3QgcG9wcGVyQWx0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGFsdEJvdW5kYXJ5OiB0cnVlLFxuICB9KTtcblxuICBjb25zdCByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhcbiAgICByZWZlcmVuY2VPdmVyZmxvdyxcbiAgICByZWZlcmVuY2VSZWN0XG4gICk7XG4gIGNvbnN0IHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhcbiAgICBwb3BwZXJBbHRPdmVyZmxvdyxcbiAgICBwb3BwZXJSZWN0LFxuICAgIHByZXZlbnRlZE9mZnNldHNcbiAgKTtcblxuICBjb25zdCBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICBjb25zdCBoYXNQb3BwZXJFc2NhcGVkID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHBvcHBlckVzY2FwZU9mZnNldHMpO1xuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzLFxuICAgIHBvcHBlckVzY2FwZU9mZnNldHMsXG4gICAgaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgaGFzUG9wcGVyRXNjYXBlZCxcbiAgfTtcblxuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IHtcbiAgICAuLi5zdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlcixcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZCxcbiAgfTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgSGlkZU1vZGlmaWVyID0gTW9kaWZpZXI8J2hpZGUnLCB7fHx9PjtcbmV4cG9ydCBkZWZhdWx0ICh7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGUsXG59OiBIaWRlTW9kaWZpZXIpO1xuIiwiLy8gQGZsb3dcbmltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tICcuL2NyZWF0ZVBvcHBlcic7XG5cbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tICcuL21vZGlmaWVycy9ldmVudExpc3RlbmVycyc7XG5pbXBvcnQgcG9wcGVyT2Zmc2V0cyBmcm9tICcuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzJztcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gJy4vbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMnO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gJy4vbW9kaWZpZXJzL2FwcGx5U3R5bGVzJztcblxuZXhwb3J0IHR5cGUgKiBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZGVmYXVsdE1vZGlmaWVycyA9IFtcbiAgZXZlbnRMaXN0ZW5lcnMsXG4gIHBvcHBlck9mZnNldHMsXG4gIGNvbXB1dGVTdHlsZXMsXG4gIGFwcGx5U3R5bGVzLFxuXTtcblxuY29uc3QgY3JlYXRlUG9wcGVyID0gcG9wcGVyR2VuZXJhdG9yKHsgZGVmYXVsdE1vZGlmaWVycyB9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gJy4vY3JlYXRlUG9wcGVyJztcblxuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gJy4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzJztcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gJy4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMnO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSAnLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcyc7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSAnLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMnO1xuaW1wb3J0IG9mZnNldCBmcm9tICcuL21vZGlmaWVycy9vZmZzZXQnO1xuaW1wb3J0IGZsaXAgZnJvbSAnLi9tb2RpZmllcnMvZmxpcCc7XG5pbXBvcnQgcHJldmVudE92ZXJmbG93IGZyb20gJy4vbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdyc7XG5pbXBvcnQgYXJyb3cgZnJvbSAnLi9tb2RpZmllcnMvYXJyb3cnO1xuaW1wb3J0IGhpZGUgZnJvbSAnLi9tb2RpZmllcnMvaGlkZSc7XG5cbmV4cG9ydCB0eXBlICogZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IGRlZmF1bHRNb2RpZmllcnMgPSBbXG4gIGV2ZW50TGlzdGVuZXJzLFxuICBwb3BwZXJPZmZzZXRzLFxuICBjb21wdXRlU3R5bGVzLFxuICBhcHBseVN0eWxlcyxcbiAgb2Zmc2V0LFxuICBmbGlwLFxuICBwcmV2ZW50T3ZlcmZsb3csXG4gIGFycm93LFxuICBoaWRlLFxuXTtcblxuY29uc3QgY3JlYXRlUG9wcGVyID0gcG9wcGVyR2VuZXJhdG9yKHsgZGVmYXVsdE1vZGlmaWVycyB9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgYXMgY3JlYXRlUG9wcGVyTGl0ZSB9IGZyb20gJy4vcG9wcGVyLWxpdGUnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0ICogZnJvbSAnLi9tb2RpZmllcnMnO1xuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwIGRvbS9kYXRhLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBlbGVtZW50TWFwID0gbmV3IE1hcCgpXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0KGVsZW1lbnQsIGtleSwgaW5zdGFuY2UpIHtcbiAgICBpZiAoIWVsZW1lbnRNYXAuaGFzKGVsZW1lbnQpKSB7XG4gICAgICBlbGVtZW50TWFwLnNldChlbGVtZW50LCBuZXcgTWFwKCkpXG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2VNYXAgPSBlbGVtZW50TWFwLmdldChlbGVtZW50KVxuXG4gICAgLy8gbWFrZSBpdCBjbGVhciB3ZSBvbmx5IHdhbnQgb25lIGluc3RhbmNlIHBlciBlbGVtZW50XG4gICAgLy8gY2FuIGJlIHJlbW92ZWQgbGF0ZXIgd2hlbiBtdWx0aXBsZSBrZXkvaW5zdGFuY2VzIGFyZSBmaW5lIHRvIGJlIHVzZWRcbiAgICBpZiAoIWluc3RhbmNlTWFwLmhhcyhrZXkpICYmIGluc3RhbmNlTWFwLnNpemUgIT09IDApIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLmVycm9yKGBCb290c3RyYXAgZG9lc24ndCBhbGxvdyBtb3JlIHRoYW4gb25lIGluc3RhbmNlIHBlciBlbGVtZW50LiBCb3VuZCBpbnN0YW5jZTogJHtBcnJheS5mcm9tKGluc3RhbmNlTWFwLmtleXMoKSlbMF19LmApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpbnN0YW5jZU1hcC5zZXQoa2V5LCBpbnN0YW5jZSlcbiAgfSxcblxuICBnZXQoZWxlbWVudCwga2V5KSB7XG4gICAgaWYgKGVsZW1lbnRNYXAuaGFzKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudE1hcC5nZXQoZWxlbWVudCkuZ2V0KGtleSkgfHwgbnVsbFxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH0sXG5cbiAgcmVtb3ZlKGVsZW1lbnQsIGtleSkge1xuICAgIGlmICghZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGluc3RhbmNlTWFwID0gZWxlbWVudE1hcC5nZXQoZWxlbWVudClcblxuICAgIGluc3RhbmNlTWFwLmRlbGV0ZShrZXkpXG5cbiAgICAvLyBmcmVlIHVwIGVsZW1lbnQgcmVmZXJlbmNlcyBpZiB0aGVyZSBhcmUgbm8gaW5zdGFuY2VzIGxlZnQgZm9yIGFuIGVsZW1lbnRcbiAgICBpZiAoaW5zdGFuY2VNYXAuc2l6ZSA9PT0gMCkge1xuICAgICAgZWxlbWVudE1hcC5kZWxldGUoZWxlbWVudClcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCB1dGlsL2luZGV4LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTUFYX1VJRCA9IDFfMDAwXzAwMFxuY29uc3QgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwXG5jb25zdCBUUkFOU0lUSU9OX0VORCA9ICd0cmFuc2l0aW9uZW5kJ1xuXG4vKipcbiAqIFByb3Blcmx5IGVzY2FwZSBJRHMgc2VsZWN0b3JzIHRvIGhhbmRsZSB3ZWlyZCBJRHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuY29uc3QgcGFyc2VTZWxlY3RvciA9IHNlbGVjdG9yID0+IHtcbiAgaWYgKHNlbGVjdG9yICYmIHdpbmRvdy5DU1MgJiYgd2luZG93LkNTUy5lc2NhcGUpIHtcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yIG5lZWRzIGVzY2FwaW5nIHRvIGhhbmRsZSBJRHMgKGh0bWw1KykgY29udGFpbmluZyBmb3IgaW5zdGFuY2UgL1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZSgvIyhbXlxcc1wiIyddKykvZywgKG1hdGNoLCBpZCkgPT4gYCMke0NTUy5lc2NhcGUoaWQpfWApXG4gIH1cblxuICByZXR1cm4gc2VsZWN0b3Jcbn1cblxuLy8gU2hvdXQtb3V0IEFuZ3VzIENyb2xsIChodHRwczovL2dvby5nbC9weHdRR3ApXG5jb25zdCB0b1R5cGUgPSBvYmplY3QgPT4ge1xuICBpZiAob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGAke29iamVjdH1gXG4gIH1cblxuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKClcbn1cblxuLyoqXG4gKiBQdWJsaWMgVXRpbCBBUElcbiAqL1xuXG5jb25zdCBnZXRVSUQgPSBwcmVmaXggPT4ge1xuICBkbyB7XG4gICAgcHJlZml4ICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpXG4gIH0gd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpXG5cbiAgcmV0dXJuIHByZWZpeFxufVxuXG5jb25zdCBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcbiAgbGV0IHsgdHJhbnNpdGlvbkR1cmF0aW9uLCB0cmFuc2l0aW9uRGVsYXkgfSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpXG5cbiAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gPSBOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gIGNvbnN0IGZsb2F0VHJhbnNpdGlvbkRlbGF5ID0gTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KVxuXG4gIC8vIFJldHVybiAwIGlmIGVsZW1lbnQgb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyBub3QgZm91bmRcbiAgaWYgKCFmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiAmJiAhZmxvYXRUcmFuc2l0aW9uRGVsYXkpIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgLy8gSWYgbXVsdGlwbGUgZHVyYXRpb25zIGFyZSBkZWZpbmVkLCB0YWtlIHRoZSBmaXJzdFxuICB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24uc3BsaXQoJywnKVswXVxuICB0cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkuc3BsaXQoJywnKVswXVxuXG4gIHJldHVybiAoTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSArIE51bWJlci5wYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSkpICogTUlMTElTRUNPTkRTX01VTFRJUExJRVJcbn1cblxuY29uc3QgdHJpZ2dlclRyYW5zaXRpb25FbmQgPSBlbGVtZW50ID0+IHtcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChUUkFOU0lUSU9OX0VORCkpXG59XG5cbmNvbnN0IGlzRWxlbWVudCA9IG9iamVjdCA9PiB7XG4gIGlmICghb2JqZWN0IHx8IHR5cGVvZiBvYmplY3QgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBpZiAodHlwZW9mIG9iamVjdC5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0WzBdXG4gIH1cblxuICByZXR1cm4gdHlwZW9mIG9iamVjdC5ub2RlVHlwZSAhPT0gJ3VuZGVmaW5lZCdcbn1cblxuY29uc3QgZ2V0RWxlbWVudCA9IG9iamVjdCA9PiB7XG4gIC8vIGl0J3MgYSBqUXVlcnkgb2JqZWN0IG9yIGEgbm9kZSBlbGVtZW50XG4gIGlmIChpc0VsZW1lbnQob2JqZWN0KSkge1xuICAgIHJldHVybiBvYmplY3QuanF1ZXJ5ID8gb2JqZWN0WzBdIDogb2JqZWN0XG4gIH1cblxuICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ3N0cmluZycgJiYgb2JqZWN0Lmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJzZVNlbGVjdG9yKG9iamVjdCkpXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5jb25zdCBpc1Zpc2libGUgPSBlbGVtZW50ID0+IHtcbiAgaWYgKCFpc0VsZW1lbnQoZWxlbWVudCkgfHwgZWxlbWVudC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgY29uc3QgZWxlbWVudElzVmlzaWJsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgndmlzaWJpbGl0eScpID09PSAndmlzaWJsZSdcbiAgLy8gSGFuZGxlIGBkZXRhaWxzYCBlbGVtZW50IGFzIGl0cyBjb250ZW50IG1heSBmYWxzaWUgYXBwZWFyIHZpc2libGUgd2hlbiBpdCBpcyBjbG9zZWRcbiAgY29uc3QgY2xvc2VkRGV0YWlscyA9IGVsZW1lbnQuY2xvc2VzdCgnZGV0YWlsczpub3QoW29wZW5dKScpXG5cbiAgaWYgKCFjbG9zZWREZXRhaWxzKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRJc1Zpc2libGVcbiAgfVxuXG4gIGlmIChjbG9zZWREZXRhaWxzICE9PSBlbGVtZW50KSB7XG4gICAgY29uc3Qgc3VtbWFyeSA9IGVsZW1lbnQuY2xvc2VzdCgnc3VtbWFyeScpXG4gICAgaWYgKHN1bW1hcnkgJiYgc3VtbWFyeS5wYXJlbnROb2RlICE9PSBjbG9zZWREZXRhaWxzKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoc3VtbWFyeSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRJc1Zpc2libGVcbn1cblxuY29uc3QgaXNEaXNhYmxlZCA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlmICh0eXBlb2YgZWxlbWVudC5kaXNhYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZWxlbWVudC5kaXNhYmxlZFxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpICE9PSAnZmFsc2UnXG59XG5cbmNvbnN0IGZpbmRTaGFkb3dSb290ID0gZWxlbWVudCA9PiB7XG4gIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dGFjaFNoYWRvdykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcbiAgaWYgKHR5cGVvZiBlbGVtZW50LmdldFJvb3ROb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3Qgcm9vdCA9IGVsZW1lbnQuZ2V0Um9vdE5vZGUoKVxuICAgIHJldHVybiByb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCA/IHJvb3QgOiBudWxsXG4gIH1cblxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICByZXR1cm4gZWxlbWVudFxuICB9XG5cbiAgLy8gd2hlbiB3ZSBkb24ndCBmaW5kIGEgc2hhZG93IHJvb3RcbiAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIGZpbmRTaGFkb3dSb290KGVsZW1lbnQucGFyZW50Tm9kZSlcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbi8qKlxuICogVHJpY2sgdG8gcmVzdGFydCBhbiBlbGVtZW50J3MgYW5pbWF0aW9uXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB2b2lkXG4gKlxuICogQHNlZSBodHRwczovL3d3dy5jaGFyaXN0aGVvLmlvL2Jsb2cvMjAyMS8wMi9yZXN0YXJ0LWEtY3NzLWFuaW1hdGlvbi13aXRoLWphdmFzY3JpcHQvI3Jlc3RhcnRpbmctYS1jc3MtYW5pbWF0aW9uXG4gKi9cbmNvbnN0IHJlZmxvdyA9IGVsZW1lbnQgPT4ge1xuICBlbGVtZW50Lm9mZnNldEhlaWdodCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xufVxuXG5jb25zdCBnZXRqUXVlcnkgPSAoKSA9PiB7XG4gIGlmICh3aW5kb3cualF1ZXJ5ICYmICFkb2N1bWVudC5ib2R5Lmhhc0F0dHJpYnV0ZSgnZGF0YS1icy1uby1qcXVlcnknKSkge1xuICAgIHJldHVybiB3aW5kb3cualF1ZXJ5XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5jb25zdCBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzID0gW11cblxuY29uc3Qgb25ET01Db250ZW50TG9hZGVkID0gY2FsbGJhY2sgPT4ge1xuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgLy8gYWRkIGxpc3RlbmVyIG9uIHRoZSBmaXJzdCBjYWxsIHdoZW4gdGhlIGRvY3VtZW50IGlzIGluIGxvYWRpbmcgc3RhdGVcbiAgICBpZiAoIURPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIERPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MpIHtcbiAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgRE9NQ29udGVudExvYWRlZENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKVxuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKClcbiAgfVxufVxuXG5jb25zdCBpc1JUTCA9ICgpID0+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kaXIgPT09ICdydGwnXG5cbmNvbnN0IGRlZmluZUpRdWVyeVBsdWdpbiA9IHBsdWdpbiA9PiB7XG4gIG9uRE9NQ29udGVudExvYWRlZCgoKSA9PiB7XG4gICAgY29uc3QgJCA9IGdldGpRdWVyeSgpXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCQpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBwbHVnaW4uTkFNRVxuICAgICAgY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltuYW1lXVxuICAgICAgJC5mbltuYW1lXSA9IHBsdWdpbi5qUXVlcnlJbnRlcmZhY2VcbiAgICAgICQuZm5bbmFtZV0uQ29uc3RydWN0b3IgPSBwbHVnaW5cbiAgICAgICQuZm5bbmFtZV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgICAgICAgJC5mbltuYW1lXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICAgICAgICByZXR1cm4gcGx1Z2luLmpRdWVyeUludGVyZmFjZVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cblxuY29uc3QgZXhlY3V0ZSA9IChwb3NzaWJsZUNhbGxiYWNrLCBhcmdzID0gW10sIGRlZmF1bHRWYWx1ZSA9IHBvc3NpYmxlQ2FsbGJhY2spID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBwb3NzaWJsZUNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gcG9zc2libGVDYWxsYmFjayguLi5hcmdzKSA6IGRlZmF1bHRWYWx1ZVxufVxuXG5jb25zdCBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uID0gKGNhbGxiYWNrLCB0cmFuc2l0aW9uRWxlbWVudCwgd2FpdEZvclRyYW5zaXRpb24gPSB0cnVlKSA9PiB7XG4gIGlmICghd2FpdEZvclRyYW5zaXRpb24pIHtcbiAgICBleGVjdXRlKGNhbGxiYWNrKVxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgZHVyYXRpb25QYWRkaW5nID0gNVxuICBjb25zdCBlbXVsYXRlZER1cmF0aW9uID0gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodHJhbnNpdGlvbkVsZW1lbnQpICsgZHVyYXRpb25QYWRkaW5nXG5cbiAgbGV0IGNhbGxlZCA9IGZhbHNlXG5cbiAgY29uc3QgaGFuZGxlciA9ICh7IHRhcmdldCB9KSA9PiB7XG4gICAgaWYgKHRhcmdldCAhPT0gdHJhbnNpdGlvbkVsZW1lbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNhbGxlZCA9IHRydWVcbiAgICB0cmFuc2l0aW9uRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFRSQU5TSVRJT05fRU5ELCBoYW5kbGVyKVxuICAgIGV4ZWN1dGUoY2FsbGJhY2spXG4gIH1cblxuICB0cmFuc2l0aW9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFRSQU5TSVRJT05fRU5ELCBoYW5kbGVyKVxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkVsZW1lbnQpXG4gICAgfVxuICB9LCBlbXVsYXRlZER1cmF0aW9uKVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgcHJldmlvdXMvbmV4dCBlbGVtZW50IG9mIGEgbGlzdC5cbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBsaXN0ICAgIFRoZSBsaXN0IG9mIGVsZW1lbnRzXG4gKiBAcGFyYW0gYWN0aXZlRWxlbWVudCAgIFRoZSBhY3RpdmUgZWxlbWVudFxuICogQHBhcmFtIHNob3VsZEdldE5leHQgICBDaG9vc2UgdG8gZ2V0IG5leHQgb3IgcHJldmlvdXMgZWxlbWVudFxuICogQHBhcmFtIGlzQ3ljbGVBbGxvd2VkXG4gKiBAcmV0dXJuIHtFbGVtZW50fGVsZW19IFRoZSBwcm9wZXIgZWxlbWVudFxuICovXG5jb25zdCBnZXROZXh0QWN0aXZlRWxlbWVudCA9IChsaXN0LCBhY3RpdmVFbGVtZW50LCBzaG91bGRHZXROZXh0LCBpc0N5Y2xlQWxsb3dlZCkgPT4ge1xuICBjb25zdCBsaXN0TGVuZ3RoID0gbGlzdC5sZW5ndGhcbiAgbGV0IGluZGV4ID0gbGlzdC5pbmRleE9mKGFjdGl2ZUVsZW1lbnQpXG5cbiAgLy8gaWYgdGhlIGVsZW1lbnQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGxpc3QgcmV0dXJuIGFuIGVsZW1lbnRcbiAgLy8gZGVwZW5kaW5nIG9uIHRoZSBkaXJlY3Rpb24gYW5kIGlmIGN5Y2xlIGlzIGFsbG93ZWRcbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiAhc2hvdWxkR2V0TmV4dCAmJiBpc0N5Y2xlQWxsb3dlZCA/IGxpc3RbbGlzdExlbmd0aCAtIDFdIDogbGlzdFswXVxuICB9XG5cbiAgaW5kZXggKz0gc2hvdWxkR2V0TmV4dCA/IDEgOiAtMVxuXG4gIGlmIChpc0N5Y2xlQWxsb3dlZCkge1xuICAgIGluZGV4ID0gKGluZGV4ICsgbGlzdExlbmd0aCkgJSBsaXN0TGVuZ3RoXG4gIH1cblxuICByZXR1cm4gbGlzdFtNYXRoLm1heCgwLCBNYXRoLm1pbihpbmRleCwgbGlzdExlbmd0aCAtIDEpKV1cbn1cblxuZXhwb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBleGVjdXRlLFxuICBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uLFxuICBmaW5kU2hhZG93Um9vdCxcbiAgZ2V0RWxlbWVudCxcbiAgZ2V0alF1ZXJ5LFxuICBnZXROZXh0QWN0aXZlRWxlbWVudCxcbiAgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQsXG4gIGdldFVJRCxcbiAgaXNEaXNhYmxlZCxcbiAgaXNFbGVtZW50LFxuICBpc1JUTCxcbiAgaXNWaXNpYmxlLFxuICBub29wLFxuICBvbkRPTUNvbnRlbnRMb2FkZWQsXG4gIHBhcnNlU2VsZWN0b3IsXG4gIHJlZmxvdyxcbiAgdHJpZ2dlclRyYW5zaXRpb25FbmQsXG4gIHRvVHlwZVxufVxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwIGRvbS9ldmVudC1oYW5kbGVyLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHsgZ2V0alF1ZXJ5IH0gZnJvbSAnLi4vdXRpbC9pbmRleC5qcydcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBuYW1lc3BhY2VSZWdleCA9IC9bXi5dKig/PVxcLi4qKVxcLnwuKi9cbmNvbnN0IHN0cmlwTmFtZVJlZ2V4ID0gL1xcLi4qL1xuY29uc3Qgc3RyaXBVaWRSZWdleCA9IC86OlxcZCskL1xuY29uc3QgZXZlbnRSZWdpc3RyeSA9IHt9IC8vIEV2ZW50cyBzdG9yYWdlXG5sZXQgdWlkRXZlbnQgPSAxXG5jb25zdCBjdXN0b21FdmVudHMgPSB7XG4gIG1vdXNlZW50ZXI6ICdtb3VzZW92ZXInLFxuICBtb3VzZWxlYXZlOiAnbW91c2VvdXQnXG59XG5cbmNvbnN0IG5hdGl2ZUV2ZW50cyA9IG5ldyBTZXQoW1xuICAnY2xpY2snLFxuICAnZGJsY2xpY2snLFxuICAnbW91c2V1cCcsXG4gICdtb3VzZWRvd24nLFxuICAnY29udGV4dG1lbnUnLFxuICAnbW91c2V3aGVlbCcsXG4gICdET01Nb3VzZVNjcm9sbCcsXG4gICdtb3VzZW92ZXInLFxuICAnbW91c2VvdXQnLFxuICAnbW91c2Vtb3ZlJyxcbiAgJ3NlbGVjdHN0YXJ0JyxcbiAgJ3NlbGVjdGVuZCcsXG4gICdrZXlkb3duJyxcbiAgJ2tleXByZXNzJyxcbiAgJ2tleXVwJyxcbiAgJ29yaWVudGF0aW9uY2hhbmdlJyxcbiAgJ3RvdWNoc3RhcnQnLFxuICAndG91Y2htb3ZlJyxcbiAgJ3RvdWNoZW5kJyxcbiAgJ3RvdWNoY2FuY2VsJyxcbiAgJ3BvaW50ZXJkb3duJyxcbiAgJ3BvaW50ZXJtb3ZlJyxcbiAgJ3BvaW50ZXJ1cCcsXG4gICdwb2ludGVybGVhdmUnLFxuICAncG9pbnRlcmNhbmNlbCcsXG4gICdnZXN0dXJlc3RhcnQnLFxuICAnZ2VzdHVyZWNoYW5nZScsXG4gICdnZXN0dXJlZW5kJyxcbiAgJ2ZvY3VzJyxcbiAgJ2JsdXInLFxuICAnY2hhbmdlJyxcbiAgJ3Jlc2V0JyxcbiAgJ3NlbGVjdCcsXG4gICdzdWJtaXQnLFxuICAnZm9jdXNpbicsXG4gICdmb2N1c291dCcsXG4gICdsb2FkJyxcbiAgJ3VubG9hZCcsXG4gICdiZWZvcmV1bmxvYWQnLFxuICAncmVzaXplJyxcbiAgJ21vdmUnLFxuICAnRE9NQ29udGVudExvYWRlZCcsXG4gICdyZWFkeXN0YXRlY2hhbmdlJyxcbiAgJ2Vycm9yJyxcbiAgJ2Fib3J0JyxcbiAgJ3Njcm9sbCdcbl0pXG5cbi8qKlxuICogUHJpdmF0ZSBtZXRob2RzXG4gKi9cblxuZnVuY3Rpb24gbWFrZUV2ZW50VWlkKGVsZW1lbnQsIHVpZCkge1xuICByZXR1cm4gKHVpZCAmJiBgJHt1aWR9Ojoke3VpZEV2ZW50Kyt9YCkgfHwgZWxlbWVudC51aWRFdmVudCB8fCB1aWRFdmVudCsrXG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRFdmVudHMoZWxlbWVudCkge1xuICBjb25zdCB1aWQgPSBtYWtlRXZlbnRVaWQoZWxlbWVudClcblxuICBlbGVtZW50LnVpZEV2ZW50ID0gdWlkXG4gIGV2ZW50UmVnaXN0cnlbdWlkXSA9IGV2ZW50UmVnaXN0cnlbdWlkXSB8fCB7fVxuXG4gIHJldHVybiBldmVudFJlZ2lzdHJ5W3VpZF1cbn1cblxuZnVuY3Rpb24gYm9vdHN0cmFwSGFuZGxlcihlbGVtZW50LCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuICAgIGh5ZHJhdGVPYmooZXZlbnQsIHsgZGVsZWdhdGVUYXJnZXQ6IGVsZW1lbnQgfSlcblxuICAgIGlmIChoYW5kbGVyLm9uZU9mZikge1xuICAgICAgRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCBldmVudC50eXBlLCBmbilcbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkoZWxlbWVudCwgW2V2ZW50XSlcbiAgfVxufVxuXG5mdW5jdGlvbiBib290c3RyYXBEZWxlZ2F0aW9uSGFuZGxlcihlbGVtZW50LCBzZWxlY3RvciwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcbiAgICBjb25zdCBkb21FbGVtZW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcilcblxuICAgIGZvciAobGV0IHsgdGFyZ2V0IH0gPSBldmVudDsgdGFyZ2V0ICYmIHRhcmdldCAhPT0gdGhpczsgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGUpIHtcbiAgICAgIGZvciAoY29uc3QgZG9tRWxlbWVudCBvZiBkb21FbGVtZW50cykge1xuICAgICAgICBpZiAoZG9tRWxlbWVudCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGh5ZHJhdGVPYmooZXZlbnQsIHsgZGVsZWdhdGVUYXJnZXQ6IHRhcmdldCB9KVxuXG4gICAgICAgIGlmIChoYW5kbGVyLm9uZU9mZikge1xuICAgICAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgZXZlbnQudHlwZSwgc2VsZWN0b3IsIGZuKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRhcmdldCwgW2V2ZW50XSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEhhbmRsZXIoZXZlbnRzLCBjYWxsYWJsZSwgZGVsZWdhdGlvblNlbGVjdG9yID0gbnVsbCkge1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhldmVudHMpXG4gICAgLmZpbmQoZXZlbnQgPT4gZXZlbnQuY2FsbGFibGUgPT09IGNhbGxhYmxlICYmIGV2ZW50LmRlbGVnYXRpb25TZWxlY3RvciA9PT0gZGVsZWdhdGlvblNlbGVjdG9yKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQYXJhbWV0ZXJzKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24pIHtcbiAgY29uc3QgaXNEZWxlZ2F0ZWQgPSB0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZydcbiAgLy8gVE9ETzogdG9vbHRpcCBwYXNzZXMgYGZhbHNlYCBpbnN0ZWFkIG9mIHNlbGVjdG9yLCBzbyB3ZSBuZWVkIHRvIGNoZWNrXG4gIGNvbnN0IGNhbGxhYmxlID0gaXNEZWxlZ2F0ZWQgPyBkZWxlZ2F0aW9uRnVuY3Rpb24gOiAoaGFuZGxlciB8fCBkZWxlZ2F0aW9uRnVuY3Rpb24pXG4gIGxldCB0eXBlRXZlbnQgPSBnZXRUeXBlRXZlbnQob3JpZ2luYWxUeXBlRXZlbnQpXG5cbiAgaWYgKCFuYXRpdmVFdmVudHMuaGFzKHR5cGVFdmVudCkpIHtcbiAgICB0eXBlRXZlbnQgPSBvcmlnaW5hbFR5cGVFdmVudFxuICB9XG5cbiAgcmV0dXJuIFtpc0RlbGVnYXRlZCwgY2FsbGFibGUsIHR5cGVFdmVudF1cbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlcihlbGVtZW50LCBvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uLCBvbmVPZmYpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbFR5cGVFdmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGxldCBbaXNEZWxlZ2F0ZWQsIGNhbGxhYmxlLCB0eXBlRXZlbnRdID0gbm9ybWFsaXplUGFyYW1ldGVycyhvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uKVxuXG4gIC8vIGluIGNhc2Ugb2YgbW91c2VlbnRlciBvciBtb3VzZWxlYXZlIHdyYXAgdGhlIGhhbmRsZXIgd2l0aGluIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgZm9yIGl0cyBET00gcG9zaXRpb25cbiAgLy8gdGhpcyBwcmV2ZW50cyB0aGUgaGFuZGxlciBmcm9tIGJlaW5nIGRpc3BhdGNoZWQgdGhlIHNhbWUgd2F5IGFzIG1vdXNlb3ZlciBvciBtb3VzZW91dCBkb2VzXG4gIGlmIChvcmlnaW5hbFR5cGVFdmVudCBpbiBjdXN0b21FdmVudHMpIHtcbiAgICBjb25zdCB3cmFwRnVuY3Rpb24gPSBmbiA9PiB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQucmVsYXRlZFRhcmdldCB8fCAoZXZlbnQucmVsYXRlZFRhcmdldCAhPT0gZXZlbnQuZGVsZWdhdGVUYXJnZXQgJiYgIWV2ZW50LmRlbGVnYXRlVGFyZ2V0LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSkge1xuICAgICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2FsbGFibGUgPSB3cmFwRnVuY3Rpb24oY2FsbGFibGUpXG4gIH1cblxuICBjb25zdCBldmVudHMgPSBnZXRFbGVtZW50RXZlbnRzKGVsZW1lbnQpXG4gIGNvbnN0IGhhbmRsZXJzID0gZXZlbnRzW3R5cGVFdmVudF0gfHwgKGV2ZW50c1t0eXBlRXZlbnRdID0ge30pXG4gIGNvbnN0IHByZXZpb3VzRnVuY3Rpb24gPSBmaW5kSGFuZGxlcihoYW5kbGVycywgY2FsbGFibGUsIGlzRGVsZWdhdGVkID8gaGFuZGxlciA6IG51bGwpXG5cbiAgaWYgKHByZXZpb3VzRnVuY3Rpb24pIHtcbiAgICBwcmV2aW91c0Z1bmN0aW9uLm9uZU9mZiA9IHByZXZpb3VzRnVuY3Rpb24ub25lT2ZmICYmIG9uZU9mZlxuXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCB1aWQgPSBtYWtlRXZlbnRVaWQoY2FsbGFibGUsIG9yaWdpbmFsVHlwZUV2ZW50LnJlcGxhY2UobmFtZXNwYWNlUmVnZXgsICcnKSlcbiAgY29uc3QgZm4gPSBpc0RlbGVnYXRlZCA/XG4gICAgYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIoZWxlbWVudCwgaGFuZGxlciwgY2FsbGFibGUpIDpcbiAgICBib290c3RyYXBIYW5kbGVyKGVsZW1lbnQsIGNhbGxhYmxlKVxuXG4gIGZuLmRlbGVnYXRpb25TZWxlY3RvciA9IGlzRGVsZWdhdGVkID8gaGFuZGxlciA6IG51bGxcbiAgZm4uY2FsbGFibGUgPSBjYWxsYWJsZVxuICBmbi5vbmVPZmYgPSBvbmVPZmZcbiAgZm4udWlkRXZlbnQgPSB1aWRcbiAgaGFuZGxlcnNbdWlkXSA9IGZuXG5cbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGVFdmVudCwgZm4sIGlzRGVsZWdhdGVkKVxufVxuXG5mdW5jdGlvbiByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uU2VsZWN0b3IpIHtcbiAgY29uc3QgZm4gPSBmaW5kSGFuZGxlcihldmVudHNbdHlwZUV2ZW50XSwgaGFuZGxlciwgZGVsZWdhdGlvblNlbGVjdG9yKVxuXG4gIGlmICghZm4pIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlRXZlbnQsIGZuLCBCb29sZWFuKGRlbGVnYXRpb25TZWxlY3RvcikpXG4gIGRlbGV0ZSBldmVudHNbdHlwZUV2ZW50XVtmbi51aWRFdmVudF1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlTmFtZXNwYWNlZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBuYW1lc3BhY2UpIHtcbiAgY29uc3Qgc3RvcmVFbGVtZW50RXZlbnQgPSBldmVudHNbdHlwZUV2ZW50XSB8fCB7fVxuXG4gIGZvciAoY29uc3QgW2hhbmRsZXJLZXksIGV2ZW50XSBvZiBPYmplY3QuZW50cmllcyhzdG9yZUVsZW1lbnRFdmVudCkpIHtcbiAgICBpZiAoaGFuZGxlcktleS5pbmNsdWRlcyhuYW1lc3BhY2UpKSB7XG4gICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBldmVudC5jYWxsYWJsZSwgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlRXZlbnQoZXZlbnQpIHtcbiAgLy8gYWxsb3cgdG8gZ2V0IHRoZSBuYXRpdmUgZXZlbnRzIGZyb20gbmFtZXNwYWNlZCBldmVudHMgKCdjbGljay5icy5idXR0b24nIC0tPiAnY2xpY2snKVxuICBldmVudCA9IGV2ZW50LnJlcGxhY2Uoc3RyaXBOYW1lUmVnZXgsICcnKVxuICByZXR1cm4gY3VzdG9tRXZlbnRzW2V2ZW50XSB8fCBldmVudFxufVxuXG5jb25zdCBFdmVudEhhbmRsZXIgPSB7XG4gIG9uKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24pIHtcbiAgICBhZGRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24sIGZhbHNlKVxuICB9LFxuXG4gIG9uZShlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uKSB7XG4gICAgYWRkSGFuZGxlcihlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uLCB0cnVlKVxuICB9LFxuXG4gIG9mZihlbGVtZW50LCBvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBvcmlnaW5hbFR5cGVFdmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IFtpc0RlbGVnYXRlZCwgY2FsbGFibGUsIHR5cGVFdmVudF0gPSBub3JtYWxpemVQYXJhbWV0ZXJzKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24pXG4gICAgY29uc3QgaW5OYW1lc3BhY2UgPSB0eXBlRXZlbnQgIT09IG9yaWdpbmFsVHlwZUV2ZW50XG4gICAgY29uc3QgZXZlbnRzID0gZ2V0RWxlbWVudEV2ZW50cyhlbGVtZW50KVxuICAgIGNvbnN0IHN0b3JlRWxlbWVudEV2ZW50ID0gZXZlbnRzW3R5cGVFdmVudF0gfHwge31cbiAgICBjb25zdCBpc05hbWVzcGFjZSA9IG9yaWdpbmFsVHlwZUV2ZW50LnN0YXJ0c1dpdGgoJy4nKVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFNpbXBsZXN0IGNhc2U6IGhhbmRsZXIgaXMgcGFzc2VkLCByZW1vdmUgdGhhdCBsaXN0ZW5lciBPTkxZLlxuICAgICAgaWYgKCFPYmplY3Qua2V5cyhzdG9yZUVsZW1lbnRFdmVudCkubGVuZ3RoKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBjYWxsYWJsZSwgaXNEZWxlZ2F0ZWQgPyBoYW5kbGVyIDogbnVsbClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc05hbWVzcGFjZSkge1xuICAgICAgZm9yIChjb25zdCBlbGVtZW50RXZlbnQgb2YgT2JqZWN0LmtleXMoZXZlbnRzKSkge1xuICAgICAgICByZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMoZWxlbWVudCwgZXZlbnRzLCBlbGVtZW50RXZlbnQsIG9yaWdpbmFsVHlwZUV2ZW50LnNsaWNlKDEpKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgW2tleUhhbmRsZXJzLCBldmVudF0gb2YgT2JqZWN0LmVudHJpZXMoc3RvcmVFbGVtZW50RXZlbnQpKSB7XG4gICAgICBjb25zdCBoYW5kbGVyS2V5ID0ga2V5SGFuZGxlcnMucmVwbGFjZShzdHJpcFVpZFJlZ2V4LCAnJylcblxuICAgICAgaWYgKCFpbk5hbWVzcGFjZSB8fCBvcmlnaW5hbFR5cGVFdmVudC5pbmNsdWRlcyhoYW5kbGVyS2V5KSkge1xuICAgICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBldmVudC5jYWxsYWJsZSwgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yKVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB0cmlnZ2VyKGVsZW1lbnQsIGV2ZW50LCBhcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgJCA9IGdldGpRdWVyeSgpXG4gICAgY29uc3QgdHlwZUV2ZW50ID0gZ2V0VHlwZUV2ZW50KGV2ZW50KVxuICAgIGNvbnN0IGluTmFtZXNwYWNlID0gZXZlbnQgIT09IHR5cGVFdmVudFxuXG4gICAgbGV0IGpRdWVyeUV2ZW50ID0gbnVsbFxuICAgIGxldCBidWJibGVzID0gdHJ1ZVxuICAgIGxldCBuYXRpdmVEaXNwYXRjaCA9IHRydWVcbiAgICBsZXQgZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlXG5cbiAgICBpZiAoaW5OYW1lc3BhY2UgJiYgJCkge1xuICAgICAgalF1ZXJ5RXZlbnQgPSAkLkV2ZW50KGV2ZW50LCBhcmdzKVxuXG4gICAgICAkKGVsZW1lbnQpLnRyaWdnZXIoalF1ZXJ5RXZlbnQpXG4gICAgICBidWJibGVzID0gIWpRdWVyeUV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKClcbiAgICAgIG5hdGl2ZURpc3BhdGNoID0gIWpRdWVyeUV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKClcbiAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSBqUXVlcnlFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKVxuICAgIH1cblxuICAgIGNvbnN0IGV2dCA9IGh5ZHJhdGVPYmoobmV3IEV2ZW50KGV2ZW50LCB7IGJ1YmJsZXMsIGNhbmNlbGFibGU6IHRydWUgfSksIGFyZ3MpXG5cbiAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG5cbiAgICBpZiAobmF0aXZlRGlzcGF0Y2gpIHtcbiAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldnQpXG4gICAgfVxuXG4gICAgaWYgKGV2dC5kZWZhdWx0UHJldmVudGVkICYmIGpRdWVyeUV2ZW50KSB7XG4gICAgICBqUXVlcnlFdmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgcmV0dXJuIGV2dFxuICB9XG59XG5cbmZ1bmN0aW9uIGh5ZHJhdGVPYmoob2JqLCBtZXRhID0ge30pIHtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMobWV0YSkpIHtcbiAgICB0cnkge1xuICAgICAgb2JqW2tleV0gPSB2YWx1ZVxuICAgIH0gY2F0Y2gge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmpcbn1cblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRIYW5kbGVyXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgZG9tL21hbmlwdWxhdG9yLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplRGF0YSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09ICd0cnVlJykge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBpZiAodmFsdWUgPT09ICdmYWxzZScpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gTnVtYmVyKHZhbHVlKS50b1N0cmluZygpKSB7XG4gICAgcmV0dXJuIE51bWJlcih2YWx1ZSlcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09ICdudWxsJykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVEYXRhS2V5KGtleSkge1xuICByZXR1cm4ga2V5LnJlcGxhY2UoL1tBLVpdL2csIGNociA9PiBgLSR7Y2hyLnRvTG93ZXJDYXNlKCl9YClcbn1cblxuY29uc3QgTWFuaXB1bGF0b3IgPSB7XG4gIHNldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGBkYXRhLWJzLSR7bm9ybWFsaXplRGF0YUtleShrZXkpfWAsIHZhbHVlKVxuICB9LFxuXG4gIHJlbW92ZURhdGFBdHRyaWJ1dGUoZWxlbWVudCwga2V5KSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYGRhdGEtYnMtJHtub3JtYWxpemVEYXRhS2V5KGtleSl9YClcbiAgfSxcblxuICBnZXREYXRhQXR0cmlidXRlcyhlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4ge31cbiAgICB9XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgICBjb25zdCBic0tleXMgPSBPYmplY3Qua2V5cyhlbGVtZW50LmRhdGFzZXQpLmZpbHRlcihrZXkgPT4ga2V5LnN0YXJ0c1dpdGgoJ2JzJykgJiYgIWtleS5zdGFydHNXaXRoKCdic0NvbmZpZycpKVxuXG4gICAgZm9yIChjb25zdCBrZXkgb2YgYnNLZXlzKSB7XG4gICAgICBsZXQgcHVyZUtleSA9IGtleS5yZXBsYWNlKC9eYnMvLCAnJylcbiAgICAgIHB1cmVLZXkgPSBwdXJlS2V5LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgcHVyZUtleS5zbGljZSgxLCBwdXJlS2V5Lmxlbmd0aClcbiAgICAgIGF0dHJpYnV0ZXNbcHVyZUtleV0gPSBub3JtYWxpemVEYXRhKGVsZW1lbnQuZGF0YXNldFtrZXldKVxuICAgIH1cblxuICAgIHJldHVybiBhdHRyaWJ1dGVzXG4gIH0sXG5cbiAgZ2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBrZXkpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplRGF0YShlbGVtZW50LmdldEF0dHJpYnV0ZShgZGF0YS1icy0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNYW5pcHVsYXRvclxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwIHV0aWwvY29uZmlnLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gJy4uL2RvbS9tYW5pcHVsYXRvci5qcydcbmltcG9ydCB7IGlzRWxlbWVudCwgdG9UeXBlIH0gZnJvbSAnLi9pbmRleC5qcydcblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgQ29uZmlnIHtcbiAgLy8gR2V0dGVyc1xuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiB7fVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IGhhdmUgdG8gaW1wbGVtZW50IHRoZSBzdGF0aWMgbWV0aG9kIFwiTkFNRVwiLCBmb3IgZWFjaCBjb21wb25lbnQhJylcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0gdGhpcy5fbWVyZ2VDb25maWdPYmooY29uZmlnKVxuICAgIGNvbmZpZyA9IHRoaXMuX2NvbmZpZ0FmdGVyTWVyZ2UoY29uZmlnKVxuICAgIHRoaXMuX3R5cGVDaGVja0NvbmZpZyhjb25maWcpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2NvbmZpZ0FmdGVyTWVyZ2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX21lcmdlQ29uZmlnT2JqKGNvbmZpZywgZWxlbWVudCkge1xuICAgIGNvbnN0IGpzb25Db25maWcgPSBpc0VsZW1lbnQoZWxlbWVudCkgPyBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsICdjb25maWcnKSA6IHt9IC8vIHRyeSB0byBwYXJzZVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxcbiAgICAgIC4uLih0eXBlb2YganNvbkNvbmZpZyA9PT0gJ29iamVjdCcgPyBqc29uQ29uZmlnIDoge30pLFxuICAgICAgLi4uKGlzRWxlbWVudChlbGVtZW50KSA/IE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKGVsZW1lbnQpIDoge30pLFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDoge30pXG4gICAgfVxuICB9XG5cbiAgX3R5cGVDaGVja0NvbmZpZyhjb25maWcsIGNvbmZpZ1R5cGVzID0gdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSkge1xuICAgIGZvciAoY29uc3QgW3Byb3BlcnR5LCBleHBlY3RlZFR5cGVzXSBvZiBPYmplY3QuZW50cmllcyhjb25maWdUeXBlcykpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XVxuICAgICAgY29uc3QgdmFsdWVUeXBlID0gaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSlcblxuICAgICAgaWYgKCFuZXcgUmVnRXhwKGV4cGVjdGVkVHlwZXMpLnRlc3QodmFsdWVUeXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIGAke3RoaXMuY29uc3RydWN0b3IuTkFNRS50b1VwcGVyQ2FzZSgpfTogT3B0aW9uIFwiJHtwcm9wZXJ0eX1cIiBwcm92aWRlZCB0eXBlIFwiJHt2YWx1ZVR5cGV9XCIgYnV0IGV4cGVjdGVkIHR5cGUgXCIke2V4cGVjdGVkVHlwZXN9XCIuYFxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbmZpZ1xuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwIGJhc2UtY29tcG9uZW50LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IERhdGEgZnJvbSAnLi9kb20vZGF0YS5qcydcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlci5qcydcbmltcG9ydCBDb25maWcgZnJvbSAnLi91dGlsL2NvbmZpZy5qcydcbmltcG9ydCB7IGV4ZWN1dGVBZnRlclRyYW5zaXRpb24sIGdldEVsZW1lbnQgfSBmcm9tICcuL3V0aWwvaW5kZXguanMnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgVkVSU0lPTiA9ICc1LjMuMydcblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgQmFzZUNvbXBvbmVudCBleHRlbmRzIENvbmZpZyB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKClcblxuICAgIGVsZW1lbnQgPSBnZXRFbGVtZW50KGVsZW1lbnQpXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudFxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG5cbiAgICBEYXRhLnNldCh0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKVxuICB9XG5cbiAgLy8gUHVibGljXG4gIGRpc3Bvc2UoKSB7XG4gICAgRGF0YS5yZW1vdmUodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSlcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRVZFTlRfS0VZKVxuXG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcbiAgICAgIHRoaXNbcHJvcGVydHlOYW1lXSA9IG51bGxcbiAgICB9XG4gIH1cblxuICBfcXVldWVDYWxsYmFjayhjYWxsYmFjaywgZWxlbWVudCwgaXNBbmltYXRlZCA9IHRydWUpIHtcbiAgICBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uKGNhbGxiYWNrLCBlbGVtZW50LCBpc0FuaW1hdGVkKVxuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB0aGlzLl9tZXJnZUNvbmZpZ09iaihjb25maWcsIHRoaXMuX2VsZW1lbnQpXG4gICAgY29uZmlnID0gdGhpcy5fY29uZmlnQWZ0ZXJNZXJnZShjb25maWcpXG4gICAgdGhpcy5fdHlwZUNoZWNrQ29uZmlnKGNvbmZpZylcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGdldEluc3RhbmNlKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gRGF0YS5nZXQoZ2V0RWxlbWVudChlbGVtZW50KSwgdGhpcy5EQVRBX0tFWSlcbiAgfVxuXG4gIHN0YXRpYyBnZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQsIGNvbmZpZyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW5zdGFuY2UoZWxlbWVudCkgfHwgbmV3IHRoaXMoZWxlbWVudCwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsKVxuICB9XG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OXG4gIH1cblxuICBzdGF0aWMgZ2V0IERBVEFfS0VZKCkge1xuICAgIHJldHVybiBgYnMuJHt0aGlzLk5BTUV9YFxuICB9XG5cbiAgc3RhdGljIGdldCBFVkVOVF9LRVkoKSB7XG4gICAgcmV0dXJuIGAuJHt0aGlzLkRBVEFfS0VZfWBcbiAgfVxuXG4gIHN0YXRpYyBldmVudE5hbWUobmFtZSkge1xuICAgIHJldHVybiBgJHtuYW1lfSR7dGhpcy5FVkVOVF9LRVl9YFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2VDb21wb25lbnRcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCBkb20vc2VsZWN0b3ItZW5naW5lLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHsgaXNEaXNhYmxlZCwgaXNWaXNpYmxlLCBwYXJzZVNlbGVjdG9yIH0gZnJvbSAnLi4vdXRpbC9pbmRleC5qcydcblxuY29uc3QgZ2V0U2VsZWN0b3IgPSBlbGVtZW50ID0+IHtcbiAgbGV0IHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtdGFyZ2V0JylcblxuICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAnIycpIHtcbiAgICBsZXQgaHJlZkF0dHJpYnV0ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJylcblxuICAgIC8vIFRoZSBvbmx5IHZhbGlkIGNvbnRlbnQgdGhhdCBjb3VsZCBkb3VibGUgYXMgYSBzZWxlY3RvciBhcmUgSURzIG9yIGNsYXNzZXMsXG4gICAgLy8gc28gZXZlcnl0aGluZyBzdGFydGluZyB3aXRoIGAjYCBvciBgLmAuIElmIGEgXCJyZWFsXCIgVVJMIGlzIHVzZWQgYXMgdGhlIHNlbGVjdG9yLFxuICAgIC8vIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yYCB3aWxsIHJpZ2h0ZnVsbHkgY29tcGxhaW4gaXQgaXMgaW52YWxpZC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8zMjI3M1xuICAgIGlmICghaHJlZkF0dHJpYnV0ZSB8fCAoIWhyZWZBdHRyaWJ1dGUuaW5jbHVkZXMoJyMnKSAmJiAhaHJlZkF0dHJpYnV0ZS5zdGFydHNXaXRoKCcuJykpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIEp1c3QgaW4gY2FzZSBzb21lIENNUyBwdXRzIG91dCBhIGZ1bGwgVVJMIHdpdGggdGhlIGFuY2hvciBhcHBlbmRlZFxuICAgIGlmIChocmVmQXR0cmlidXRlLmluY2x1ZGVzKCcjJykgJiYgIWhyZWZBdHRyaWJ1dGUuc3RhcnRzV2l0aCgnIycpKSB7XG4gICAgICBocmVmQXR0cmlidXRlID0gYCMke2hyZWZBdHRyaWJ1dGUuc3BsaXQoJyMnKVsxXX1gXG4gICAgfVxuXG4gICAgc2VsZWN0b3IgPSBocmVmQXR0cmlidXRlICYmIGhyZWZBdHRyaWJ1dGUgIT09ICcjJyA/IGhyZWZBdHRyaWJ1dGUudHJpbSgpIDogbnVsbFxuICB9XG5cbiAgcmV0dXJuIHNlbGVjdG9yID8gc2VsZWN0b3Iuc3BsaXQoJywnKS5tYXAoc2VsID0+IHBhcnNlU2VsZWN0b3Ioc2VsKSkuam9pbignLCcpIDogbnVsbFxufVxuXG5jb25zdCBTZWxlY3RvckVuZ2luZSA9IHtcbiAgZmluZChzZWxlY3RvciwgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHJldHVybiBbXS5jb25jYXQoLi4uRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbC5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKSlcbiAgfSxcblxuICBmaW5kT25lKHNlbGVjdG9yLCBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIEVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IuY2FsbChlbGVtZW50LCBzZWxlY3RvcilcbiAgfSxcblxuICBjaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIHJldHVybiBbXS5jb25jYXQoLi4uZWxlbWVudC5jaGlsZHJlbikuZmlsdGVyKGNoaWxkID0+IGNoaWxkLm1hdGNoZXMoc2VsZWN0b3IpKVxuICB9LFxuXG4gIHBhcmVudHMoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBjb25zdCBwYXJlbnRzID0gW11cbiAgICBsZXQgYW5jZXN0b3IgPSBlbGVtZW50LnBhcmVudE5vZGUuY2xvc2VzdChzZWxlY3RvcilcblxuICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgcGFyZW50cy5wdXNoKGFuY2VzdG9yKVxuICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnROb2RlLmNsb3Nlc3Qoc2VsZWN0b3IpXG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmVudHNcbiAgfSxcblxuICBwcmV2KGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgbGV0IHByZXZpb3VzID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG5cbiAgICB3aGlsZSAocHJldmlvdXMpIHtcbiAgICAgIGlmIChwcmV2aW91cy5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gW3ByZXZpb3VzXVxuICAgICAgfVxuXG4gICAgICBwcmV2aW91cyA9IHByZXZpb3VzLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcbiAgICB9XG5cbiAgICByZXR1cm4gW11cbiAgfSxcbiAgLy8gVE9ETzogdGhpcyBpcyBub3cgdW51c2VkOyByZW1vdmUgbGF0ZXIgYWxvbmcgd2l0aCBwcmV2KClcbiAgbmV4dChlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGxldCBuZXh0ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmdcblxuICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICBpZiAobmV4dC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gW25leHRdXG4gICAgICB9XG5cbiAgICAgIG5leHQgPSBuZXh0Lm5leHRFbGVtZW50U2libGluZ1xuICAgIH1cblxuICAgIHJldHVybiBbXVxuICB9LFxuXG4gIGZvY3VzYWJsZUNoaWxkcmVuKGVsZW1lbnQpIHtcbiAgICBjb25zdCBmb2N1c2FibGVzID0gW1xuICAgICAgJ2EnLFxuICAgICAgJ2J1dHRvbicsXG4gICAgICAnaW5wdXQnLFxuICAgICAgJ3RleHRhcmVhJyxcbiAgICAgICdzZWxlY3QnLFxuICAgICAgJ2RldGFpbHMnLFxuICAgICAgJ1t0YWJpbmRleF0nLFxuICAgICAgJ1tjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCJdJ1xuICAgIF0ubWFwKHNlbGVjdG9yID0+IGAke3NlbGVjdG9yfTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pYCkuam9pbignLCcpXG5cbiAgICByZXR1cm4gdGhpcy5maW5kKGZvY3VzYWJsZXMsIGVsZW1lbnQpLmZpbHRlcihlbCA9PiAhaXNEaXNhYmxlZChlbCkgJiYgaXNWaXNpYmxlKGVsKSlcbiAgfSxcblxuICBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGVsZW1lbnQpXG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBTZWxlY3RvckVuZ2luZS5maW5kT25lKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbFxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH0sXG5cbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KSB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KVxuXG4gICAgcmV0dXJuIHNlbGVjdG9yID8gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShzZWxlY3RvcikgOiBudWxsXG4gIH0sXG5cbiAgZ2V0TXVsdGlwbGVFbGVtZW50c0Zyb21TZWxlY3RvcihlbGVtZW50KSB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KVxuXG4gICAgcmV0dXJuIHNlbGVjdG9yID8gU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3RvcikgOiBbXVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdG9yRW5naW5lXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuLi9kb20vZXZlbnQtaGFuZGxlci5qcydcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuLi9kb20vc2VsZWN0b3ItZW5naW5lLmpzJ1xuaW1wb3J0IHsgaXNEaXNhYmxlZCB9IGZyb20gJy4vaW5kZXguanMnXG5cbmNvbnN0IGVuYWJsZURpc21pc3NUcmlnZ2VyID0gKGNvbXBvbmVudCwgbWV0aG9kID0gJ2hpZGUnKSA9PiB7XG4gIGNvbnN0IGNsaWNrRXZlbnQgPSBgY2xpY2suZGlzbWlzcyR7Y29tcG9uZW50LkVWRU5UX0tFWX1gXG4gIGNvbnN0IG5hbWUgPSBjb21wb25lbnQuTkFNRVxuXG4gIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgY2xpY2tFdmVudCwgYFtkYXRhLWJzLWRpc21pc3M9XCIke25hbWV9XCJdYCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH1cblxuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB0YXJnZXQgPSBTZWxlY3RvckVuZ2luZS5nZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpIHx8IHRoaXMuY2xvc2VzdChgLiR7bmFtZX1gKVxuICAgIGNvbnN0IGluc3RhbmNlID0gY29tcG9uZW50LmdldE9yQ3JlYXRlSW5zdGFuY2UodGFyZ2V0KVxuXG4gICAgLy8gTWV0aG9kIGFyZ3VtZW50IGlzIGxlZnQsIGZvciBBbGVydCBhbmQgb25seSwgYXMgaXQgZG9lc24ndCBpbXBsZW1lbnQgdGhlICdoaWRlJyBtZXRob2RcbiAgICBpbnN0YW5jZVttZXRob2RdKClcbiAgfSlcbn1cblxuZXhwb3J0IHtcbiAgZW5hYmxlRGlzbWlzc1RyaWdnZXJcbn1cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCBhbGVydC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQuanMnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXIuanMnXG5pbXBvcnQgeyBlbmFibGVEaXNtaXNzVHJpZ2dlciB9IGZyb20gJy4vdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zLmpzJ1xuaW1wb3J0IHsgZGVmaW5lSlF1ZXJ5UGx1Z2luIH0gZnJvbSAnLi91dGlsL2luZGV4LmpzJ1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IE5BTUUgPSAnYWxlcnQnXG5jb25zdCBEQVRBX0tFWSA9ICdicy5hbGVydCdcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5cbmNvbnN0IEVWRU5UX0NMT1NFID0gYGNsb3NlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xPU0VEID0gYGNsb3NlZCR7RVZFTlRfS0VZfWBcbmNvbnN0IENMQVNTX05BTUVfRkFERSA9ICdmYWRlJ1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvblxuICovXG5cbmNsYXNzIEFsZXJ0IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgY2xvc2UoKSB7XG4gICAgY29uc3QgY2xvc2VFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMT1NFKVxuXG4gICAgaWYgKGNsb3NlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVylcblxuICAgIGNvbnN0IGlzQW5pbWF0ZWQgPSB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB0aGlzLl9kZXN0cm95RWxlbWVudCgpLCB0aGlzLl9lbGVtZW50LCBpc0FuaW1hdGVkKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuICBfZGVzdHJveUVsZW1lbnQoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKVxuICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMT1NFRClcbiAgICB0aGlzLmRpc3Bvc2UoKVxuICB9XG5cbiAgLy8gU3RhdGljXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gQWxlcnQuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCB8fCBjb25maWcuc3RhcnRzV2l0aCgnXycpIHx8IGNvbmZpZyA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICB9XG5cbiAgICAgIGRhdGFbY29uZmlnXSh0aGlzKVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBEYXRhIEFQSSBpbXBsZW1lbnRhdGlvblxuICovXG5cbmVuYWJsZURpc21pc3NUcmlnZ2VyKEFsZXJ0LCAnY2xvc2UnKVxuXG4vKipcbiAqIGpRdWVyeVxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihBbGVydClcblxuZXhwb3J0IGRlZmF1bHQgQWxlcnRcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCBidXR0b24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50LmpzJ1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyLmpzJ1xuaW1wb3J0IHsgZGVmaW5lSlF1ZXJ5UGx1Z2luIH0gZnJvbSAnLi91dGlsL2luZGV4LmpzJ1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IE5BTUUgPSAnYnV0dG9uJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuYnV0dG9uJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5cbmNvbnN0IENMQVNTX05BTUVfQUNUSVZFID0gJ2FjdGl2ZSdcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gJ1tkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvblwiXSdcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJID0gYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBCdXR0b24gZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgLy8gR2V0dGVyc1xuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuICB0b2dnbGUoKSB7XG4gICAgLy8gVG9nZ2xlIGNsYXNzIGFuZCBzeW5jIHRoZSBgYXJpYS1wcmVzc2VkYCBhdHRyaWJ1dGUgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgLnRvZ2dsZSgpYCBtZXRob2RcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKENMQVNTX05BTUVfQUNUSVZFKSlcbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IEJ1dHRvbi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpXG5cbiAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGV2ZW50ID0+IHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gIGNvbnN0IGJ1dHRvbiA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFNFTEVDVE9SX0RBVEFfVE9HR0xFKVxuICBjb25zdCBkYXRhID0gQnV0dG9uLmdldE9yQ3JlYXRlSW5zdGFuY2UoYnV0dG9uKVxuXG4gIGRhdGEudG9nZ2xlKClcbn0pXG5cbi8qKlxuICogalF1ZXJ5XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKEJ1dHRvbilcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgdXRpbC9zd2lwZS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi4vZG9tL2V2ZW50LWhhbmRsZXIuanMnXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgZXhlY3V0ZSB9IGZyb20gJy4vaW5kZXguanMnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICdzd2lwZSdcbmNvbnN0IEVWRU5UX0tFWSA9ICcuYnMuc3dpcGUnXG5jb25zdCBFVkVOVF9UT1VDSFNUQVJUID0gYHRvdWNoc3RhcnQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9UT1VDSE1PVkUgPSBgdG91Y2htb3ZlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfVE9VQ0hFTkQgPSBgdG91Y2hlbmQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9QT0lOVEVSRE9XTiA9IGBwb2ludGVyZG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1BPSU5URVJVUCA9IGBwb2ludGVydXAke0VWRU5UX0tFWX1gXG5jb25zdCBQT0lOVEVSX1RZUEVfVE9VQ0ggPSAndG91Y2gnXG5jb25zdCBQT0lOVEVSX1RZUEVfUEVOID0gJ3BlbidcbmNvbnN0IENMQVNTX05BTUVfUE9JTlRFUl9FVkVOVCA9ICdwb2ludGVyLWV2ZW50J1xuY29uc3QgU1dJUEVfVEhSRVNIT0xEID0gNDBcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgZW5kQ2FsbGJhY2s6IG51bGwsXG4gIGxlZnRDYWxsYmFjazogbnVsbCxcbiAgcmlnaHRDYWxsYmFjazogbnVsbFxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgZW5kQ2FsbGJhY2s6ICcoZnVuY3Rpb258bnVsbCknLFxuICBsZWZ0Q2FsbGJhY2s6ICcoZnVuY3Rpb258bnVsbCknLFxuICByaWdodENhbGxiYWNrOiAnKGZ1bmN0aW9ufG51bGwpJ1xufVxuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBTd2lwZSBleHRlbmRzIENvbmZpZyB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudFxuXG4gICAgaWYgKCFlbGVtZW50IHx8ICFTd2lwZS5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX2RlbHRhWCA9IDBcbiAgICB0aGlzLl9zdXBwb3J0UG9pbnRlckV2ZW50cyA9IEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudClcbiAgICB0aGlzLl9pbml0RXZlbnRzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgZGlzcG9zZSgpIHtcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWSlcbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX3N0YXJ0KGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLl9zdXBwb3J0UG9pbnRlckV2ZW50cykge1xuICAgICAgdGhpcy5fZGVsdGFYID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYXG5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudElzUG9pbnRlclBlblRvdWNoKGV2ZW50KSkge1xuICAgICAgdGhpcy5fZGVsdGFYID0gZXZlbnQuY2xpZW50WFxuICAgIH1cbiAgfVxuXG4gIF9lbmQoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5fZXZlbnRJc1BvaW50ZXJQZW5Ub3VjaChldmVudCkpIHtcbiAgICAgIHRoaXMuX2RlbHRhWCA9IGV2ZW50LmNsaWVudFggLSB0aGlzLl9kZWx0YVhcbiAgICB9XG5cbiAgICB0aGlzLl9oYW5kbGVTd2lwZSgpXG4gICAgZXhlY3V0ZSh0aGlzLl9jb25maWcuZW5kQ2FsbGJhY2spXG4gIH1cblxuICBfbW92ZShldmVudCkge1xuICAgIHRoaXMuX2RlbHRhWCA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxID9cbiAgICAgIDAgOlxuICAgICAgZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gdGhpcy5fZGVsdGFYXG4gIH1cblxuICBfaGFuZGxlU3dpcGUoKSB7XG4gICAgY29uc3QgYWJzRGVsdGFYID0gTWF0aC5hYnModGhpcy5fZGVsdGFYKVxuXG4gICAgaWYgKGFic0RlbHRhWCA8PSBTV0lQRV9USFJFU0hPTEQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGFic0RlbHRhWCAvIHRoaXMuX2RlbHRhWFxuXG4gICAgdGhpcy5fZGVsdGFYID0gMFxuXG4gICAgaWYgKCFkaXJlY3Rpb24pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGV4ZWN1dGUoZGlyZWN0aW9uID4gMCA/IHRoaXMuX2NvbmZpZy5yaWdodENhbGxiYWNrIDogdGhpcy5fY29uZmlnLmxlZnRDYWxsYmFjaylcbiAgfVxuXG4gIF9pbml0RXZlbnRzKCkge1xuICAgIGlmICh0aGlzLl9zdXBwb3J0UG9pbnRlckV2ZW50cykge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1BPSU5URVJET1dOLCBldmVudCA9PiB0aGlzLl9zdGFydChldmVudCkpXG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfUE9JTlRFUlVQLCBldmVudCA9PiB0aGlzLl9lbmQoZXZlbnQpKVxuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9QT0lOVEVSX0VWRU5UKVxuICAgIH0gZWxzZSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfVE9VQ0hTVEFSVCwgZXZlbnQgPT4gdGhpcy5fc3RhcnQoZXZlbnQpKVxuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1RPVUNITU9WRSwgZXZlbnQgPT4gdGhpcy5fbW92ZShldmVudCkpXG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfVE9VQ0hFTkQsIGV2ZW50ID0+IHRoaXMuX2VuZChldmVudCkpXG4gICAgfVxuICB9XG5cbiAgX2V2ZW50SXNQb2ludGVyUGVuVG91Y2goZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fc3VwcG9ydFBvaW50ZXJFdmVudHMgJiYgKGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfUEVOIHx8IGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfVE9VQ0gpXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGlzU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXBlXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgY2Fyb3VzZWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50LmpzJ1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyLmpzJ1xuaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gJy4vZG9tL21hbmlwdWxhdG9yLmpzJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZS5qcydcbmltcG9ydCB7XG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQsXG4gIGlzUlRMLFxuICBpc1Zpc2libGUsXG4gIHJlZmxvdyxcbiAgdHJpZ2dlclRyYW5zaXRpb25FbmRcbn0gZnJvbSAnLi91dGlsL2luZGV4LmpzJ1xuaW1wb3J0IFN3aXBlIGZyb20gJy4vdXRpbC9zd2lwZS5qcydcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ2Nhcm91c2VsJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuY2Fyb3VzZWwnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcblxuY29uc3QgQVJST1dfTEVGVF9LRVkgPSAnQXJyb3dMZWZ0J1xuY29uc3QgQVJST1dfUklHSFRfS0VZID0gJ0Fycm93UmlnaHQnXG5jb25zdCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUID0gNTAwIC8vIFRpbWUgZm9yIG1vdXNlIGNvbXBhdCBldmVudHMgdG8gZmlyZSBhZnRlciB0b3VjaFxuXG5jb25zdCBPUkRFUl9ORVhUID0gJ25leHQnXG5jb25zdCBPUkRFUl9QUkVWID0gJ3ByZXYnXG5jb25zdCBESVJFQ1RJT05fTEVGVCA9ICdsZWZ0J1xuY29uc3QgRElSRUNUSU9OX1JJR0hUID0gJ3JpZ2h0J1xuXG5jb25zdCBFVkVOVF9TTElERSA9IGBzbGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NMSUQgPSBgc2xpZCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0tFWURPV04gPSBga2V5ZG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX01PVVNFRU5URVIgPSBgbW91c2VlbnRlciR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX01PVVNFTEVBVkUgPSBgbW91c2VsZWF2ZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0RSQUdfU1RBUlQgPSBgZHJhZ3N0YXJ0JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfTE9BRF9EQVRBX0FQSSA9IGBsb2FkJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5cbmNvbnN0IENMQVNTX05BTUVfQ0FST1VTRUwgPSAnY2Fyb3VzZWwnXG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSA9ICdhY3RpdmUnXG5jb25zdCBDTEFTU19OQU1FX1NMSURFID0gJ3NsaWRlJ1xuY29uc3QgQ0xBU1NfTkFNRV9FTkQgPSAnY2Fyb3VzZWwtaXRlbS1lbmQnXG5jb25zdCBDTEFTU19OQU1FX1NUQVJUID0gJ2Nhcm91c2VsLWl0ZW0tc3RhcnQnXG5jb25zdCBDTEFTU19OQU1FX05FWFQgPSAnY2Fyb3VzZWwtaXRlbS1uZXh0J1xuY29uc3QgQ0xBU1NfTkFNRV9QUkVWID0gJ2Nhcm91c2VsLWl0ZW0tcHJldidcblxuY29uc3QgU0VMRUNUT1JfQUNUSVZFID0gJy5hY3RpdmUnXG5jb25zdCBTRUxFQ1RPUl9JVEVNID0gJy5jYXJvdXNlbC1pdGVtJ1xuY29uc3QgU0VMRUNUT1JfQUNUSVZFX0lURU0gPSBTRUxFQ1RPUl9BQ1RJVkUgKyBTRUxFQ1RPUl9JVEVNXG5jb25zdCBTRUxFQ1RPUl9JVEVNX0lNRyA9ICcuY2Fyb3VzZWwtaXRlbSBpbWcnXG5jb25zdCBTRUxFQ1RPUl9JTkRJQ0FUT1JTID0gJy5jYXJvdXNlbC1pbmRpY2F0b3JzJ1xuY29uc3QgU0VMRUNUT1JfREFUQV9TTElERSA9ICdbZGF0YS1icy1zbGlkZV0sIFtkYXRhLWJzLXNsaWRlLXRvXSdcbmNvbnN0IFNFTEVDVE9SX0RBVEFfUklERSA9ICdbZGF0YS1icy1yaWRlPVwiY2Fyb3VzZWxcIl0nXG5cbmNvbnN0IEtFWV9UT19ESVJFQ1RJT04gPSB7XG4gIFtBUlJPV19MRUZUX0tFWV06IERJUkVDVElPTl9SSUdIVCxcbiAgW0FSUk9XX1JJR0hUX0tFWV06IERJUkVDVElPTl9MRUZUXG59XG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGludGVydmFsOiA1MDAwLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgcGF1c2U6ICdob3ZlcicsXG4gIHJpZGU6IGZhbHNlLFxuICB0b3VjaDogdHJ1ZSxcbiAgd3JhcDogdHJ1ZVxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgaW50ZXJ2YWw6ICcobnVtYmVyfGJvb2xlYW4pJywgLy8gVE9ETzp2NiByZW1vdmUgYm9vbGVhbiBzdXBwb3J0XG4gIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gIHBhdXNlOiAnKHN0cmluZ3xib29sZWFuKScsXG4gIHJpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgdG91Y2g6ICdib29sZWFuJyxcbiAgd3JhcDogJ2Jvb2xlYW4nXG59XG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvblxuICovXG5cbmNsYXNzIENhcm91c2VsIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQsIGNvbmZpZylcblxuICAgIHRoaXMuX2ludGVydmFsID0gbnVsbFxuICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBudWxsXG4gICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2VcbiAgICB0aGlzLnRvdWNoVGltZW91dCA9IG51bGxcbiAgICB0aGlzLl9zd2lwZUhlbHBlciA9IG51bGxcblxuICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9JTkRJQ0FUT1JTLCB0aGlzLl9lbGVtZW50KVxuICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKClcblxuICAgIGlmICh0aGlzLl9jb25maWcucmlkZSA9PT0gQ0xBU1NfTkFNRV9DQVJPVVNFTCkge1xuICAgICAgdGhpcy5jeWNsZSgpXG4gICAgfVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlXG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuICBuZXh0KCkge1xuICAgIHRoaXMuX3NsaWRlKE9SREVSX05FWFQpXG4gIH1cblxuICBuZXh0V2hlblZpc2libGUoKSB7XG4gICAgLy8gRklYTUUgVE9ETyB1c2UgYGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZWBcbiAgICAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlXG4gICAgLy8gb3IgdGhlIGNhcm91c2VsIG9yIGl0cyBwYXJlbnQgaXNuJ3QgdmlzaWJsZVxuICAgIGlmICghZG9jdW1lbnQuaGlkZGVuICYmIGlzVmlzaWJsZSh0aGlzLl9lbGVtZW50KSkge1xuICAgICAgdGhpcy5uZXh0KClcbiAgICB9XG4gIH1cblxuICBwcmV2KCkge1xuICAgIHRoaXMuX3NsaWRlKE9SREVSX1BSRVYpXG4gIH1cblxuICBwYXVzZSgpIHtcbiAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICB0cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KVxuICAgIH1cblxuICAgIHRoaXMuX2NsZWFySW50ZXJ2YWwoKVxuICB9XG5cbiAgY3ljbGUoKSB7XG4gICAgdGhpcy5fY2xlYXJJbnRlcnZhbCgpXG4gICAgdGhpcy5fdXBkYXRlSW50ZXJ2YWwoKVxuXG4gICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLm5leHRXaGVuVmlzaWJsZSgpLCB0aGlzLl9jb25maWcuaW50ZXJ2YWwpXG4gIH1cblxuICBfbWF5YmVFbmFibGVDeWNsZSgpIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5yaWRlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICBFdmVudEhhbmRsZXIub25lKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NMSUQsICgpID0+IHRoaXMuY3ljbGUoKSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuY3ljbGUoKVxuICB9XG5cbiAgdG8oaW5kZXgpIHtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuX2dldEl0ZW1zKClcbiAgICBpZiAoaW5kZXggPiBpdGVtcy5sZW5ndGggLSAxIHx8IGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uZSh0aGlzLl9lbGVtZW50LCBFVkVOVF9TTElELCAoKSA9PiB0aGlzLnRvKGluZGV4KSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2dldEFjdGl2ZSgpKVxuICAgIGlmIChhY3RpdmVJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IG9yZGVyID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IE9SREVSX05FWFQgOiBPUkRFUl9QUkVWXG5cbiAgICB0aGlzLl9zbGlkZShvcmRlciwgaXRlbXNbaW5kZXhdKVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5fc3dpcGVIZWxwZXIpIHtcbiAgICAgIHRoaXMuX3N3aXBlSGVscGVyLmRpc3Bvc2UoKVxuICAgIH1cblxuICAgIHN1cGVyLmRpc3Bvc2UoKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuICBfY29uZmlnQWZ0ZXJNZXJnZShjb25maWcpIHtcbiAgICBjb25maWcuZGVmYXVsdEludGVydmFsID0gY29uZmlnLmludGVydmFsXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9LRVlET1dOLCBldmVudCA9PiB0aGlzLl9rZXlkb3duKGV2ZW50KSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VFTlRFUiwgKCkgPT4gdGhpcy5wYXVzZSgpKVxuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFTEVBVkUsICgpID0+IHRoaXMuX21heWJlRW5hYmxlQ3ljbGUoKSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnRvdWNoICYmIFN3aXBlLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgIHRoaXMuX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKVxuICAgIH1cbiAgfVxuXG4gIF9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGZvciAoY29uc3QgaW1nIG9mIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfSVRFTV9JTUcsIHRoaXMuX2VsZW1lbnQpKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24oaW1nLCBFVkVOVF9EUkFHX1NUQVJULCBldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpKVxuICAgIH1cblxuICAgIGNvbnN0IGVuZENhbGxCYWNrID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSAhPT0gJ2hvdmVyJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gSWYgaXQncyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLCBtb3VzZWVudGVyL2xlYXZlIGFyZSBmaXJlZCBhc1xuICAgICAgLy8gcGFydCBvZiB0aGUgbW91c2UgY29tcGF0aWJpbGl0eSBldmVudHMgb24gZmlyc3QgdGFwIC0gdGhlIGNhcm91c2VsXG4gICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgLy8gaGVyZSwgd2UgbGlzdGVuIGZvciB0b3VjaGVuZCwgZXhwbGljaXRseSBwYXVzZSB0aGUgY2Fyb3VzZWxcbiAgICAgIC8vIChhcyBpZiBpdCdzIHRoZSBzZWNvbmQgdGltZSB3ZSB0YXAgb24gaXQsIG1vdXNlZW50ZXIgY29tcGF0IGV2ZW50XG4gICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAvLyBldmVudHMgdG8gZmlyZSkgd2UgZXhwbGljaXRseSByZXN0YXJ0IGN5Y2xpbmdcblxuICAgICAgdGhpcy5wYXVzZSgpXG4gICAgICBpZiAodGhpcy50b3VjaFRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudG91Y2hUaW1lb3V0KVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fbWF5YmVFbmFibGVDeWNsZSgpLCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUICsgdGhpcy5fY29uZmlnLmludGVydmFsKVxuICAgIH1cblxuICAgIGNvbnN0IHN3aXBlQ29uZmlnID0ge1xuICAgICAgbGVmdENhbGxiYWNrOiAoKSA9PiB0aGlzLl9zbGlkZSh0aGlzLl9kaXJlY3Rpb25Ub09yZGVyKERJUkVDVElPTl9MRUZUKSksXG4gICAgICByaWdodENhbGxiYWNrOiAoKSA9PiB0aGlzLl9zbGlkZSh0aGlzLl9kaXJlY3Rpb25Ub09yZGVyKERJUkVDVElPTl9SSUdIVCkpLFxuICAgICAgZW5kQ2FsbGJhY2s6IGVuZENhbGxCYWNrXG4gICAgfVxuXG4gICAgdGhpcy5fc3dpcGVIZWxwZXIgPSBuZXcgU3dpcGUodGhpcy5fZWxlbWVudCwgc3dpcGVDb25maWcpXG4gIH1cblxuICBfa2V5ZG93bihldmVudCkge1xuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gS0VZX1RPX0RJUkVDVElPTltldmVudC5rZXldXG4gICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgdGhpcy5fc2xpZGUodGhpcy5fZGlyZWN0aW9uVG9PcmRlcihkaXJlY3Rpb24pKVxuICAgIH1cbiAgfVxuXG4gIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRJdGVtcygpLmluZGV4T2YoZWxlbWVudClcbiAgfVxuXG4gIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGluZGV4KSB7XG4gICAgaWYgKCF0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgYWN0aXZlSW5kaWNhdG9yID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkUsIHRoaXMuX2luZGljYXRvcnNFbGVtZW50KVxuXG4gICAgYWN0aXZlSW5kaWNhdG9yLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUpXG4gICAgYWN0aXZlSW5kaWNhdG9yLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JylcblxuICAgIGNvbnN0IG5ld0FjdGl2ZUluZGljYXRvciA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoYFtkYXRhLWJzLXNsaWRlLXRvPVwiJHtpbmRleH1cIl1gLCB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudClcblxuICAgIGlmIChuZXdBY3RpdmVJbmRpY2F0b3IpIHtcbiAgICAgIG5ld0FjdGl2ZUluZGljYXRvci5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKVxuICAgICAgbmV3QWN0aXZlSW5kaWNhdG9yLnNldEF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JywgJ3RydWUnKVxuICAgIH1cbiAgfVxuXG4gIF91cGRhdGVJbnRlcnZhbCgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fYWN0aXZlRWxlbWVudCB8fCB0aGlzLl9nZXRBY3RpdmUoKVxuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50SW50ZXJ2YWwgPSBOdW1iZXIucGFyc2VJbnQoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtaW50ZXJ2YWwnKSwgMTApXG5cbiAgICB0aGlzLl9jb25maWcuaW50ZXJ2YWwgPSBlbGVtZW50SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbFxuICB9XG5cbiAgX3NsaWRlKG9yZGVyLCBlbGVtZW50ID0gbnVsbCkge1xuICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSB0aGlzLl9nZXRBY3RpdmUoKVxuICAgIGNvbnN0IGlzTmV4dCA9IG9yZGVyID09PSBPUkRFUl9ORVhUXG4gICAgY29uc3QgbmV4dEVsZW1lbnQgPSBlbGVtZW50IHx8IGdldE5leHRBY3RpdmVFbGVtZW50KHRoaXMuX2dldEl0ZW1zKCksIGFjdGl2ZUVsZW1lbnQsIGlzTmV4dCwgdGhpcy5fY29uZmlnLndyYXApXG5cbiAgICBpZiAobmV4dEVsZW1lbnQgPT09IGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IG5leHRFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgobmV4dEVsZW1lbnQpXG5cbiAgICBjb25zdCB0cmlnZ2VyRXZlbnQgPSBldmVudE5hbWUgPT4ge1xuICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIGV2ZW50TmFtZSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgICAgZGlyZWN0aW9uOiB0aGlzLl9vcmRlclRvRGlyZWN0aW9uKG9yZGVyKSxcbiAgICAgICAgZnJvbTogdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpLFxuICAgICAgICB0bzogbmV4dEVsZW1lbnRJbmRleFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBzbGlkZUV2ZW50ID0gdHJpZ2dlckV2ZW50KEVWRU5UX1NMSURFKVxuXG4gICAgaWYgKHNsaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCFhY3RpdmVFbGVtZW50IHx8ICFuZXh0RWxlbWVudCkge1xuICAgICAgLy8gU29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICAvLyBUT0RPOiBjaGFuZ2UgdGVzdHMgdGhhdCB1c2UgZW1wdHkgZGl2cyB0byBhdm9pZCB0aGlzIGNoZWNrXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBpc0N5Y2xpbmcgPSBCb29sZWFuKHRoaXMuX2ludGVydmFsKVxuICAgIHRoaXMucGF1c2UoKVxuXG4gICAgdGhpcy5faXNTbGlkaW5nID0gdHJ1ZVxuXG4gICAgdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChuZXh0RWxlbWVudEluZGV4KVxuICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBuZXh0RWxlbWVudFxuXG4gICAgY29uc3QgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBpc05leHQgPyBDTEFTU19OQU1FX1NUQVJUIDogQ0xBU1NfTkFNRV9FTkRcbiAgICBjb25zdCBvcmRlckNsYXNzTmFtZSA9IGlzTmV4dCA/IENMQVNTX05BTUVfTkVYVCA6IENMQVNTX05BTUVfUFJFVlxuXG4gICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChvcmRlckNsYXNzTmFtZSlcblxuICAgIHJlZmxvdyhuZXh0RWxlbWVudClcblxuICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChkaXJlY3Rpb25hbENsYXNzTmFtZSlcbiAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKVxuXG4gICAgY29uc3QgY29tcGxldGVDYWxsQmFjayA9ICgpID0+IHtcbiAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoZGlyZWN0aW9uYWxDbGFzc05hbWUsIG9yZGVyQ2xhc3NOYW1lKVxuICAgICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSlcblxuICAgICAgYWN0aXZlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFLCBvcmRlckNsYXNzTmFtZSwgZGlyZWN0aW9uYWxDbGFzc05hbWUpXG5cbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG5cbiAgICAgIHRyaWdnZXJFdmVudChFVkVOVF9TTElEKVxuICAgIH1cblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsQmFjaywgYWN0aXZlRWxlbWVudCwgdGhpcy5faXNBbmltYXRlZCgpKVxuXG4gICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgdGhpcy5jeWNsZSgpXG4gICAgfVxuICB9XG5cbiAgX2lzQW5pbWF0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0xJREUpXG4gIH1cblxuICBfZ2V0QWN0aXZlKCkge1xuICAgIHJldHVybiBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0FDVElWRV9JVEVNLCB0aGlzLl9lbGVtZW50KVxuICB9XG5cbiAgX2dldEl0ZW1zKCkge1xuICAgIHJldHVybiBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0lURU0sIHRoaXMuX2VsZW1lbnQpXG4gIH1cblxuICBfY2xlYXJJbnRlcnZhbCgpIHtcbiAgICBpZiAodGhpcy5faW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpXG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGxcbiAgICB9XG4gIH1cblxuICBfZGlyZWN0aW9uVG9PcmRlcihkaXJlY3Rpb24pIHtcbiAgICBpZiAoaXNSVEwoKSkge1xuICAgICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OX0xFRlQgPyBPUkRFUl9QUkVWIDogT1JERVJfTkVYVFxuICAgIH1cblxuICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTl9MRUZUID8gT1JERVJfTkVYVCA6IE9SREVSX1BSRVZcbiAgfVxuXG4gIF9vcmRlclRvRGlyZWN0aW9uKG9yZGVyKSB7XG4gICAgaWYgKGlzUlRMKCkpIHtcbiAgICAgIHJldHVybiBvcmRlciA9PT0gT1JERVJfUFJFViA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUXG4gICAgfVxuXG4gICAgcmV0dXJuIG9yZGVyID09PSBPUkRFUl9QUkVWID8gRElSRUNUSU9OX1JJR0hUIDogRElSRUNUSU9OX0xFRlRcbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IENhcm91c2VsLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZGF0YS50byhjb25maWcpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5zdGFydHNXaXRoKCdfJykgfHwgY29uZmlnID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAqL1xuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1NMSURFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgY29uc3QgdGFyZ2V0ID0gU2VsZWN0b3JFbmdpbmUuZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKVxuXG4gIGlmICghdGFyZ2V0IHx8ICF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfQ0FST1VTRUwpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgY29uc3QgY2Fyb3VzZWwgPSBDYXJvdXNlbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRhcmdldClcbiAgY29uc3Qgc2xpZGVJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLXNsaWRlLXRvJylcblxuICBpZiAoc2xpZGVJbmRleCkge1xuICAgIGNhcm91c2VsLnRvKHNsaWRlSW5kZXgpXG4gICAgY2Fyb3VzZWwuX21heWJlRW5hYmxlQ3ljbGUoKVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGUodGhpcywgJ3NsaWRlJykgPT09ICduZXh0Jykge1xuICAgIGNhcm91c2VsLm5leHQoKVxuICAgIGNhcm91c2VsLl9tYXliZUVuYWJsZUN5Y2xlKClcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNhcm91c2VsLnByZXYoKVxuICBjYXJvdXNlbC5fbWF5YmVFbmFibGVDeWNsZSgpXG59KVxuXG5FdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9MT0FEX0RBVEFfQVBJLCAoKSA9PiB7XG4gIGNvbnN0IGNhcm91c2VscyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9SSURFKVxuXG4gIGZvciAoY29uc3QgY2Fyb3VzZWwgb2YgY2Fyb3VzZWxzKSB7XG4gICAgQ2Fyb3VzZWwuZ2V0T3JDcmVhdGVJbnN0YW5jZShjYXJvdXNlbClcbiAgfVxufSlcblxuLyoqXG4gKiBqUXVlcnlcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQ2Fyb3VzZWwpXG5cbmV4cG9ydCBkZWZhdWx0IENhcm91c2VsXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgY29sbGFwc2UuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50LmpzJ1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyLmpzJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZS5qcydcbmltcG9ydCB7XG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZ2V0RWxlbWVudCxcbiAgcmVmbG93XG59IGZyb20gJy4vdXRpbC9pbmRleC5qcydcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ2NvbGxhcHNlJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuY29sbGFwc2UnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcblxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5cbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuY29uc3QgQ0xBU1NfTkFNRV9DT0xMQVBTRSA9ICdjb2xsYXBzZSdcbmNvbnN0IENMQVNTX05BTUVfQ09MTEFQU0lORyA9ICdjb2xsYXBzaW5nJ1xuY29uc3QgQ0xBU1NfTkFNRV9DT0xMQVBTRUQgPSAnY29sbGFwc2VkJ1xuY29uc3QgQ0xBU1NfTkFNRV9ERUVQRVJfQ0hJTERSRU4gPSBgOnNjb3BlIC4ke0NMQVNTX05BTUVfQ09MTEFQU0V9IC4ke0NMQVNTX05BTUVfQ09MTEFQU0V9YFxuY29uc3QgQ0xBU1NfTkFNRV9IT1JJWk9OVEFMID0gJ2NvbGxhcHNlLWhvcml6b250YWwnXG5cbmNvbnN0IFdJRFRIID0gJ3dpZHRoJ1xuY29uc3QgSEVJR0hUID0gJ2hlaWdodCdcblxuY29uc3QgU0VMRUNUT1JfQUNUSVZFUyA9ICcuY29sbGFwc2Uuc2hvdywgLmNvbGxhcHNlLmNvbGxhcHNpbmcnXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSA9ICdbZGF0YS1icy10b2dnbGU9XCJjb2xsYXBzZVwiXSdcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgcGFyZW50OiBudWxsLFxuICB0b2dnbGU6IHRydWVcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIHBhcmVudDogJyhudWxsfGVsZW1lbnQpJyxcbiAgdG9nZ2xlOiAnYm9vbGVhbidcbn1cblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgQ29sbGFwc2UgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudCwgY29uZmlnKVxuXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2VcbiAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBbXVxuXG4gICAgY29uc3QgdG9nZ2xlTGlzdCA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEUpXG5cbiAgICBmb3IgKGNvbnN0IGVsZW0gb2YgdG9nZ2xlTGlzdCkge1xuICAgICAgY29uc3Qgc2VsZWN0b3IgPSBTZWxlY3RvckVuZ2luZS5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pXG4gICAgICBjb25zdCBmaWx0ZXJFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3RvcilcbiAgICAgICAgLmZpbHRlcihmb3VuZEVsZW1lbnQgPT4gZm91bmRFbGVtZW50ID09PSB0aGlzLl9lbGVtZW50KVxuXG4gICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwgJiYgZmlsdGVyRWxlbWVudC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0aWFsaXplQ2hpbGRyZW4oKVxuXG4gICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fdHJpZ2dlckFycmF5LCB0aGlzLl9pc1Nob3duKCkpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy50b2dnbGUpIHtcbiAgICAgIHRoaXMudG9nZ2xlKClcbiAgICB9XG4gIH1cblxuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5faXNTaG93bigpKSB7XG4gICAgICB0aGlzLmhpZGUoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3coKVxuICAgIH1cbiAgfVxuXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCB0aGlzLl9pc1Nob3duKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBhY3RpdmVDaGlsZHJlbiA9IFtdXG5cbiAgICAvLyBmaW5kIGFjdGl2ZSBjaGlsZHJlblxuICAgIGlmICh0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICBhY3RpdmVDaGlsZHJlbiA9IHRoaXMuX2dldEZpcnN0TGV2ZWxDaGlsZHJlbihTRUxFQ1RPUl9BQ1RJVkVTKVxuICAgICAgICAuZmlsdGVyKGVsZW1lbnQgPT4gZWxlbWVudCAhPT0gdGhpcy5fZWxlbWVudClcbiAgICAgICAgLm1hcChlbGVtZW50ID0+IENvbGxhcHNlLmdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCwgeyB0b2dnbGU6IGZhbHNlIH0pKVxuICAgIH1cblxuICAgIGlmIChhY3RpdmVDaGlsZHJlbi5sZW5ndGggJiYgYWN0aXZlQ2hpbGRyZW5bMF0uX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnRFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1cpXG4gICAgaWYgKHN0YXJ0RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBhY3RpdmVJbnN0YW5jZSBvZiBhY3RpdmVDaGlsZHJlbikge1xuICAgICAgYWN0aXZlSW5zdGFuY2UuaGlkZSgpXG4gICAgfVxuXG4gICAgY29uc3QgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKClcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNFKVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNJTkcpXG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwXG5cbiAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fdHJpZ2dlckFycmF5LCB0cnVlKVxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWVcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2VcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0lORylcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFLCBDTEFTU19OQU1FX1NIT1cpXG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnXG5cbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOKVxuICAgIH1cblxuICAgIGNvbnN0IGNhcGl0YWxpemVkRGltZW5zaW9uID0gZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSlcbiAgICBjb25zdCBzY3JvbGxTaXplID0gYHNjcm9sbCR7Y2FwaXRhbGl6ZWREaW1lbnNpb259YFxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdHJ1ZSlcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdfXB4YFxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICF0aGlzLl9pc1Nob3duKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFKVxuICAgIGlmIChzdGFydEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpXG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2RpbWVuc2lvbl19cHhgXG5cbiAgICByZWZsb3codGhpcy5fZWxlbWVudClcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNJTkcpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0UsIENMQVNTX05BTUVfU0hPVylcblxuICAgIGZvciAoY29uc3QgdHJpZ2dlciBvZiB0aGlzLl90cmlnZ2VyQXJyYXkpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5nZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRyaWdnZXIpXG5cbiAgICAgIGlmIChlbGVtZW50ICYmICF0aGlzLl9pc1Nob3duKGVsZW1lbnQpKSB7XG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhbdHJpZ2dlcl0sIGZhbHNlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWVcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNJTkcpXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTRSlcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTilcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJ1xuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdHJ1ZSlcbiAgfVxuXG4gIF9pc1Nob3duKGVsZW1lbnQgPSB0aGlzLl9lbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVylcbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX2NvbmZpZ0FmdGVyTWVyZ2UoY29uZmlnKSB7XG4gICAgY29uZmlnLnRvZ2dsZSA9IEJvb2xlYW4oY29uZmlnLnRvZ2dsZSkgLy8gQ29lcmNlIHN0cmluZyB2YWx1ZXNcbiAgICBjb25maWcucGFyZW50ID0gZ2V0RWxlbWVudChjb25maWcucGFyZW50KVxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9nZXREaW1lbnNpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfSE9SSVpPTlRBTCkgPyBXSURUSCA6IEhFSUdIVFxuICB9XG5cbiAgX2luaXRpYWxpemVDaGlsZHJlbigpIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5fZ2V0Rmlyc3RMZXZlbENoaWxkcmVuKFNFTEVDVE9SX0RBVEFfVE9HR0xFKVxuXG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGNoaWxkcmVuKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZCA9IFNlbGVjdG9yRW5naW5lLmdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudClcblxuICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhbZWxlbWVudF0sIHRoaXMuX2lzU2hvd24oc2VsZWN0ZWQpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9nZXRGaXJzdExldmVsQ2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IFNlbGVjdG9yRW5naW5lLmZpbmQoQ0xBU1NfTkFNRV9ERUVQRVJfQ0hJTERSRU4sIHRoaXMuX2NvbmZpZy5wYXJlbnQpXG4gICAgLy8gcmVtb3ZlIGNoaWxkcmVuIGlmIGdyZWF0ZXIgZGVwdGhcbiAgICByZXR1cm4gU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3RvciwgdGhpcy5fY29uZmlnLnBhcmVudCkuZmlsdGVyKGVsZW1lbnQgPT4gIWNoaWxkcmVuLmluY2x1ZGVzKGVsZW1lbnQpKVxuICB9XG5cbiAgX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0cmlnZ2VyQXJyYXksIGlzT3Blbikge1xuICAgIGlmICghdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHRyaWdnZXJBcnJheSkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKENMQVNTX05BTUVfQ09MTEFQU0VELCAhaXNPcGVuKVxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgY29uc3QgX2NvbmZpZyA9IHt9XG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnICYmIC9zaG93fGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgX2NvbmZpZy50b2dnbGUgPSBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IENvbGxhcHNlLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgX2NvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAvLyBwcmV2ZW50RGVmYXVsdCBvbmx5IGZvciA8YT4gZWxlbWVudHMgKHdoaWNoIGNoYW5nZSB0aGUgVVJMKSBub3QgaW5zaWRlIHRoZSBjb2xsYXBzaWJsZSBlbGVtZW50XG4gIGlmIChldmVudC50YXJnZXQudGFnTmFtZSA9PT0gJ0EnIHx8IChldmVudC5kZWxlZ2F0ZVRhcmdldCAmJiBldmVudC5kZWxlZ2F0ZVRhcmdldC50YWdOYW1lID09PSAnQScpKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIFNlbGVjdG9yRW5naW5lLmdldE11bHRpcGxlRWxlbWVudHNGcm9tU2VsZWN0b3IodGhpcykpIHtcbiAgICBDb2xsYXBzZS5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQsIHsgdG9nZ2xlOiBmYWxzZSB9KS50b2dnbGUoKVxuICB9XG59KVxuXG4vKipcbiAqIGpRdWVyeVxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihDb2xsYXBzZSlcblxuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2VcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCBkcm9wZG93bi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAqIGFzIFBvcHBlciBmcm9tICdAcG9wcGVyanMvY29yZSdcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQuanMnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXIuanMnXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3IuanMnXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lLmpzJ1xuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBleGVjdXRlLFxuICBnZXRFbGVtZW50LFxuICBnZXROZXh0QWN0aXZlRWxlbWVudCxcbiAgaXNEaXNhYmxlZCxcbiAgaXNFbGVtZW50LFxuICBpc1JUTCxcbiAgaXNWaXNpYmxlLFxuICBub29wXG59IGZyb20gJy4vdXRpbC9pbmRleC5qcydcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ2Ryb3Bkb3duJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuZHJvcGRvd24nXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcblxuY29uc3QgRVNDQVBFX0tFWSA9ICdFc2NhcGUnXG5jb25zdCBUQUJfS0VZID0gJ1RhYidcbmNvbnN0IEFSUk9XX1VQX0tFWSA9ICdBcnJvd1VwJ1xuY29uc3QgQVJST1dfRE9XTl9LRVkgPSAnQXJyb3dEb3duJ1xuY29uc3QgUklHSFRfTU9VU0VfQlVUVE9OID0gMiAvLyBNb3VzZUV2ZW50LmJ1dHRvbiB2YWx1ZSBmb3IgdGhlIHNlY29uZGFyeSBidXR0b24sIHVzdWFsbHkgdGhlIHJpZ2h0IGJ1dHRvblxuXG5jb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSA9IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbmNvbnN0IEVWRU5UX0tFWURPV05fREFUQV9BUEkgPSBga2V5ZG93biR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbmNvbnN0IEVWRU5UX0tFWVVQX0RBVEFfQVBJID0gYGtleXVwJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuXG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSAnc2hvdydcbmNvbnN0IENMQVNTX05BTUVfRFJPUFVQID0gJ2Ryb3B1cCdcbmNvbnN0IENMQVNTX05BTUVfRFJPUEVORCA9ICdkcm9wZW5kJ1xuY29uc3QgQ0xBU1NfTkFNRV9EUk9QU1RBUlQgPSAnZHJvcHN0YXJ0J1xuY29uc3QgQ0xBU1NfTkFNRV9EUk9QVVBfQ0VOVEVSID0gJ2Ryb3B1cC1jZW50ZXInXG5jb25zdCBDTEFTU19OQU1FX0RST1BET1dOX0NFTlRFUiA9ICdkcm9wZG93bi1jZW50ZXInXG5cbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gJ1tkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCJdOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpJ1xuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEVfU0hPV04gPSBgJHtTRUxFQ1RPUl9EQVRBX1RPR0dMRX0uJHtDTEFTU19OQU1FX1NIT1d9YFxuY29uc3QgU0VMRUNUT1JfTUVOVSA9ICcuZHJvcGRvd24tbWVudSdcbmNvbnN0IFNFTEVDVE9SX05BVkJBUiA9ICcubmF2YmFyJ1xuY29uc3QgU0VMRUNUT1JfTkFWQkFSX05BViA9ICcubmF2YmFyLW5hdidcbmNvbnN0IFNFTEVDVE9SX1ZJU0lCTEVfSVRFTVMgPSAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknXG5cbmNvbnN0IFBMQUNFTUVOVF9UT1AgPSBpc1JUTCgpID8gJ3RvcC1lbmQnIDogJ3RvcC1zdGFydCdcbmNvbnN0IFBMQUNFTUVOVF9UT1BFTkQgPSBpc1JUTCgpID8gJ3RvcC1zdGFydCcgOiAndG9wLWVuZCdcbmNvbnN0IFBMQUNFTUVOVF9CT1RUT00gPSBpc1JUTCgpID8gJ2JvdHRvbS1lbmQnIDogJ2JvdHRvbS1zdGFydCdcbmNvbnN0IFBMQUNFTUVOVF9CT1RUT01FTkQgPSBpc1JUTCgpID8gJ2JvdHRvbS1zdGFydCcgOiAnYm90dG9tLWVuZCdcbmNvbnN0IFBMQUNFTUVOVF9SSUdIVCA9IGlzUlRMKCkgPyAnbGVmdC1zdGFydCcgOiAncmlnaHQtc3RhcnQnXG5jb25zdCBQTEFDRU1FTlRfTEVGVCA9IGlzUlRMKCkgPyAncmlnaHQtc3RhcnQnIDogJ2xlZnQtc3RhcnQnXG5jb25zdCBQTEFDRU1FTlRfVE9QQ0VOVEVSID0gJ3RvcCdcbmNvbnN0IFBMQUNFTUVOVF9CT1RUT01DRU5URVIgPSAnYm90dG9tJ1xuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBhdXRvQ2xvc2U6IHRydWUsXG4gIGJvdW5kYXJ5OiAnY2xpcHBpbmdQYXJlbnRzJyxcbiAgZGlzcGxheTogJ2R5bmFtaWMnLFxuICBvZmZzZXQ6IFswLCAyXSxcbiAgcG9wcGVyQ29uZmlnOiBudWxsLFxuICByZWZlcmVuY2U6ICd0b2dnbGUnXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBhdXRvQ2xvc2U6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgZGlzcGxheTogJ3N0cmluZycsXG4gIG9mZnNldDogJyhhcnJheXxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgcG9wcGVyQ29uZmlnOiAnKG51bGx8b2JqZWN0fGZ1bmN0aW9uKScsXG4gIHJlZmVyZW5jZTogJyhzdHJpbmd8ZWxlbWVudHxvYmplY3QpJ1xufVxuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBEcm9wZG93biBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50LCBjb25maWcpXG5cbiAgICB0aGlzLl9wb3BwZXIgPSBudWxsXG4gICAgdGhpcy5fcGFyZW50ID0gdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlIC8vIGRyb3Bkb3duIHdyYXBwZXJcbiAgICAvLyBUT0RPOiB2NiByZXZlcnQgIzM3MDExICYgY2hhbmdlIG1hcmt1cCBodHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy81LjMvZm9ybXMvaW5wdXQtZ3JvdXAvXG4gICAgdGhpcy5fbWVudSA9IFNlbGVjdG9yRW5naW5lLm5leHQodGhpcy5fZWxlbWVudCwgU0VMRUNUT1JfTUVOVSlbMF0gfHxcbiAgICAgIFNlbGVjdG9yRW5naW5lLnByZXYodGhpcy5fZWxlbWVudCwgU0VMRUNUT1JfTUVOVSlbMF0gfHxcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfTUVOVSwgdGhpcy5fcGFyZW50KVxuICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgdG9nZ2xlKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1Nob3duKCkgPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdygpXG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMuX2VsZW1lbnQpIHx8IHRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XLCByZWxhdGVkVGFyZ2V0KVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9jcmVhdGVQb3BwZXIoKVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcbiAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICF0aGlzLl9wYXJlbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVZCQVJfTkFWKSkge1xuICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKSkge1xuICAgICAgICBFdmVudEhhbmRsZXIub24oZWxlbWVudCwgJ21vdXNlb3ZlcicsIG5vb3ApXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5mb2N1cygpXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgdGhpcy5fbWVudS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVylcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKVxuICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOLCByZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAoaXNEaXNhYmxlZCh0aGlzLl9lbGVtZW50KSB8fCAhdGhpcy5faXNTaG93bigpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH1cblxuICAgIHRoaXMuX2NvbXBsZXRlSGlkZShyZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpXG4gICAgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKVxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX2NvbXBsZXRlSGlkZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSwgcmVsYXRlZFRhcmdldClcbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcbiAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pKSB7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgJ21vdXNlb3ZlcicsIG5vb3ApXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgIH1cblxuICAgIHRoaXMuX21lbnUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVylcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG4gICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LCAncG9wcGVyJylcbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4sIHJlbGF0ZWRUYXJnZXQpXG4gIH1cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHN1cGVyLl9nZXRDb25maWcoY29uZmlnKVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcucmVmZXJlbmNlID09PSAnb2JqZWN0JyAmJiAhaXNFbGVtZW50KGNvbmZpZy5yZWZlcmVuY2UpICYmXG4gICAgICB0eXBlb2YgY29uZmlnLnJlZmVyZW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09ICdmdW5jdGlvbidcbiAgICApIHtcbiAgICAgIC8vIFBvcHBlciB2aXJ0dWFsIGVsZW1lbnRzIHJlcXVpcmUgYSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgbWV0aG9kXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke05BTUUudG9VcHBlckNhc2UoKX06IE9wdGlvbiBcInJlZmVyZW5jZVwiIHByb3ZpZGVkIHR5cGUgXCJvYmplY3RcIiB3aXRob3V0IGEgcmVxdWlyZWQgXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIiBtZXRob2QuYClcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfY3JlYXRlUG9wcGVyKCkge1xuICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyBkcm9wZG93bnMgcmVxdWlyZSBQb3BwZXIgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKVxuICAgIH1cblxuICAgIGxldCByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudFxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UgPT09ICdwYXJlbnQnKSB7XG4gICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fcGFyZW50XG4gICAgfSBlbHNlIGlmIChpc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcbiAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSBnZXRFbGVtZW50KHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlXG4gICAgfVxuXG4gICAgY29uc3QgcG9wcGVyQ29uZmlnID0gdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKClcbiAgICB0aGlzLl9wb3BwZXIgPSBQb3BwZXIuY3JlYXRlUG9wcGVyKHJlZmVyZW5jZUVsZW1lbnQsIHRoaXMuX21lbnUsIHBvcHBlckNvbmZpZylcbiAgfVxuXG4gIF9pc1Nob3duKCkge1xuICAgIHJldHVybiB0aGlzLl9tZW51LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpXG4gIH1cblxuICBfZ2V0UGxhY2VtZW50KCkge1xuICAgIGNvbnN0IHBhcmVudERyb3Bkb3duID0gdGhpcy5fcGFyZW50XG5cbiAgICBpZiAocGFyZW50RHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUEVORCkpIHtcbiAgICAgIHJldHVybiBQTEFDRU1FTlRfUklHSFRcbiAgICB9XG5cbiAgICBpZiAocGFyZW50RHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUFNUQVJUKSkge1xuICAgICAgcmV0dXJuIFBMQUNFTUVOVF9MRUZUXG4gICAgfVxuXG4gICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BVUF9DRU5URVIpKSB7XG4gICAgICByZXR1cm4gUExBQ0VNRU5UX1RPUENFTlRFUlxuICAgIH1cblxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QRE9XTl9DRU5URVIpKSB7XG4gICAgICByZXR1cm4gUExBQ0VNRU5UX0JPVFRPTUNFTlRFUlxuICAgIH1cblxuICAgIC8vIFdlIG5lZWQgdG8gdHJpbSB0aGUgdmFsdWUgYmVjYXVzZSBjdXN0b20gcHJvcGVydGllcyBjYW4gYWxzbyBpbmNsdWRlIHNwYWNlc1xuICAgIGNvbnN0IGlzRW5kID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLl9tZW51KS5nZXRQcm9wZXJ0eVZhbHVlKCctLWJzLXBvc2l0aW9uJykudHJpbSgpID09PSAnZW5kJ1xuXG4gICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BVUCkpIHtcbiAgICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9UT1BFTkQgOiBQTEFDRU1FTlRfVE9QXG4gICAgfVxuXG4gICAgcmV0dXJuIGlzRW5kID8gUExBQ0VNRU5UX0JPVFRPTUVORCA6IFBMQUNFTUVOVF9CT1RUT01cbiAgfVxuXG4gIF9kZXRlY3ROYXZiYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVZCQVIpICE9PSBudWxsXG4gIH1cblxuICBfZ2V0T2Zmc2V0KCkge1xuICAgIGNvbnN0IHsgb2Zmc2V0IH0gPSB0aGlzLl9jb25maWdcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG9mZnNldC5zcGxpdCgnLCcpLm1hcCh2YWx1ZSA9PiBOdW1iZXIucGFyc2VJbnQodmFsdWUsIDEwKSlcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHBvcHBlckRhdGEgPT4gb2Zmc2V0KHBvcHBlckRhdGEsIHRoaXMuX2VsZW1lbnQpXG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZnNldFxuICB9XG5cbiAgX2dldFBvcHBlckNvbmZpZygpIHtcbiAgICBjb25zdCBkZWZhdWx0QnNQb3BwZXJDb25maWcgPSB7XG4gICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgbW9kaWZpZXJzOiBbe1xuICAgICAgICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGJvdW5kYXJ5OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ29mZnNldCcsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBvZmZzZXQ6IHRoaXMuX2dldE9mZnNldCgpXG4gICAgICAgIH1cbiAgICAgIH1dXG4gICAgfVxuXG4gICAgLy8gRGlzYWJsZSBQb3BwZXIgaWYgd2UgaGF2ZSBhIHN0YXRpYyBkaXNwbGF5IG9yIERyb3Bkb3duIGlzIGluIE5hdmJhclxuICAgIGlmICh0aGlzLl9pbk5hdmJhciB8fCB0aGlzLl9jb25maWcuZGlzcGxheSA9PT0gJ3N0YXRpYycpIHtcbiAgICAgIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgJ3BvcHBlcicsICdzdGF0aWMnKSAvLyBUT0RPOiB2NiByZW1vdmVcbiAgICAgIGRlZmF1bHRCc1BvcHBlckNvbmZpZy5tb2RpZmllcnMgPSBbe1xuICAgICAgICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfV1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uZGVmYXVsdEJzUG9wcGVyQ29uZmlnLFxuICAgICAgLi4uZXhlY3V0ZSh0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnLCBbZGVmYXVsdEJzUG9wcGVyQ29uZmlnXSlcbiAgICB9XG4gIH1cblxuICBfc2VsZWN0TWVudUl0ZW0oeyBrZXksIHRhcmdldCB9KSB7XG4gICAgY29uc3QgaXRlbXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX1ZJU0lCTEVfSVRFTVMsIHRoaXMuX21lbnUpLmZpbHRlcihlbGVtZW50ID0+IGlzVmlzaWJsZShlbGVtZW50KSlcblxuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBpZiB0YXJnZXQgaXNuJ3QgaW5jbHVkZWQgaW4gaXRlbXMgKGUuZy4gd2hlbiBleHBhbmRpbmcgdGhlIGRyb3Bkb3duKVxuICAgIC8vIGFsbG93IGN5Y2xpbmcgdG8gZ2V0IHRoZSBsYXN0IGl0ZW0gaW4gY2FzZSBrZXkgZXF1YWxzIEFSUk9XX1VQX0tFWVxuICAgIGdldE5leHRBY3RpdmVFbGVtZW50KGl0ZW1zLCB0YXJnZXQsIGtleSA9PT0gQVJST1dfRE9XTl9LRVksICFpdGVtcy5pbmNsdWRlcyh0YXJnZXQpKS5mb2N1cygpXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBEcm9wZG93bi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgY2xlYXJNZW51cyhldmVudCkge1xuICAgIGlmIChldmVudC5idXR0b24gPT09IFJJR0hUX01PVVNFX0JVVFRPTiB8fCAoZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC5rZXkgIT09IFRBQl9LRVkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBvcGVuVG9nZ2xlcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEVfU0hPV04pXG5cbiAgICBmb3IgKGNvbnN0IHRvZ2dsZSBvZiBvcGVuVG9nZ2xlcykge1xuICAgICAgY29uc3QgY29udGV4dCA9IERyb3Bkb3duLmdldEluc3RhbmNlKHRvZ2dsZSlcbiAgICAgIGlmICghY29udGV4dCB8fCBjb250ZXh0Ll9jb25maWcuYXV0b0Nsb3NlID09PSBmYWxzZSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb21wb3NlZFBhdGggPSBldmVudC5jb21wb3NlZFBhdGgoKVxuICAgICAgY29uc3QgaXNNZW51VGFyZ2V0ID0gY29tcG9zZWRQYXRoLmluY2x1ZGVzKGNvbnRleHQuX21lbnUpXG4gICAgICBpZiAoXG4gICAgICAgIGNvbXBvc2VkUGF0aC5pbmNsdWRlcyhjb250ZXh0Ll9lbGVtZW50KSB8fFxuICAgICAgICAoY29udGV4dC5fY29uZmlnLmF1dG9DbG9zZSA9PT0gJ2luc2lkZScgJiYgIWlzTWVudVRhcmdldCkgfHxcbiAgICAgICAgKGNvbnRleHQuX2NvbmZpZy5hdXRvQ2xvc2UgPT09ICdvdXRzaWRlJyAmJiBpc01lbnVUYXJnZXQpXG4gICAgICApIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gVGFiIG5hdmlnYXRpb24gdGhyb3VnaCB0aGUgZHJvcGRvd24gbWVudSBvciBldmVudHMgZnJvbSBjb250YWluZWQgaW5wdXRzIHNob3VsZG4ndCBjbG9zZSB0aGUgbWVudVxuICAgICAgaWYgKGNvbnRleHQuX21lbnUuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiAoKGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQua2V5ID09PSBUQUJfS0VZKSB8fCAvaW5wdXR8c2VsZWN0fG9wdGlvbnx0ZXh0YXJlYXxmb3JtL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IGNvbnRleHQuX2VsZW1lbnQgfVxuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICByZWxhdGVkVGFyZ2V0LmNsaWNrRXZlbnQgPSBldmVudFxuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldClcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZGF0YUFwaUtleWRvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgLy8gSWYgbm90IGFuIFVQIHwgRE9XTiB8IEVTQ0FQRSBrZXkgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgIC8vIElmIGlucHV0L3RleHRhcmVhICYmIGlmIGtleSBpcyBvdGhlciB0aGFuIEVTQ0FQRSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG5cbiAgICBjb25zdCBpc0lucHV0ID0gL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSlcbiAgICBjb25zdCBpc0VzY2FwZUV2ZW50ID0gZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZXG4gICAgY29uc3QgaXNVcE9yRG93bkV2ZW50ID0gW0FSUk9XX1VQX0tFWSwgQVJST1dfRE9XTl9LRVldLmluY2x1ZGVzKGV2ZW50LmtleSlcblxuICAgIGlmICghaXNVcE9yRG93bkV2ZW50ICYmICFpc0VzY2FwZUV2ZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNJbnB1dCAmJiAhaXNFc2NhcGVFdmVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgLy8gVE9ETzogdjYgcmV2ZXJ0ICMzNzAxMSAmIGNoYW5nZSBtYXJrdXAgaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNS4zL2Zvcm1zL2lucHV0LWdyb3VwL1xuICAgIGNvbnN0IGdldFRvZ2dsZUJ1dHRvbiA9IHRoaXMubWF0Y2hlcyhTRUxFQ1RPUl9EQVRBX1RPR0dMRSkgP1xuICAgICAgdGhpcyA6XG4gICAgICAoU2VsZWN0b3JFbmdpbmUucHJldih0aGlzLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSlbMF0gfHxcbiAgICAgICAgU2VsZWN0b3JFbmdpbmUubmV4dCh0aGlzLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSlbMF0gfHxcbiAgICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZXZlbnQuZGVsZWdhdGVUYXJnZXQucGFyZW50Tm9kZSkpXG5cbiAgICBjb25zdCBpbnN0YW5jZSA9IERyb3Bkb3duLmdldE9yQ3JlYXRlSW5zdGFuY2UoZ2V0VG9nZ2xlQnV0dG9uKVxuXG4gICAgaWYgKGlzVXBPckRvd25FdmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGluc3RhbmNlLnNob3coKVxuICAgICAgaW5zdGFuY2UuX3NlbGVjdE1lbnVJdGVtKGV2ZW50KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLl9pc1Nob3duKCkpIHsgLy8gZWxzZSBpcyBlc2NhcGUgYW5kIHdlIGNoZWNrIGlmIGl0IGlzIHNob3duXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgaW5zdGFuY2UuaGlkZSgpXG4gICAgICBnZXRUb2dnbGVCdXR0b24uZm9jdXMoKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgRHJvcGRvd24uZGF0YUFwaUtleWRvd25IYW5kbGVyKVxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJLCBTRUxFQ1RPUl9NRU5VLCBEcm9wZG93bi5kYXRhQXBpS2V5ZG93bkhhbmRsZXIpXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBEcm9wZG93bi5jbGVhck1lbnVzKVxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlVUF9EQVRBX0FQSSwgRHJvcGRvd24uY2xlYXJNZW51cylcbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICBEcm9wZG93bi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpLnRvZ2dsZSgpXG59KVxuXG4vKipcbiAqIGpRdWVyeVxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihEcm9wZG93bilcblxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCB1dGlsL2JhY2tkcm9wLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuLi9kb20vZXZlbnQtaGFuZGxlci5qcydcbmltcG9ydCBDb25maWcgZnJvbSAnLi9jb25maWcuanMnXG5pbXBvcnQge1xuICBleGVjdXRlLCBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uLCBnZXRFbGVtZW50LCByZWZsb3dcbn0gZnJvbSAnLi9pbmRleC5qcydcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ2JhY2tkcm9wJ1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnXG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSAnc2hvdydcbmNvbnN0IEVWRU5UX01PVVNFRE9XTiA9IGBtb3VzZWRvd24uYnMuJHtOQU1FfWBcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgY2xhc3NOYW1lOiAnbW9kYWwtYmFja2Ryb3AnLFxuICBjbGlja0NhbGxiYWNrOiBudWxsLFxuICBpc0FuaW1hdGVkOiBmYWxzZSxcbiAgaXNWaXNpYmxlOiB0cnVlLCAvLyBpZiBmYWxzZSwgd2UgdXNlIHRoZSBiYWNrZHJvcCBoZWxwZXIgd2l0aG91dCBhZGRpbmcgYW55IGVsZW1lbnQgdG8gdGhlIGRvbVxuICByb290RWxlbWVudDogJ2JvZHknIC8vIGdpdmUgdGhlIGNob2ljZSB0byBwbGFjZSBiYWNrZHJvcCB1bmRlciBkaWZmZXJlbnQgZWxlbWVudHNcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gIGNsaWNrQ2FsbGJhY2s6ICcoZnVuY3Rpb258bnVsbCknLFxuICBpc0FuaW1hdGVkOiAnYm9vbGVhbicsXG4gIGlzVmlzaWJsZTogJ2Jvb2xlYW4nLFxuICByb290RWxlbWVudDogJyhlbGVtZW50fHN0cmluZyknXG59XG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvblxuICovXG5cbmNsYXNzIEJhY2tkcm9wIGV4dGVuZHMgQ29uZmlnIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5faXNBcHBlbmRlZCA9IGZhbHNlXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGxcbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgc2hvdyhjYWxsYmFjaykge1xuICAgIGlmICghdGhpcy5fY29uZmlnLmlzVmlzaWJsZSkge1xuICAgICAgZXhlY3V0ZShjYWxsYmFjaylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2FwcGVuZCgpXG5cbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fZ2V0RWxlbWVudCgpXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKSB7XG4gICAgICByZWZsb3coZWxlbWVudClcbiAgICB9XG5cbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgdGhpcy5fZW11bGF0ZUFuaW1hdGlvbigoKSA9PiB7XG4gICAgICBleGVjdXRlKGNhbGxiYWNrKVxuICAgIH0pXG4gIH1cblxuICBoaWRlKGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLl9jb25maWcuaXNWaXNpYmxlKSB7XG4gICAgICBleGVjdXRlKGNhbGxiYWNrKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgdGhpcy5fZW11bGF0ZUFuaW1hdGlvbigoKSA9PiB7XG4gICAgICB0aGlzLmRpc3Bvc2UoKVxuICAgICAgZXhlY3V0ZShjYWxsYmFjaylcbiAgICB9KVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzQXBwZW5kZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VET1dOKVxuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKVxuICAgIHRoaXMuX2lzQXBwZW5kZWQgPSBmYWxzZVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuICBfZ2V0RWxlbWVudCgpIHtcbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGJhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIGJhY2tkcm9wLmNsYXNzTmFtZSA9IHRoaXMuX2NvbmZpZy5jbGFzc05hbWVcbiAgICAgIGlmICh0aGlzLl9jb25maWcuaXNBbmltYXRlZCkge1xuICAgICAgICBiYWNrZHJvcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfRkFERSlcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudCA9IGJhY2tkcm9wXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRcbiAgfVxuXG4gIF9jb25maWdBZnRlck1lcmdlKGNvbmZpZykge1xuICAgIC8vIHVzZSBnZXRFbGVtZW50KCkgd2l0aCB0aGUgZGVmYXVsdCBcImJvZHlcIiB0byBnZXQgYSBmcmVzaCBFbGVtZW50IG9uIGVhY2ggaW5zdGFudGlhdGlvblxuICAgIGNvbmZpZy5yb290RWxlbWVudCA9IGdldEVsZW1lbnQoY29uZmlnLnJvb3RFbGVtZW50KVxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9hcHBlbmQoKSB7XG4gICAgaWYgKHRoaXMuX2lzQXBwZW5kZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9nZXRFbGVtZW50KClcbiAgICB0aGlzLl9jb25maWcucm9vdEVsZW1lbnQuYXBwZW5kKGVsZW1lbnQpXG5cbiAgICBFdmVudEhhbmRsZXIub24oZWxlbWVudCwgRVZFTlRfTU9VU0VET1dOLCAoKSA9PiB7XG4gICAgICBleGVjdXRlKHRoaXMuX2NvbmZpZy5jbGlja0NhbGxiYWNrKVxuICAgIH0pXG5cbiAgICB0aGlzLl9pc0FwcGVuZGVkID0gdHJ1ZVxuICB9XG5cbiAgX2VtdWxhdGVBbmltYXRpb24oY2FsbGJhY2spIHtcbiAgICBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uKGNhbGxiYWNrLCB0aGlzLl9nZXRFbGVtZW50KCksIHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhY2tkcm9wXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgdXRpbC9mb2N1c3RyYXAuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4uL2RvbS9ldmVudC1oYW5kbGVyLmpzJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4uL2RvbS9zZWxlY3Rvci1lbmdpbmUuanMnXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4vY29uZmlnLmpzJ1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IE5BTUUgPSAnZm9jdXN0cmFwJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuZm9jdXN0cmFwJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IEVWRU5UX0ZPQ1VTSU4gPSBgZm9jdXNpbiR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0tFWURPV05fVEFCID0gYGtleWRvd24udGFiJHtFVkVOVF9LRVl9YFxuXG5jb25zdCBUQUJfS0VZID0gJ1RhYidcbmNvbnN0IFRBQl9OQVZfRk9SV0FSRCA9ICdmb3J3YXJkJ1xuY29uc3QgVEFCX05BVl9CQUNLV0FSRCA9ICdiYWNrd2FyZCdcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgYXV0b2ZvY3VzOiB0cnVlLFxuICB0cmFwRWxlbWVudDogbnVsbCAvLyBUaGUgZWxlbWVudCB0byB0cmFwIGZvY3VzIGluc2lkZSBvZlxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYXV0b2ZvY3VzOiAnYm9vbGVhbicsXG4gIHRyYXBFbGVtZW50OiAnZWxlbWVudCdcbn1cblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgRm9jdXNUcmFwIGV4dGVuZHMgQ29uZmlnIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5faXNBY3RpdmUgPSBmYWxzZVxuICAgIHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPSBudWxsXG4gIH1cblxuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIGFjdGl2YXRlKCkge1xuICAgIGlmICh0aGlzLl9pc0FjdGl2ZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hdXRvZm9jdXMpIHtcbiAgICAgIHRoaXMuX2NvbmZpZy50cmFwRWxlbWVudC5mb2N1cygpXG4gICAgfVxuXG4gICAgRXZlbnRIYW5kbGVyLm9mZihkb2N1bWVudCwgRVZFTlRfS0VZKSAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4sIGV2ZW50ID0+IHRoaXMuX2hhbmRsZUZvY3VzaW4oZXZlbnQpKVxuICAgIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZRE9XTl9UQUIsIGV2ZW50ID0+IHRoaXMuX2hhbmRsZUtleWRvd24oZXZlbnQpKVxuXG4gICAgdGhpcy5faXNBY3RpdmUgPSB0cnVlXG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICghdGhpcy5faXNBY3RpdmUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2lzQWN0aXZlID0gZmFsc2VcbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9LRVkpXG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF9oYW5kbGVGb2N1c2luKGV2ZW50KSB7XG4gICAgY29uc3QgeyB0cmFwRWxlbWVudCB9ID0gdGhpcy5fY29uZmlnXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBkb2N1bWVudCB8fCBldmVudC50YXJnZXQgPT09IHRyYXBFbGVtZW50IHx8IHRyYXBFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnRzID0gU2VsZWN0b3JFbmdpbmUuZm9jdXNhYmxlQ2hpbGRyZW4odHJhcEVsZW1lbnQpXG5cbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0cmFwRWxlbWVudC5mb2N1cygpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9sYXN0VGFiTmF2RGlyZWN0aW9uID09PSBUQUJfTkFWX0JBQ0tXQVJEKSB7XG4gICAgICBlbGVtZW50c1tlbGVtZW50cy5sZW5ndGggLSAxXS5mb2N1cygpXG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnRzWzBdLmZvY3VzKClcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlS2V5ZG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgIT09IFRBQl9LRVkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPSBldmVudC5zaGlmdEtleSA/IFRBQl9OQVZfQkFDS1dBUkQgOiBUQUJfTkFWX0ZPUldBUkRcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb2N1c1RyYXBcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCB1dGlsL3Njcm9sbEJhci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuLi9kb20vbWFuaXB1bGF0b3IuanMnXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi4vZG9tL3NlbGVjdG9yLWVuZ2luZS5qcydcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4vaW5kZXguanMnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgU0VMRUNUT1JfRklYRURfQ09OVEVOVCA9ICcuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wJ1xuY29uc3QgU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQgPSAnLnN0aWNreS10b3AnXG5jb25zdCBQUk9QRVJUWV9QQURESU5HID0gJ3BhZGRpbmctcmlnaHQnXG5jb25zdCBQUk9QRVJUWV9NQVJHSU4gPSAnbWFyZ2luLXJpZ2h0J1xuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBTY3JvbGxCYXJIZWxwZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuYm9keVxuICB9XG5cbiAgLy8gUHVibGljXG4gIGdldFdpZHRoKCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvaW5uZXJXaWR0aCN1c2FnZV9ub3Rlc1xuICAgIGNvbnN0IGRvY3VtZW50V2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICByZXR1cm4gTWF0aC5hYnMod2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudFdpZHRoKVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKVxuICAgIHRoaXMuX2Rpc2FibGVPdmVyRmxvdygpXG4gICAgLy8gZ2l2ZSBwYWRkaW5nIHRvIGVsZW1lbnQgdG8gYmFsYW5jZSB0aGUgaGlkZGVuIHNjcm9sbGJhciB3aWR0aFxuICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsIFBST1BFUlRZX1BBRERJTkcsIGNhbGN1bGF0ZWRWYWx1ZSA9PiBjYWxjdWxhdGVkVmFsdWUgKyB3aWR0aClcbiAgICAvLyB0cmljazogV2UgYWRqdXN0IHBvc2l0aXZlIHBhZGRpbmdSaWdodCBhbmQgbmVnYXRpdmUgbWFyZ2luUmlnaHQgdG8gc3RpY2t5LXRvcCBlbGVtZW50cyB0byBrZWVwIHNob3dpbmcgZnVsbHdpZHRoXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfRklYRURfQ09OVEVOVCwgUFJPUEVSVFlfUEFERElORywgY2FsY3VsYXRlZFZhbHVlID0+IGNhbGN1bGF0ZWRWYWx1ZSArIHdpZHRoKVxuICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKFNFTEVDVE9SX1NUSUNLWV9DT05URU5ULCBQUk9QRVJUWV9NQVJHSU4sIGNhbGN1bGF0ZWRWYWx1ZSA9PiBjYWxjdWxhdGVkVmFsdWUgLSB3aWR0aClcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCwgJ292ZXJmbG93JylcbiAgICB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsIFBST1BFUlRZX1BBRERJTkcpXG4gICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9GSVhFRF9DT05URU5ULCBQUk9QRVJUWV9QQURESU5HKVxuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQsIFBST1BFUlRZX01BUkdJTilcbiAgfVxuXG4gIGlzT3ZlcmZsb3dpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0V2lkdGgoKSA+IDBcbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX2Rpc2FibGVPdmVyRmxvdygpIHtcbiAgICB0aGlzLl9zYXZlSW5pdGlhbEF0dHJpYnV0ZSh0aGlzLl9lbGVtZW50LCAnb3ZlcmZsb3cnKVxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJ1xuICB9XG5cbiAgX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHNlbGVjdG9yLCBzdHlsZVByb3BlcnR5LCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gdGhpcy5nZXRXaWR0aCgpXG4gICAgY29uc3QgbWFuaXB1bGF0aW9uQ2FsbEJhY2sgPSBlbGVtZW50ID0+IHtcbiAgICAgIGlmIChlbGVtZW50ICE9PSB0aGlzLl9lbGVtZW50ICYmIHdpbmRvdy5pbm5lcldpZHRoID4gZWxlbWVudC5jbGllbnRXaWR0aCArIHNjcm9sbGJhcldpZHRoKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLl9zYXZlSW5pdGlhbEF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3BlcnR5KVxuICAgICAgY29uc3QgY2FsY3VsYXRlZFZhbHVlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShzdHlsZVByb3BlcnR5KVxuICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShzdHlsZVByb3BlcnR5LCBgJHtjYWxsYmFjayhOdW1iZXIucGFyc2VGbG9hdChjYWxjdWxhdGVkVmFsdWUpKX1weGApXG4gICAgfVxuXG4gICAgdGhpcy5fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayhzZWxlY3RvciwgbWFuaXB1bGF0aW9uQ2FsbEJhY2spXG4gIH1cblxuICBfc2F2ZUluaXRpYWxBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wZXJ0eSkge1xuICAgIGNvbnN0IGFjdHVhbFZhbHVlID0gZWxlbWVudC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHN0eWxlUHJvcGVydHkpXG4gICAgaWYgKGFjdHVhbFZhbHVlKSB7XG4gICAgICBNYW5pcHVsYXRvci5zZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcGVydHksIGFjdHVhbFZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIF9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHNlbGVjdG9yLCBzdHlsZVByb3BlcnR5KSB7XG4gICAgY29uc3QgbWFuaXB1bGF0aW9uQ2FsbEJhY2sgPSBlbGVtZW50ID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3BlcnR5KVxuICAgICAgLy8gV2Ugb25seSB3YW50IHRvIHJlbW92ZSB0aGUgcHJvcGVydHkgaWYgdGhlIHZhbHVlIGlzIGBudWxsYDsgdGhlIHZhbHVlIGNhbiBhbHNvIGJlIHplcm9cbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KHN0eWxlUHJvcGVydHkpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBNYW5pcHVsYXRvci5yZW1vdmVEYXRhQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcGVydHkpXG4gICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KHN0eWxlUHJvcGVydHksIHZhbHVlKVxuICAgIH1cblxuICAgIHRoaXMuX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2soc2VsZWN0b3IsIG1hbmlwdWxhdGlvbkNhbGxCYWNrKVxuICB9XG5cbiAgX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2soc2VsZWN0b3IsIGNhbGxCYWNrKSB7XG4gICAgaWYgKGlzRWxlbWVudChzZWxlY3RvcikpIHtcbiAgICAgIGNhbGxCYWNrKHNlbGVjdG9yKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBzZWwgb2YgU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3RvciwgdGhpcy5fZWxlbWVudCkpIHtcbiAgICAgIGNhbGxCYWNrKHNlbClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsQmFySGVscGVyXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgbW9kYWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50LmpzJ1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyLmpzJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZS5qcydcbmltcG9ydCBCYWNrZHJvcCBmcm9tICcuL3V0aWwvYmFja2Ryb3AuanMnXG5pbXBvcnQgeyBlbmFibGVEaXNtaXNzVHJpZ2dlciB9IGZyb20gJy4vdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zLmpzJ1xuaW1wb3J0IEZvY3VzVHJhcCBmcm9tICcuL3V0aWwvZm9jdXN0cmFwLmpzJ1xuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLCBpc1JUTCwgaXNWaXNpYmxlLCByZWZsb3dcbn0gZnJvbSAnLi91dGlsL2luZGV4LmpzJ1xuaW1wb3J0IFNjcm9sbEJhckhlbHBlciBmcm9tICcuL3V0aWwvc2Nyb2xsYmFyLmpzJ1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IE5BTUUgPSAnbW9kYWwnXG5jb25zdCBEQVRBX0tFWSA9ICdicy5tb2RhbCdcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJ1xuY29uc3QgRVNDQVBFX0tFWSA9ICdFc2NhcGUnXG5cbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJREVfUFJFVkVOVEVEID0gYGhpZGVQcmV2ZW50ZWQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9SRVNJWkUgPSBgcmVzaXplJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfRElTTUlTUyA9IGBjbGljay5kaXNtaXNzJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfTU9VU0VET1dOX0RJU01JU1MgPSBgbW91c2Vkb3duLmRpc21pc3Mke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlET1dOX0RJU01JU1MgPSBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5cbmNvbnN0IENMQVNTX05BTUVfT1BFTiA9ICdtb2RhbC1vcGVuJ1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnXG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSAnc2hvdydcbmNvbnN0IENMQVNTX05BTUVfU1RBVElDID0gJ21vZGFsLXN0YXRpYydcblxuY29uc3QgT1BFTl9TRUxFQ1RPUiA9ICcubW9kYWwuc2hvdydcbmNvbnN0IFNFTEVDVE9SX0RJQUxPRyA9ICcubW9kYWwtZGlhbG9nJ1xuY29uc3QgU0VMRUNUT1JfTU9EQUxfQk9EWSA9ICcubW9kYWwtYm9keSdcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gJ1tkYXRhLWJzLXRvZ2dsZT1cIm1vZGFsXCJdJ1xuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBiYWNrZHJvcDogdHJ1ZSxcbiAgZm9jdXM6IHRydWUsXG4gIGtleWJvYXJkOiB0cnVlXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBiYWNrZHJvcDogJyhib29sZWFufHN0cmluZyknLFxuICBmb2N1czogJ2Jvb2xlYW4nLFxuICBrZXlib2FyZDogJ2Jvb2xlYW4nXG59XG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvblxuICovXG5cbmNsYXNzIE1vZGFsIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQsIGNvbmZpZylcblxuICAgIHRoaXMuX2RpYWxvZyA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRElBTE9HLCB0aGlzLl9lbGVtZW50KVxuICAgIHRoaXMuX2JhY2tkcm9wID0gdGhpcy5faW5pdGlhbGl6ZUJhY2tEcm9wKClcbiAgICB0aGlzLl9mb2N1c3RyYXAgPSB0aGlzLl9pbml0aWFsaXplRm9jdXNUcmFwKClcbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2VcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgIHRoaXMuX3Njcm9sbEJhciA9IG5ldyBTY3JvbGxCYXJIZWxwZXIoKVxuXG4gICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlXG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuICB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldClcbiAgfVxuXG4gIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVywge1xuICAgICAgcmVsYXRlZFRhcmdldFxuICAgIH0pXG5cbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZVxuXG4gICAgdGhpcy5fc2Nyb2xsQmFyLmhpZGUoKVxuXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfT1BFTilcblxuICAgIHRoaXMuX2FkanVzdERpYWxvZygpXG5cbiAgICB0aGlzLl9iYWNrZHJvcC5zaG93KCgpID0+IHRoaXMuX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpKVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFKVxuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2VcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlXG4gICAgdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVylcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4gdGhpcy5faGlkZU1vZGFsKCksIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2lzQW5pbWF0ZWQoKSlcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9mZih3aW5kb3csIEVWRU5UX0tFWSlcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2RpYWxvZywgRVZFTlRfS0VZKVxuXG4gICAgdGhpcy5fYmFja2Ryb3AuZGlzcG9zZSgpXG4gICAgdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICBoYW5kbGVVcGRhdGUoKSB7XG4gICAgdGhpcy5fYWRqdXN0RGlhbG9nKClcbiAgfVxuXG4gIC8vIFByaXZhdGVcbiAgX2luaXRpYWxpemVCYWNrRHJvcCgpIHtcbiAgICByZXR1cm4gbmV3IEJhY2tkcm9wKHtcbiAgICAgIGlzVmlzaWJsZTogQm9vbGVhbih0aGlzLl9jb25maWcuYmFja2Ryb3ApLCAvLyAnc3RhdGljJyBvcHRpb24gd2lsbCBiZSB0cmFuc2xhdGVkIHRvIHRydWUsIGFuZCBib29sZWFucyB3aWxsIGtlZXAgdGhlaXIgdmFsdWUsXG4gICAgICBpc0FuaW1hdGVkOiB0aGlzLl9pc0FuaW1hdGVkKClcbiAgICB9KVxuICB9XG5cbiAgX2luaXRpYWxpemVGb2N1c1RyYXAoKSB7XG4gICAgcmV0dXJuIG5ldyBGb2N1c1RyYXAoe1xuICAgICAgdHJhcEVsZW1lbnQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9KVxuICB9XG5cbiAgX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAvLyB0cnkgdG8gYXBwZW5kIGR5bmFtaWMgbW9kYWxcbiAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5fZWxlbWVudCkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMuX2VsZW1lbnQpXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKVxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpXG4gICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwXG5cbiAgICBjb25zdCBtb2RhbEJvZHkgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX01PREFMX0JPRFksIHRoaXMuX2RpYWxvZylcbiAgICBpZiAobW9kYWxCb2R5KSB7XG4gICAgICBtb2RhbEJvZHkuc2Nyb2xsVG9wID0gMFxuICAgIH1cblxuICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVylcblxuICAgIGNvbnN0IHRyYW5zaXRpb25Db21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5fZm9jdXN0cmFwLmFjdGl2YXRlKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2VcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayh0cmFuc2l0aW9uQ29tcGxldGUsIHRoaXMuX2RpYWxvZywgdGhpcy5faXNBbmltYXRlZCgpKVxuICB9XG5cbiAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9LRVlET1dOX0RJU01JU1MsIGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudC5rZXkgIT09IEVTQ0FQRV9LRVkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKVxuICAgIH0pXG5cbiAgICBFdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9SRVNJWkUsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9pc1Nob3duICYmICF0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFRE9XTl9ESVNNSVNTLCBldmVudCA9PiB7XG4gICAgICAvLyBhIGJhZCB0cmljayB0byBzZWdyZWdhdGUgY2xpY2tzIHRoYXQgbWF5IHN0YXJ0IGluc2lkZSBkaWFsb2cgYnV0IGVuZCBvdXRzaWRlLCBhbmQgYXZvaWQgbGlzdGVuIHRvIHNjcm9sbGJhciBjbGlja3NcbiAgICAgIEV2ZW50SGFuZGxlci5vbmUodGhpcy5fZWxlbWVudCwgRVZFTlRfQ0xJQ0tfRElTTUlTUywgZXZlbnQyID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX2VsZW1lbnQgIT09IGV2ZW50LnRhcmdldCB8fCB0aGlzLl9lbGVtZW50ICE9PSBldmVudDIudGFyZ2V0KSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJhY2tkcm9wID09PSAnc3RhdGljJykge1xuICAgICAgICAgIHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5iYWNrZHJvcCkge1xuICAgICAgICAgIHRoaXMuaGlkZSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIF9oaWRlTW9kYWwoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKVxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlXG5cbiAgICB0aGlzLl9iYWNrZHJvcC5oaWRlKCgpID0+IHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX09QRU4pXG4gICAgICB0aGlzLl9yZXNldEFkanVzdG1lbnRzKClcbiAgICAgIHRoaXMuX3Njcm9sbEJhci5yZXNldCgpXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4pXG4gICAgfSlcbiAgfVxuXG4gIF9pc0FuaW1hdGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpXG4gIH1cblxuICBfdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpIHtcbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFX1BSRVZFTlRFRClcbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGlzTW9kYWxPdmVyZmxvd2luZyA9IHRoaXMuX2VsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICAgIGNvbnN0IGluaXRpYWxPdmVyZmxvd1kgPSB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93WVxuICAgIC8vIHJldHVybiBpZiB0aGUgZm9sbG93aW5nIGJhY2tncm91bmQgdHJhbnNpdGlvbiBoYXNuJ3QgeWV0IGNvbXBsZXRlZFxuICAgIGlmIChpbml0aWFsT3ZlcmZsb3dZID09PSAnaGlkZGVuJyB8fCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NUQVRJQykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICghaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93WSA9ICdoaWRkZW4nXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU1RBVElDKVxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU1RBVElDKVxuICAgICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUub3ZlcmZsb3dZID0gaW5pdGlhbE92ZXJmbG93WVxuICAgICAgfSwgdGhpcy5fZGlhbG9nKVxuICAgIH0sIHRoaXMuX2RpYWxvZylcblxuICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXG4gICAqL1xuXG4gIF9hZGp1c3REaWFsb2coKSB7XG4gICAgY29uc3QgaXNNb2RhbE92ZXJmbG93aW5nID0gdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgY29uc3Qgc2Nyb2xsYmFyV2lkdGggPSB0aGlzLl9zY3JvbGxCYXIuZ2V0V2lkdGgoKVxuICAgIGNvbnN0IGlzQm9keU92ZXJmbG93aW5nID0gc2Nyb2xsYmFyV2lkdGggPiAwXG5cbiAgICBpZiAoaXNCb2R5T3ZlcmZsb3dpbmcgJiYgIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgY29uc3QgcHJvcGVydHkgPSBpc1JUTCgpID8gJ3BhZGRpbmdMZWZ0JyA6ICdwYWRkaW5nUmlnaHQnXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW3Byb3BlcnR5XSA9IGAke3Njcm9sbGJhcldpZHRofXB4YFxuICAgIH1cblxuICAgIGlmICghaXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0eSA9IGlzUlRMKCkgPyAncGFkZGluZ1JpZ2h0JyA6ICdwYWRkaW5nTGVmdCdcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gYCR7c2Nyb2xsYmFyV2lkdGh9cHhgXG4gICAgfVxuICB9XG5cbiAgX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9ICcnXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJ1xuICB9XG5cbiAgLy8gU3RhdGljXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gTW9kYWwuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCB0YXJnZXQgPSBTZWxlY3RvckVuZ2luZS5nZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpXG5cbiAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIEV2ZW50SGFuZGxlci5vbmUodGFyZ2V0LCBFVkVOVF9TSE9XLCBzaG93RXZlbnQgPT4ge1xuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgRXZlbnRIYW5kbGVyLm9uZSh0YXJnZXQsIEVWRU5UX0hJRERFTiwgKCkgPT4ge1xuICAgICAgaWYgKGlzVmlzaWJsZSh0aGlzKSkge1xuICAgICAgICB0aGlzLmZvY3VzKClcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuXG4gIC8vIGF2b2lkIGNvbmZsaWN0IHdoZW4gY2xpY2tpbmcgbW9kYWwgdG9nZ2xlciB3aGlsZSBhbm90aGVyIG9uZSBpcyBvcGVuXG4gIGNvbnN0IGFscmVhZHlPcGVuID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShPUEVOX1NFTEVDVE9SKVxuICBpZiAoYWxyZWFkeU9wZW4pIHtcbiAgICBNb2RhbC5nZXRJbnN0YW5jZShhbHJlYWR5T3BlbikuaGlkZSgpXG4gIH1cblxuICBjb25zdCBkYXRhID0gTW9kYWwuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0YXJnZXQpXG5cbiAgZGF0YS50b2dnbGUodGhpcylcbn0pXG5cbmVuYWJsZURpc21pc3NUcmlnZ2VyKE1vZGFsKVxuXG4vKipcbiAqIGpRdWVyeVxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihNb2RhbClcblxuZXhwb3J0IGRlZmF1bHQgTW9kYWxcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCBvZmZjYW52YXMuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50LmpzJ1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyLmpzJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZS5qcydcbmltcG9ydCBCYWNrZHJvcCBmcm9tICcuL3V0aWwvYmFja2Ryb3AuanMnXG5pbXBvcnQgeyBlbmFibGVEaXNtaXNzVHJpZ2dlciB9IGZyb20gJy4vdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zLmpzJ1xuaW1wb3J0IEZvY3VzVHJhcCBmcm9tICcuL3V0aWwvZm9jdXN0cmFwLmpzJ1xuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBpc0Rpc2FibGVkLFxuICBpc1Zpc2libGVcbn0gZnJvbSAnLi91dGlsL2luZGV4LmpzJ1xuaW1wb3J0IFNjcm9sbEJhckhlbHBlciBmcm9tICcuL3V0aWwvc2Nyb2xsYmFyLmpzJ1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IE5BTUUgPSAnb2ZmY2FudmFzJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMub2ZmY2FudmFzJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJID0gYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFU0NBUEVfS0VZID0gJ0VzY2FwZSdcblxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5jb25zdCBDTEFTU19OQU1FX1NIT1dJTkcgPSAnc2hvd2luZydcbmNvbnN0IENMQVNTX05BTUVfSElESU5HID0gJ2hpZGluZydcbmNvbnN0IENMQVNTX05BTUVfQkFDS0RST1AgPSAnb2ZmY2FudmFzLWJhY2tkcm9wJ1xuY29uc3QgT1BFTl9TRUxFQ1RPUiA9ICcub2ZmY2FudmFzLnNob3cnXG5cbmNvbnN0IEVWRU5UX1NIT1cgPSBgc2hvdyR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NIT1dOID0gYHNob3duJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfSElERSA9IGBoaWRlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfSElERV9QUkVWRU5URUQgPSBgaGlkZVByZXZlbnRlZCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9SRVNJWkUgPSBgcmVzaXplJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlET1dOX0RJU01JU1MgPSBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YFxuXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSA9ICdbZGF0YS1icy10b2dnbGU9XCJvZmZjYW52YXNcIl0nXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgc2Nyb2xsOiBmYWxzZVxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYmFja2Ryb3A6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgc2Nyb2xsOiAnYm9vbGVhbidcbn1cblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgT2ZmY2FudmFzIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQsIGNvbmZpZylcblxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZVxuICAgIHRoaXMuX2JhY2tkcm9wID0gdGhpcy5faW5pdGlhbGl6ZUJhY2tEcm9wKClcbiAgICB0aGlzLl9mb2N1c3RyYXAgPSB0aGlzLl9pbml0aWFsaXplRm9jdXNUcmFwKClcbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG4gIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1csIHsgcmVsYXRlZFRhcmdldCB9KVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9pc1Nob3duID0gdHJ1ZVxuICAgIHRoaXMuX2JhY2tkcm9wLnNob3coKVxuXG4gICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XG4gICAgICBuZXcgU2Nyb2xsQmFySGVscGVyKCkuaGlkZSgpXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKVxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPV0lORylcblxuICAgIGNvbnN0IGNvbXBsZXRlQ2FsbEJhY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2NvbmZpZy5zY3JvbGwgfHwgdGhpcy5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICAgIHRoaXMuX2ZvY3VzdHJhcC5hY3RpdmF0ZSgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XSU5HKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04sIHsgcmVsYXRlZFRhcmdldCB9KVxuICAgIH1cblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsQmFjaywgdGhpcy5fZWxlbWVudCwgdHJ1ZSlcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFKVxuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpXG4gICAgdGhpcy5fZWxlbWVudC5ibHVyKClcbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2VcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9ISURJTkcpXG4gICAgdGhpcy5fYmFja2Ryb3AuaGlkZSgpXG5cbiAgICBjb25zdCBjb21wbGV0ZUNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVywgQ0xBU1NfTkFNRV9ISURJTkcpXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpXG5cbiAgICAgIGlmICghdGhpcy5fY29uZmlnLnNjcm9sbCkge1xuICAgICAgICBuZXcgU2Nyb2xsQmFySGVscGVyKCkucmVzZXQoKVxuICAgICAgfVxuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4pXG4gICAgfVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZUNhbGxiYWNrLCB0aGlzLl9lbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9iYWNrZHJvcC5kaXNwb3NlKClcbiAgICB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF9pbml0aWFsaXplQmFja0Ryb3AoKSB7XG4gICAgY29uc3QgY2xpY2tDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREVfUFJFVkVOVEVEKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5oaWRlKClcbiAgICB9XG5cbiAgICAvLyAnc3RhdGljJyBvcHRpb24gd2lsbCBiZSB0cmFuc2xhdGVkIHRvIHRydWUsIGFuZCBib29sZWFucyB3aWxsIGtlZXAgdGhlaXIgdmFsdWVcbiAgICBjb25zdCBpc1Zpc2libGUgPSBCb29sZWFuKHRoaXMuX2NvbmZpZy5iYWNrZHJvcClcblxuICAgIHJldHVybiBuZXcgQmFja2Ryb3Aoe1xuICAgICAgY2xhc3NOYW1lOiBDTEFTU19OQU1FX0JBQ0tEUk9QLFxuICAgICAgaXNWaXNpYmxlLFxuICAgICAgaXNBbmltYXRlZDogdHJ1ZSxcbiAgICAgIHJvb3RFbGVtZW50OiB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICBjbGlja0NhbGxiYWNrOiBpc1Zpc2libGUgPyBjbGlja0NhbGxiYWNrIDogbnVsbFxuICAgIH0pXG4gIH1cblxuICBfaW5pdGlhbGl6ZUZvY3VzVHJhcCgpIHtcbiAgICByZXR1cm4gbmV3IEZvY3VzVHJhcCh7XG4gICAgICB0cmFwRWxlbWVudDogdGhpcy5fZWxlbWVudFxuICAgIH0pXG4gIH1cblxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUywgZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50LmtleSAhPT0gRVNDQVBFX0tFWSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICB0aGlzLmhpZGUoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERV9QUkVWRU5URUQpXG4gICAgfSlcbiAgfVxuXG4gIC8vIFN0YXRpY1xuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IE9mZmNhbnZhcy5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnN0YXJ0c1dpdGgoJ18nKSB8fCBjb25maWcgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10odGhpcylcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAqL1xuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGNvbnN0IHRhcmdldCA9IFNlbGVjdG9yRW5naW5lLmdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcylcblxuICBpZiAoWydBJywgJ0FSRUEnXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIEV2ZW50SGFuZGxlci5vbmUodGFyZ2V0LCBFVkVOVF9ISURERU4sICgpID0+IHtcbiAgICAvLyBmb2N1cyBvbiB0cmlnZ2VyIHdoZW4gaXQgaXMgY2xvc2VkXG4gICAgaWYgKGlzVmlzaWJsZSh0aGlzKSkge1xuICAgICAgdGhpcy5mb2N1cygpXG4gICAgfVxuICB9KVxuXG4gIC8vIGF2b2lkIGNvbmZsaWN0IHdoZW4gY2xpY2tpbmcgYSB0b2dnbGVyIG9mIGFuIG9mZmNhbnZhcywgd2hpbGUgYW5vdGhlciBpcyBvcGVuXG4gIGNvbnN0IGFscmVhZHlPcGVuID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShPUEVOX1NFTEVDVE9SKVxuICBpZiAoYWxyZWFkeU9wZW4gJiYgYWxyZWFkeU9wZW4gIT09IHRhcmdldCkge1xuICAgIE9mZmNhbnZhcy5nZXRJbnN0YW5jZShhbHJlYWR5T3BlbikuaGlkZSgpXG4gIH1cblxuICBjb25zdCBkYXRhID0gT2ZmY2FudmFzLmdldE9yQ3JlYXRlSW5zdGFuY2UodGFyZ2V0KVxuICBkYXRhLnRvZ2dsZSh0aGlzKVxufSlcblxuRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSwgKCkgPT4ge1xuICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIFNlbGVjdG9yRW5naW5lLmZpbmQoT1BFTl9TRUxFQ1RPUikpIHtcbiAgICBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZShzZWxlY3Rvcikuc2hvdygpXG4gIH1cbn0pXG5cbkV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX1JFU0laRSwgKCkgPT4ge1xuICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgU2VsZWN0b3JFbmdpbmUuZmluZCgnW2FyaWEtbW9kYWxdW2NsYXNzKj1zaG93XVtjbGFzcyo9b2ZmY2FudmFzLV0nKSkge1xuICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtZW50KS5oaWRlKClcbiAgICB9XG4gIH1cbn0pXG5cbmVuYWJsZURpc21pc3NUcmlnZ2VyKE9mZmNhbnZhcylcblxuLyoqXG4gKiBqUXVlcnlcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oT2ZmY2FudmFzKVxuXG5leHBvcnQgZGVmYXVsdCBPZmZjYW52YXNcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCB1dGlsL3Nhbml0aXplci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbi8vIGpzLWRvY3Mtc3RhcnQgYWxsb3ctbGlzdFxuY29uc3QgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTiA9IC9eYXJpYS1bXFx3LV0qJC9pXG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0QWxsb3dsaXN0ID0ge1xuICAvLyBHbG9iYWwgYXR0cmlidXRlcyBhbGxvd2VkIG9uIGFueSBzdXBwbGllZCBlbGVtZW50IGJlbG93LlxuICAnKic6IFsnY2xhc3MnLCAnZGlyJywgJ2lkJywgJ2xhbmcnLCAncm9sZScsIEFSSUFfQVRUUklCVVRFX1BBVFRFUk5dLFxuICBhOiBbJ3RhcmdldCcsICdocmVmJywgJ3RpdGxlJywgJ3JlbCddLFxuICBhcmVhOiBbXSxcbiAgYjogW10sXG4gIGJyOiBbXSxcbiAgY29sOiBbXSxcbiAgY29kZTogW10sXG4gIGRkOiBbXSxcbiAgZGl2OiBbXSxcbiAgZGw6IFtdLFxuICBkdDogW10sXG4gIGVtOiBbXSxcbiAgaHI6IFtdLFxuICBoMTogW10sXG4gIGgyOiBbXSxcbiAgaDM6IFtdLFxuICBoNDogW10sXG4gIGg1OiBbXSxcbiAgaDY6IFtdLFxuICBpOiBbXSxcbiAgaW1nOiBbJ3NyYycsICdzcmNzZXQnLCAnYWx0JywgJ3RpdGxlJywgJ3dpZHRoJywgJ2hlaWdodCddLFxuICBsaTogW10sXG4gIG9sOiBbXSxcbiAgcDogW10sXG4gIHByZTogW10sXG4gIHM6IFtdLFxuICBzbWFsbDogW10sXG4gIHNwYW46IFtdLFxuICBzdWI6IFtdLFxuICBzdXA6IFtdLFxuICBzdHJvbmc6IFtdLFxuICB1OiBbXSxcbiAgdWw6IFtdXG59XG4vLyBqcy1kb2NzLWVuZCBhbGxvdy1saXN0XG5cbmNvbnN0IHVyaUF0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcbiAgJ2JhY2tncm91bmQnLFxuICAnY2l0ZScsXG4gICdocmVmJyxcbiAgJ2l0ZW10eXBlJyxcbiAgJ2xvbmdkZXNjJyxcbiAgJ3Bvc3RlcicsXG4gICdzcmMnLFxuICAneGxpbms6aHJlZidcbl0pXG5cbi8qKlxuICogQSBwYXR0ZXJuIHRoYXQgcmVjb2duaXplcyBVUkxzIHRoYXQgYXJlIHNhZmUgd3J0LiBYU1MgaW4gVVJMIG5hdmlnYXRpb25cbiAqIGNvbnRleHRzLlxuICpcbiAqIFNob3V0LW91dCB0byBBbmd1bGFyIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi8xNS4yLjgvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHMjTDM4XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL2JldHRlci1yZWdleFxuY29uc3QgU0FGRV9VUkxfUEFUVEVSTiA9IC9eKD8hamF2YXNjcmlwdDopKD86W2EtejAtOSsuLV0rOnxbXiY6Lz8jXSooPzpbLz8jXXwkKSkvaVxuXG5jb25zdCBhbGxvd2VkQXR0cmlidXRlID0gKGF0dHJpYnV0ZSwgYWxsb3dlZEF0dHJpYnV0ZUxpc3QpID0+IHtcbiAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXG5cbiAgaWYgKGFsbG93ZWRBdHRyaWJ1dGVMaXN0LmluY2x1ZGVzKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgaWYgKHVyaUF0dHJpYnV0ZXMuaGFzKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihTQUZFX1VSTF9QQVRURVJOLnRlc3QoYXR0cmlidXRlLm5vZGVWYWx1ZSkpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIENoZWNrIGlmIGEgcmVndWxhciBleHByZXNzaW9uIHZhbGlkYXRlcyB0aGUgYXR0cmlidXRlLlxuICByZXR1cm4gYWxsb3dlZEF0dHJpYnV0ZUxpc3QuZmlsdGVyKGF0dHJpYnV0ZVJlZ2V4ID0+IGF0dHJpYnV0ZVJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKVxuICAgIC5zb21lKHJlZ2V4ID0+IHJlZ2V4LnRlc3QoYXR0cmlidXRlTmFtZSkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZUh0bWwodW5zYWZlSHRtbCwgYWxsb3dMaXN0LCBzYW5pdGl6ZUZ1bmN0aW9uKSB7XG4gIGlmICghdW5zYWZlSHRtbC5sZW5ndGgpIHtcbiAgICByZXR1cm4gdW5zYWZlSHRtbFxuICB9XG5cbiAgaWYgKHNhbml0aXplRnVuY3Rpb24gJiYgdHlwZW9mIHNhbml0aXplRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gc2FuaXRpemVGdW5jdGlvbih1bnNhZmVIdG1sKVxuICB9XG5cbiAgY29uc3QgZG9tUGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKVxuICBjb25zdCBjcmVhdGVkRG9jdW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHVuc2FmZUh0bWwsICd0ZXh0L2h0bWwnKVxuICBjb25zdCBlbGVtZW50cyA9IFtdLmNvbmNhdCguLi5jcmVhdGVkRG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKCcqJykpXG5cbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgY29uc3QgZWxlbWVudE5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKClcblxuICAgIGlmICghT2JqZWN0LmtleXMoYWxsb3dMaXN0KS5pbmNsdWRlcyhlbGVtZW50TmFtZSkpIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlKClcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgY29uc3QgYXR0cmlidXRlTGlzdCA9IFtdLmNvbmNhdCguLi5lbGVtZW50LmF0dHJpYnV0ZXMpXG4gICAgY29uc3QgYWxsb3dlZEF0dHJpYnV0ZXMgPSBbXS5jb25jYXQoYWxsb3dMaXN0WycqJ10gfHwgW10sIGFsbG93TGlzdFtlbGVtZW50TmFtZV0gfHwgW10pXG5cbiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiBhdHRyaWJ1dGVMaXN0KSB7XG4gICAgICBpZiAoIWFsbG93ZWRBdHRyaWJ1dGUoYXR0cmlidXRlLCBhbGxvd2VkQXR0cmlidXRlcykpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlLm5vZGVOYW1lKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjcmVhdGVkRG9jdW1lbnQuYm9keS5pbm5lckhUTUxcbn1cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCB1dGlsL3RlbXBsYXRlLWZhY3RvcnkuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi4vZG9tL3NlbGVjdG9yLWVuZ2luZS5qcydcbmltcG9ydCBDb25maWcgZnJvbSAnLi9jb25maWcuanMnXG5pbXBvcnQgeyBEZWZhdWx0QWxsb3dsaXN0LCBzYW5pdGl6ZUh0bWwgfSBmcm9tICcuL3Nhbml0aXplci5qcydcbmltcG9ydCB7IGV4ZWN1dGUsIGdldEVsZW1lbnQsIGlzRWxlbWVudCB9IGZyb20gJy4vaW5kZXguanMnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICdUZW1wbGF0ZUZhY3RvcnknXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGFsbG93TGlzdDogRGVmYXVsdEFsbG93bGlzdCxcbiAgY29udGVudDoge30sIC8vIHsgc2VsZWN0b3IgOiB0ZXh0ICwgIHNlbGVjdG9yMiA6IHRleHQyICwgfVxuICBleHRyYUNsYXNzOiAnJyxcbiAgaHRtbDogZmFsc2UsXG4gIHNhbml0aXplOiB0cnVlLFxuICBzYW5pdGl6ZUZuOiBudWxsLFxuICB0ZW1wbGF0ZTogJzxkaXY+PC9kaXY+J1xufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYWxsb3dMaXN0OiAnb2JqZWN0JyxcbiAgY29udGVudDogJ29iamVjdCcsXG4gIGV4dHJhQ2xhc3M6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gIGh0bWw6ICdib29sZWFuJyxcbiAgc2FuaXRpemU6ICdib29sZWFuJyxcbiAgc2FuaXRpemVGbjogJyhudWxsfGZ1bmN0aW9uKScsXG4gIHRlbXBsYXRlOiAnc3RyaW5nJ1xufVxuXG5jb25zdCBEZWZhdWx0Q29udGVudFR5cGUgPSB7XG4gIGVudHJ5OiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9ufG51bGwpJyxcbiAgc2VsZWN0b3I6ICcoc3RyaW5nfGVsZW1lbnQpJ1xufVxuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBUZW1wbGF0ZUZhY3RvcnkgZXh0ZW5kcyBDb25maWcge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgZ2V0Q29udGVudCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLl9jb25maWcuY29udGVudClcbiAgICAgIC5tYXAoY29uZmlnID0+IHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGNvbmZpZykpXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gIH1cblxuICBoYXNDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLmdldENvbnRlbnQoKS5sZW5ndGggPiAwXG4gIH1cblxuICBjaGFuZ2VDb250ZW50KGNvbnRlbnQpIHtcbiAgICB0aGlzLl9jaGVja0NvbnRlbnQoY29udGVudClcbiAgICB0aGlzLl9jb25maWcuY29udGVudCA9IHsgLi4udGhpcy5fY29uZmlnLmNvbnRlbnQsIC4uLmNvbnRlbnQgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB0b0h0bWwoKSB7XG4gICAgY29uc3QgdGVtcGxhdGVXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0ZW1wbGF0ZVdyYXBwZXIuaW5uZXJIVE1MID0gdGhpcy5fbWF5YmVTYW5pdGl6ZSh0aGlzLl9jb25maWcudGVtcGxhdGUpXG5cbiAgICBmb3IgKGNvbnN0IFtzZWxlY3RvciwgdGV4dF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5fY29uZmlnLmNvbnRlbnQpKSB7XG4gICAgICB0aGlzLl9zZXRDb250ZW50KHRlbXBsYXRlV3JhcHBlciwgdGV4dCwgc2VsZWN0b3IpXG4gICAgfVxuXG4gICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZVdyYXBwZXIuY2hpbGRyZW5bMF1cbiAgICBjb25zdCBleHRyYUNsYXNzID0gdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGhpcy5fY29uZmlnLmV4dHJhQ2xhc3MpXG5cbiAgICBpZiAoZXh0cmFDbGFzcykge1xuICAgICAgdGVtcGxhdGUuY2xhc3NMaXN0LmFkZCguLi5leHRyYUNsYXNzLnNwbGl0KCcgJykpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRlbXBsYXRlXG4gIH1cblxuICAvLyBQcml2YXRlXG4gIF90eXBlQ2hlY2tDb25maWcoY29uZmlnKSB7XG4gICAgc3VwZXIuX3R5cGVDaGVja0NvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fY2hlY2tDb250ZW50KGNvbmZpZy5jb250ZW50KVxuICB9XG5cbiAgX2NoZWNrQ29udGVudChhcmcpIHtcbiAgICBmb3IgKGNvbnN0IFtzZWxlY3RvciwgY29udGVudF0gb2YgT2JqZWN0LmVudHJpZXMoYXJnKSkge1xuICAgICAgc3VwZXIuX3R5cGVDaGVja0NvbmZpZyh7IHNlbGVjdG9yLCBlbnRyeTogY29udGVudCB9LCBEZWZhdWx0Q29udGVudFR5cGUpXG4gICAgfVxuICB9XG5cbiAgX3NldENvbnRlbnQodGVtcGxhdGUsIGNvbnRlbnQsIHNlbGVjdG9yKSB7XG4gICAgY29uc3QgdGVtcGxhdGVFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShzZWxlY3RvciwgdGVtcGxhdGUpXG5cbiAgICBpZiAoIXRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29udGVudCA9IHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGNvbnRlbnQpXG5cbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIHRlbXBsYXRlRWxlbWVudC5yZW1vdmUoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGlzRWxlbWVudChjb250ZW50KSkge1xuICAgICAgdGhpcy5fcHV0RWxlbWVudEluVGVtcGxhdGUoZ2V0RWxlbWVudChjb250ZW50KSwgdGVtcGxhdGVFbGVtZW50KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICB0ZW1wbGF0ZUVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fbWF5YmVTYW5pdGl6ZShjb250ZW50KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGVtcGxhdGVFbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudFxuICB9XG5cbiAgX21heWJlU2FuaXRpemUoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5zYW5pdGl6ZSA/IHNhbml0aXplSHRtbChhcmcsIHRoaXMuX2NvbmZpZy5hbGxvd0xpc3QsIHRoaXMuX2NvbmZpZy5zYW5pdGl6ZUZuKSA6IGFyZ1xuICB9XG5cbiAgX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBleGVjdXRlKGFyZywgW3RoaXNdKVxuICB9XG5cbiAgX3B1dEVsZW1lbnRJblRlbXBsYXRlKGVsZW1lbnQsIHRlbXBsYXRlRWxlbWVudCkge1xuICAgIGlmICh0aGlzLl9jb25maWcuaHRtbCkge1xuICAgICAgdGVtcGxhdGVFbGVtZW50LmlubmVySFRNTCA9ICcnXG4gICAgICB0ZW1wbGF0ZUVsZW1lbnQuYXBwZW5kKGVsZW1lbnQpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0ZW1wbGF0ZUVsZW1lbnQudGV4dENvbnRlbnQgPSBlbGVtZW50LnRleHRDb250ZW50XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGVtcGxhdGVGYWN0b3J5XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgdG9vbHRpcC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAqIGFzIFBvcHBlciBmcm9tICdAcG9wcGVyanMvY29yZSdcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQuanMnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXIuanMnXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3IuanMnXG5pbXBvcnQge1xuICBkZWZpbmVKUXVlcnlQbHVnaW4sIGV4ZWN1dGUsIGZpbmRTaGFkb3dSb290LCBnZXRFbGVtZW50LCBnZXRVSUQsIGlzUlRMLCBub29wXG59IGZyb20gJy4vdXRpbC9pbmRleC5qcydcbmltcG9ydCB7IERlZmF1bHRBbGxvd2xpc3QgfSBmcm9tICcuL3V0aWwvc2FuaXRpemVyLmpzJ1xuaW1wb3J0IFRlbXBsYXRlRmFjdG9yeSBmcm9tICcuL3V0aWwvdGVtcGxhdGUtZmFjdG9yeS5qcydcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ3Rvb2x0aXAnXG5jb25zdCBESVNBTExPV0VEX0FUVFJJQlVURVMgPSBuZXcgU2V0KFsnc2FuaXRpemUnLCAnYWxsb3dMaXN0JywgJ3Nhbml0aXplRm4nXSlcblxuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnXG5jb25zdCBDTEFTU19OQU1FX01PREFMID0gJ21vZGFsJ1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5cbmNvbnN0IFNFTEVDVE9SX1RPT0xUSVBfSU5ORVIgPSAnLnRvb2x0aXAtaW5uZXInXG5jb25zdCBTRUxFQ1RPUl9NT0RBTCA9IGAuJHtDTEFTU19OQU1FX01PREFMfWBcblxuY29uc3QgRVZFTlRfTU9EQUxfSElERSA9ICdoaWRlLmJzLm1vZGFsJ1xuXG5jb25zdCBUUklHR0VSX0hPVkVSID0gJ2hvdmVyJ1xuY29uc3QgVFJJR0dFUl9GT0NVUyA9ICdmb2N1cydcbmNvbnN0IFRSSUdHRVJfQ0xJQ0sgPSAnY2xpY2snXG5jb25zdCBUUklHR0VSX01BTlVBTCA9ICdtYW51YWwnXG5cbmNvbnN0IEVWRU5UX0hJREUgPSAnaGlkZSdcbmNvbnN0IEVWRU5UX0hJRERFTiA9ICdoaWRkZW4nXG5jb25zdCBFVkVOVF9TSE9XID0gJ3Nob3cnXG5jb25zdCBFVkVOVF9TSE9XTiA9ICdzaG93bidcbmNvbnN0IEVWRU5UX0lOU0VSVEVEID0gJ2luc2VydGVkJ1xuY29uc3QgRVZFTlRfQ0xJQ0sgPSAnY2xpY2snXG5jb25zdCBFVkVOVF9GT0NVU0lOID0gJ2ZvY3VzaW4nXG5jb25zdCBFVkVOVF9GT0NVU09VVCA9ICdmb2N1c291dCdcbmNvbnN0IEVWRU5UX01PVVNFRU5URVIgPSAnbW91c2VlbnRlcidcbmNvbnN0IEVWRU5UX01PVVNFTEVBVkUgPSAnbW91c2VsZWF2ZSdcblxuY29uc3QgQXR0YWNobWVudE1hcCA9IHtcbiAgQVVUTzogJ2F1dG8nLFxuICBUT1A6ICd0b3AnLFxuICBSSUdIVDogaXNSVEwoKSA/ICdsZWZ0JyA6ICdyaWdodCcsXG4gIEJPVFRPTTogJ2JvdHRvbScsXG4gIExFRlQ6IGlzUlRMKCkgPyAncmlnaHQnIDogJ2xlZnQnXG59XG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGFsbG93TGlzdDogRGVmYXVsdEFsbG93bGlzdCxcbiAgYW5pbWF0aW9uOiB0cnVlLFxuICBib3VuZGFyeTogJ2NsaXBwaW5nUGFyZW50cycsXG4gIGNvbnRhaW5lcjogZmFsc2UsXG4gIGN1c3RvbUNsYXNzOiAnJyxcbiAgZGVsYXk6IDAsXG4gIGZhbGxiYWNrUGxhY2VtZW50czogWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSxcbiAgaHRtbDogZmFsc2UsXG4gIG9mZnNldDogWzAsIDZdLFxuICBwbGFjZW1lbnQ6ICd0b3AnLFxuICBwb3BwZXJDb25maWc6IG51bGwsXG4gIHNhbml0aXplOiB0cnVlLFxuICBzYW5pdGl6ZUZuOiBudWxsLFxuICBzZWxlY3RvcjogZmFsc2UsXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgK1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWFycm93XCI+PC9kaXY+JyArXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICc8L2Rpdj4nLFxuICB0aXRsZTogJycsXG4gIHRyaWdnZXI6ICdob3ZlciBmb2N1cydcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGFsbG93TGlzdDogJ29iamVjdCcsXG4gIGFuaW1hdGlvbjogJ2Jvb2xlYW4nLFxuICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICBjb250YWluZXI6ICcoc3RyaW5nfGVsZW1lbnR8Ym9vbGVhbiknLFxuICBjdXN0b21DbGFzczogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgZGVsYXk6ICcobnVtYmVyfG9iamVjdCknLFxuICBmYWxsYmFja1BsYWNlbWVudHM6ICdhcnJheScsXG4gIGh0bWw6ICdib29sZWFuJyxcbiAgb2Zmc2V0OiAnKGFycmF5fHN0cmluZ3xmdW5jdGlvbiknLFxuICBwbGFjZW1lbnQ6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gIHBvcHBlckNvbmZpZzogJyhudWxsfG9iamVjdHxmdW5jdGlvbiknLFxuICBzYW5pdGl6ZTogJ2Jvb2xlYW4nLFxuICBzYW5pdGl6ZUZuOiAnKG51bGx8ZnVuY3Rpb24pJyxcbiAgc2VsZWN0b3I6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgdGVtcGxhdGU6ICdzdHJpbmcnLFxuICB0aXRsZTogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknLFxuICB0cmlnZ2VyOiAnc3RyaW5nJ1xufVxuXG4vKipcbiAqIENsYXNzIGRlZmluaXRpb25cbiAqL1xuXG5jbGFzcyBUb29sdGlwIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyB0b29sdGlwcyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpXG4gICAgfVxuXG4gICAgc3VwZXIoZWxlbWVudCwgY29uZmlnKVxuXG4gICAgLy8gUHJpdmF0ZVxuICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWVcbiAgICB0aGlzLl90aW1lb3V0ID0gMFxuICAgIHRoaXMuX2lzSG92ZXJlZCA9IG51bGxcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge31cbiAgICB0aGlzLl9wb3BwZXIgPSBudWxsXG4gICAgdGhpcy5fdGVtcGxhdGVGYWN0b3J5ID0gbnVsbFxuICAgIHRoaXMuX25ld0NvbnRlbnQgPSBudWxsXG5cbiAgICAvLyBQcm90ZWN0ZWRcbiAgICB0aGlzLnRpcCA9IG51bGxcblxuICAgIHRoaXMuX3NldExpc3RlbmVycygpXG5cbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgdGhpcy5fZml4VGl0bGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgZW5hYmxlKCkge1xuICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWVcbiAgfVxuXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2VcbiAgfVxuXG4gIHRvZ2dsZUVuYWJsZWQoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZFxuICB9XG5cbiAgdG9nZ2xlKCkge1xuICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIXRoaXMuX2FjdGl2ZVRyaWdnZXIuY2xpY2tcbiAgICBpZiAodGhpcy5faXNTaG93bigpKSB7XG4gICAgICB0aGlzLl9sZWF2ZSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9lbnRlcigpXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KVxuXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfTU9EQUwpLCBFVkVOVF9NT0RBTF9ISURFLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKVxuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLW9yaWdpbmFsLXRpdGxlJykpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsIHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLW9yaWdpbmFsLXRpdGxlJykpXG4gICAgfVxuXG4gICAgdGhpcy5fZGlzcG9zZVBvcHBlcigpXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50cycpXG4gICAgfVxuXG4gICAgaWYgKCEodGhpcy5faXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKEVWRU5UX1NIT1cpKVxuICAgIGNvbnN0IHNoYWRvd1Jvb3QgPSBmaW5kU2hhZG93Um9vdCh0aGlzLl9lbGVtZW50KVxuICAgIGNvbnN0IGlzSW5UaGVEb20gPSAoc2hhZG93Um9vdCB8fCB0aGlzLl9lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5jb250YWlucyh0aGlzLl9lbGVtZW50KVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkIHx8ICFpc0luVGhlRG9tKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBUT0RPOiB2NiByZW1vdmUgdGhpcyBvciBtYWtlIGl0IG9wdGlvbmFsXG4gICAgdGhpcy5fZGlzcG9zZVBvcHBlcigpXG5cbiAgICBjb25zdCB0aXAgPSB0aGlzLl9nZXRUaXBFbGVtZW50KClcblxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwLmdldEF0dHJpYnV0ZSgnaWQnKSlcblxuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSB0aGlzLl9jb25maWdcblxuICAgIGlmICghdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLnRpcCkpIHtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmQodGlwKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfSU5TRVJURUQpKVxuICAgIH1cblxuICAgIHRoaXMuX3BvcHBlciA9IHRoaXMuX2NyZWF0ZVBvcHBlcih0aXApXG5cbiAgICB0aXAuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbXS5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbikpIHtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKGVsZW1lbnQsICdtb3VzZW92ZXInLCBub29wKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfU0hPV04pKVxuXG4gICAgICBpZiAodGhpcy5faXNIb3ZlcmVkID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLl9sZWF2ZSgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzSG92ZXJlZCA9IGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy50aXAsIHRoaXMuX2lzQW5pbWF0ZWQoKSlcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1Nob3duKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKEVWRU5UX0hJREUpKVxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgdGlwID0gdGhpcy5fZ2V0VGlwRWxlbWVudCgpXG4gICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbXS5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbikpIHtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCAnbW91c2VvdmVyJywgbm9vcClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfQ0xJQ0tdID0gZmFsc2VcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfRk9DVVNdID0gZmFsc2VcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfSE9WRVJdID0gZmFsc2VcbiAgICB0aGlzLl9pc0hvdmVyZWQgPSBudWxsIC8vIGl0IGlzIGEgdHJpY2sgdG8gc3VwcG9ydCBtYW51YWwgdHJpZ2dlcmluZ1xuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzSG92ZXJlZCkge1xuICAgICAgICB0aGlzLl9kaXNwb3NlUG9wcGVyKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfSElEREVOKSlcbiAgICB9XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLnRpcCwgdGhpcy5faXNBbmltYXRlZCgpKVxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFByb3RlY3RlZFxuICBfaXNXaXRoQ29udGVudCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLl9nZXRUaXRsZSgpKVxuICB9XG5cbiAgX2dldFRpcEVsZW1lbnQoKSB7XG4gICAgaWYgKCF0aGlzLnRpcCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLl9jcmVhdGVUaXBFbGVtZW50KHRoaXMuX25ld0NvbnRlbnQgfHwgdGhpcy5fZ2V0Q29udGVudEZvclRlbXBsYXRlKCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGlwXG4gIH1cblxuICBfY3JlYXRlVGlwRWxlbWVudChjb250ZW50KSB7XG4gICAgY29uc3QgdGlwID0gdGhpcy5fZ2V0VGVtcGxhdGVGYWN0b3J5KGNvbnRlbnQpLnRvSHRtbCgpXG5cbiAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBjaGVjayBpbiB2NlxuICAgIGlmICghdGlwKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHRpcC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfRkFERSwgQ0xBU1NfTkFNRV9TSE9XKVxuICAgIC8vIFRPRE86IHY2IHRoZSBmb2xsb3dpbmcgY2FuIGJlIGFjaGlldmVkIHdpdGggQ1NTIG9ubHlcbiAgICB0aXAuY2xhc3NMaXN0LmFkZChgYnMtJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9LWF1dG9gKVxuXG4gICAgY29uc3QgdGlwSWQgPSBnZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKS50b1N0cmluZygpXG5cbiAgICB0aXAuc2V0QXR0cmlidXRlKCdpZCcsIHRpcElkKVxuXG4gICAgaWYgKHRoaXMuX2lzQW5pbWF0ZWQoKSkge1xuICAgICAgdGlwLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9GQURFKVxuICAgIH1cblxuICAgIHJldHVybiB0aXBcbiAgfVxuXG4gIHNldENvbnRlbnQoY29udGVudCkge1xuICAgIHRoaXMuX25ld0NvbnRlbnQgPSBjb250ZW50XG4gICAgaWYgKHRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgdGhpcy5fZGlzcG9zZVBvcHBlcigpXG4gICAgICB0aGlzLnNob3coKVxuICAgIH1cbiAgfVxuXG4gIF9nZXRUZW1wbGF0ZUZhY3RvcnkoY29udGVudCkge1xuICAgIGlmICh0aGlzLl90ZW1wbGF0ZUZhY3RvcnkpIHtcbiAgICAgIHRoaXMuX3RlbXBsYXRlRmFjdG9yeS5jaGFuZ2VDb250ZW50KGNvbnRlbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3RlbXBsYXRlRmFjdG9yeSA9IG5ldyBUZW1wbGF0ZUZhY3Rvcnkoe1xuICAgICAgICAuLi50aGlzLl9jb25maWcsXG4gICAgICAgIC8vIHRoZSBgY29udGVudGAgdmFyIGhhcyB0byBiZSBhZnRlciBgdGhpcy5fY29uZmlnYFxuICAgICAgICAvLyB0byBvdmVycmlkZSBjb25maWcuY29udGVudCBpbiBjYXNlIG9mIHBvcG92ZXJcbiAgICAgICAgY29udGVudCxcbiAgICAgICAgZXh0cmFDbGFzczogdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fdGVtcGxhdGVGYWN0b3J5XG4gIH1cblxuICBfZ2V0Q29udGVudEZvclRlbXBsYXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBbU0VMRUNUT1JfVE9PTFRJUF9JTk5FUl06IHRoaXMuX2dldFRpdGxlKClcbiAgICB9XG4gIH1cblxuICBfZ2V0VGl0bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRoaXMuX2NvbmZpZy50aXRsZSkgfHwgdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuICBfaW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuZ2V0T3JDcmVhdGVJbnN0YW5jZShldmVudC5kZWxlZ2F0ZVRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSlcbiAgfVxuXG4gIF9pc0FuaW1hdGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuYW5pbWF0aW9uIHx8ICh0aGlzLnRpcCAmJiB0aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFKSlcbiAgfVxuXG4gIF9pc1Nob3duKCkge1xuICAgIHJldHVybiB0aGlzLnRpcCAmJiB0aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKVxuICB9XG5cbiAgX2NyZWF0ZVBvcHBlcih0aXApIHtcbiAgICBjb25zdCBwbGFjZW1lbnQgPSBleGVjdXRlKHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQsIFt0aGlzLCB0aXAsIHRoaXMuX2VsZW1lbnRdKVxuICAgIGNvbnN0IGF0dGFjaG1lbnQgPSBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXVxuICAgIHJldHVybiBQb3BwZXIuY3JlYXRlUG9wcGVyKHRoaXMuX2VsZW1lbnQsIHRpcCwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpKVxuICB9XG5cbiAgX2dldE9mZnNldCgpIHtcbiAgICBjb25zdCB7IG9mZnNldCB9ID0gdGhpcy5fY29uZmlnXG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvZmZzZXQuc3BsaXQoJywnKS5tYXAodmFsdWUgPT4gTnVtYmVyLnBhcnNlSW50KHZhbHVlLCAxMCkpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBwb3BwZXJEYXRhID0+IG9mZnNldChwb3BwZXJEYXRhLCB0aGlzLl9lbGVtZW50KVxuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXRcbiAgfVxuXG4gIF9yZXNvbHZlUG9zc2libGVGdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZXhlY3V0ZShhcmcsIFt0aGlzLl9lbGVtZW50XSlcbiAgfVxuXG4gIF9nZXRQb3BwZXJDb25maWcoYXR0YWNobWVudCkge1xuICAgIGNvbnN0IGRlZmF1bHRCc1BvcHBlckNvbmZpZyA9IHtcbiAgICAgIHBsYWNlbWVudDogYXR0YWNobWVudCxcbiAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ2ZsaXAnLFxuICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGZhbGxiYWNrUGxhY2VtZW50czogdGhpcy5fY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50c1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdvZmZzZXQnLFxuICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBib3VuZGFyeTogdGhpcy5fY29uZmlnLmJvdW5kYXJ5XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ2Fycm93JyxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBlbGVtZW50OiBgLiR7dGhpcy5jb25zdHJ1Y3Rvci5OQU1FfS1hcnJvd2BcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAncHJlU2V0UGxhY2VtZW50JyxcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIHBoYXNlOiAnYmVmb3JlTWFpbicsXG4gICAgICAgICAgZm46IGRhdGEgPT4ge1xuICAgICAgICAgICAgLy8gUHJlLXNldCBQb3BwZXIncyBwbGFjZW1lbnQgYXR0cmlidXRlIGluIG9yZGVyIHRvIHJlYWQgdGhlIGFycm93IHNpemVzIHByb3Blcmx5LlxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBQb3BwZXIgbWl4ZXMgdXAgdGhlIHdpZHRoIGFuZCBoZWlnaHQgZGltZW5zaW9ucyBzaW5jZSB0aGUgaW5pdGlhbCBhcnJvdyBzdHlsZSBpcyBmb3IgdG9wIHBsYWNlbWVudFxuICAgICAgICAgICAgdGhpcy5fZ2V0VGlwRWxlbWVudCgpLnNldEF0dHJpYnV0ZSgnZGF0YS1wb3BwZXItcGxhY2VtZW50JywgZGF0YS5zdGF0ZS5wbGFjZW1lbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRlZmF1bHRCc1BvcHBlckNvbmZpZyxcbiAgICAgIC4uLmV4ZWN1dGUodGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZywgW2RlZmF1bHRCc1BvcHBlckNvbmZpZ10pXG4gICAgfVxuICB9XG5cbiAgX3NldExpc3RlbmVycygpIHtcbiAgICBjb25zdCB0cmlnZ2VycyA9IHRoaXMuX2NvbmZpZy50cmlnZ2VyLnNwbGl0KCcgJylcblxuICAgIGZvciAoY29uc3QgdHJpZ2dlciBvZiB0cmlnZ2Vycykge1xuICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKEVWRU5UX0NMSUNLKSwgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCBldmVudCA9PiB7XG4gICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudClcbiAgICAgICAgICBjb250ZXh0LnRvZ2dsZSgpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRSSUdHRVJfTUFOVUFMKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50SW4gPSB0cmlnZ2VyID09PSBUUklHR0VSX0hPVkVSID9cbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShFVkVOVF9NT1VTRUVOVEVSKSA6XG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfRk9DVVNJTilcbiAgICAgICAgY29uc3QgZXZlbnRPdXQgPSB0cmlnZ2VyID09PSBUUklHR0VSX0hPVkVSID9cbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShFVkVOVF9NT1VTRUxFQVZFKSA6XG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfRk9DVVNPVVQpXG5cbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIGV2ZW50SW4sIHRoaXMuX2NvbmZpZy5zZWxlY3RvciwgZXZlbnQgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQoZXZlbnQpXG4gICAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNpbicgPyBUUklHR0VSX0ZPQ1VTIDogVFJJR0dFUl9IT1ZFUl0gPSB0cnVlXG4gICAgICAgICAgY29udGV4dC5fZW50ZXIoKVxuICAgICAgICB9KVxuICAgICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgZXZlbnRPdXQsIHRoaXMuX2NvbmZpZy5zZWxlY3RvciwgZXZlbnQgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQoZXZlbnQpXG4gICAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVFJJR0dFUl9GT0NVUyA6IFRSSUdHRVJfSE9WRVJdID1cbiAgICAgICAgICAgIGNvbnRleHQuX2VsZW1lbnQuY29udGFpbnMoZXZlbnQucmVsYXRlZFRhcmdldClcblxuICAgICAgICAgIGNvbnRleHQuX2xlYXZlKClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudC5jbG9zZXN0KFNFTEVDVE9SX01PREFMKSwgRVZFTlRfTU9EQUxfSElERSwgdGhpcy5faGlkZU1vZGFsSGFuZGxlcilcbiAgfVxuXG4gIF9maXhUaXRsZSgpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG5cbiAgICBpZiAoIXRpdGxlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJykgJiYgIXRoaXMuX2VsZW1lbnQudGV4dENvbnRlbnQudHJpbSgpKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHRpdGxlKVxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWJzLW9yaWdpbmFsLXRpdGxlJywgdGl0bGUpIC8vIERPIE5PVCBVU0UgSVQuIElzIG9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3RpdGxlJylcbiAgfVxuXG4gIF9lbnRlcigpIHtcbiAgICBpZiAodGhpcy5faXNTaG93bigpIHx8IHRoaXMuX2lzSG92ZXJlZCkge1xuICAgICAgdGhpcy5faXNIb3ZlcmVkID0gdHJ1ZVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNIb3ZlcmVkID0gdHJ1ZVxuXG4gICAgdGhpcy5fc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5faXNIb3ZlcmVkKSB7XG4gICAgICAgIHRoaXMuc2hvdygpXG4gICAgICB9XG4gICAgfSwgdGhpcy5fY29uZmlnLmRlbGF5LnNob3cpXG4gIH1cblxuICBfbGVhdmUoKSB7XG4gICAgaWYgKHRoaXMuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNIb3ZlcmVkID0gZmFsc2VcblxuICAgIHRoaXMuX3NldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLl9pc0hvdmVyZWQpIHtcbiAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgIH1cbiAgICB9LCB0aGlzLl9jb25maWcuZGVsYXkuaGlkZSlcbiAgfVxuXG4gIF9zZXRUaW1lb3V0KGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dClcbiAgICB0aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dChoYW5kbGVyLCB0aW1lb3V0KVxuICB9XG5cbiAgX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5fYWN0aXZlVHJpZ2dlcikuaW5jbHVkZXModHJ1ZSlcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KVxuXG4gICAgZm9yIChjb25zdCBkYXRhQXR0cmlidXRlIG9mIE9iamVjdC5rZXlzKGRhdGFBdHRyaWJ1dGVzKSkge1xuICAgICAgaWYgKERJU0FMTE9XRURfQVRUUklCVVRFUy5oYXMoZGF0YUF0dHJpYnV0ZSkpIHtcbiAgICAgICAgZGVsZXRlIGRhdGFBdHRyaWJ1dGVzW2RhdGFBdHRyaWJ1dGVdXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uZGF0YUF0dHJpYnV0ZXMsXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfVxuICAgIGNvbmZpZyA9IHRoaXMuX21lcmdlQ29uZmlnT2JqKGNvbmZpZylcbiAgICBjb25maWcgPSB0aGlzLl9jb25maWdBZnRlck1lcmdlKGNvbmZpZylcbiAgICB0aGlzLl90eXBlQ2hlY2tDb25maWcoY29uZmlnKVxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9jb25maWdBZnRlck1lcmdlKGNvbmZpZykge1xuICAgIGNvbmZpZy5jb250YWluZXIgPSBjb25maWcuY29udGFpbmVyID09PSBmYWxzZSA/IGRvY3VtZW50LmJvZHkgOiBnZXRFbGVtZW50KGNvbmZpZy5jb250YWluZXIpXG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbmZpZy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxuICAgICAgICBoaWRlOiBjb25maWcuZGVsYXlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy50aXRsZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbmZpZy50aXRsZSA9IGNvbmZpZy50aXRsZS50b1N0cmluZygpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcuY29udGVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbmZpZy5jb250ZW50ID0gY29uZmlnLmNvbnRlbnQudG9TdHJpbmcoKVxuICAgIH1cblxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9nZXREZWxlZ2F0ZUNvbmZpZygpIHtcbiAgICBjb25zdCBjb25maWcgPSB7fVxuXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5fY29uZmlnKSkge1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB2YWx1ZSkge1xuICAgICAgICBjb25maWdba2V5XSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnLnNlbGVjdG9yID0gZmFsc2VcbiAgICBjb25maWcudHJpZ2dlciA9ICdtYW51YWwnXG5cbiAgICAvLyBJbiB0aGUgZnV0dXJlIGNhbiBiZSByZXBsYWNlZCB3aXRoOlxuICAgIC8vIGNvbnN0IGtleXNXaXRoRGlmZmVyZW50VmFsdWVzID0gT2JqZWN0LmVudHJpZXModGhpcy5fY29uZmlnKS5maWx0ZXIoZW50cnkgPT4gdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2VudHJ5WzBdXSAhPT0gdGhpcy5fY29uZmlnW2VudHJ5WzBdXSlcbiAgICAvLyBgT2JqZWN0LmZyb21FbnRyaWVzKGtleXNXaXRoRGlmZmVyZW50VmFsdWVzKWBcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfZGlzcG9zZVBvcHBlcigpIHtcbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpXG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICB0aGlzLnRpcC5yZW1vdmUoKVxuICAgICAgdGhpcy50aXAgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gVG9vbHRpcC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBqUXVlcnlcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oVG9vbHRpcClcblxuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwIHBvcG92ZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuL3Rvb2x0aXAuanMnXG5pbXBvcnQgeyBkZWZpbmVKUXVlcnlQbHVnaW4gfSBmcm9tICcuL3V0aWwvaW5kZXguanMnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICdwb3BvdmVyJ1xuXG5jb25zdCBTRUxFQ1RPUl9USVRMRSA9ICcucG9wb3Zlci1oZWFkZXInXG5jb25zdCBTRUxFQ1RPUl9DT05URU5UID0gJy5wb3BvdmVyLWJvZHknXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIC4uLlRvb2x0aXAuRGVmYXVsdCxcbiAgY29udGVudDogJycsXG4gIG9mZnNldDogWzAsIDhdLFxuICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPicgK1xuICAgICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1hcnJvd1wiPjwvZGl2PicgK1xuICAgICc8aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+JyArXG4gICAgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj4nICtcbiAgICAnPC9kaXY+JyxcbiAgdHJpZ2dlcjogJ2NsaWNrJ1xufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgLi4uVG9vbHRpcC5EZWZhdWx0VHlwZSxcbiAgY29udGVudDogJyhudWxsfHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKSdcbn1cblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgUG9wb3ZlciBleHRlbmRzIFRvb2x0aXAge1xuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gT3ZlcnJpZGVzXG4gIF9pc1dpdGhDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuICBfZ2V0Q29udGVudEZvclRlbXBsYXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBbU0VMRUNUT1JfVElUTEVdOiB0aGlzLl9nZXRUaXRsZSgpLFxuICAgICAgW1NFTEVDVE9SX0NPTlRFTlRdOiB0aGlzLl9nZXRDb250ZW50KClcbiAgICB9XG4gIH1cblxuICBfZ2V0Q29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGhpcy5fY29uZmlnLmNvbnRlbnQpXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBQb3BvdmVyLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICB9XG5cbiAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIGpRdWVyeVxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihQb3BvdmVyKVxuXG5leHBvcnQgZGVmYXVsdCBQb3BvdmVyXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgc2Nyb2xsc3B5LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudC5qcydcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlci5qcydcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuL2RvbS9zZWxlY3Rvci1lbmdpbmUuanMnXG5pbXBvcnQge1xuICBkZWZpbmVKUXVlcnlQbHVnaW4sIGdldEVsZW1lbnQsIGlzRGlzYWJsZWQsIGlzVmlzaWJsZVxufSBmcm9tICcuL3V0aWwvaW5kZXguanMnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICdzY3JvbGxzcHknXG5jb25zdCBEQVRBX0tFWSA9ICdicy5zY3JvbGxzcHknXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcblxuY29uc3QgRVZFTlRfQUNUSVZBVEUgPSBgYWN0aXZhdGUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDSyA9IGBjbGljayR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0xPQURfREFUQV9BUEkgPSBgbG9hZCR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcblxuY29uc3QgQ0xBU1NfTkFNRV9EUk9QRE9XTl9JVEVNID0gJ2Ryb3Bkb3duLWl0ZW0nXG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSA9ICdhY3RpdmUnXG5cbmNvbnN0IFNFTEVDVE9SX0RBVEFfU1BZID0gJ1tkYXRhLWJzLXNweT1cInNjcm9sbFwiXSdcbmNvbnN0IFNFTEVDVE9SX1RBUkdFVF9MSU5LUyA9ICdbaHJlZl0nXG5jb25zdCBTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCA9ICcubmF2LCAubGlzdC1ncm91cCdcbmNvbnN0IFNFTEVDVE9SX05BVl9MSU5LUyA9ICcubmF2LWxpbmsnXG5jb25zdCBTRUxFQ1RPUl9OQVZfSVRFTVMgPSAnLm5hdi1pdGVtJ1xuY29uc3QgU0VMRUNUT1JfTElTVF9JVEVNUyA9ICcubGlzdC1ncm91cC1pdGVtJ1xuY29uc3QgU0VMRUNUT1JfTElOS19JVEVNUyA9IGAke1NFTEVDVE9SX05BVl9MSU5LU30sICR7U0VMRUNUT1JfTkFWX0lURU1TfSA+ICR7U0VMRUNUT1JfTkFWX0xJTktTfSwgJHtTRUxFQ1RPUl9MSVNUX0lURU1TfWBcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOID0gJy5kcm9wZG93bidcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOX1RPR0dMRSA9ICcuZHJvcGRvd24tdG9nZ2xlJ1xuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBvZmZzZXQ6IG51bGwsIC8vIFRPRE86IHY2IEBkZXByZWNhdGVkLCBrZWVwIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSByZWFzb25zXG4gIHJvb3RNYXJnaW46ICcwcHggMHB4IC0yNSUnLFxuICBzbW9vdGhTY3JvbGw6IGZhbHNlLFxuICB0YXJnZXQ6IG51bGwsXG4gIHRocmVzaG9sZDogWzAuMSwgMC41LCAxXVxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgb2Zmc2V0OiAnKG51bWJlcnxudWxsKScsIC8vIFRPRE8gdjYgQGRlcHJlY2F0ZWQsIGtlZXAgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnNcbiAgcm9vdE1hcmdpbjogJ3N0cmluZycsXG4gIHNtb290aFNjcm9sbDogJ2Jvb2xlYW4nLFxuICB0YXJnZXQ6ICdlbGVtZW50JyxcbiAgdGhyZXNob2xkOiAnYXJyYXknXG59XG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvblxuICovXG5cbmNsYXNzIFNjcm9sbFNweSBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50LCBjb25maWcpXG5cbiAgICAvLyB0aGlzLl9lbGVtZW50IGlzIHRoZSBvYnNlcnZhYmxlc0NvbnRhaW5lciBhbmQgY29uZmlnLnRhcmdldCB0aGUgbWVudSBsaW5rcyB3cmFwcGVyXG4gICAgdGhpcy5fdGFyZ2V0TGlua3MgPSBuZXcgTWFwKClcbiAgICB0aGlzLl9vYnNlcnZhYmxlU2VjdGlvbnMgPSBuZXcgTWFwKClcbiAgICB0aGlzLl9yb290RWxlbWVudCA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5fZWxlbWVudCkub3ZlcmZsb3dZID09PSAndmlzaWJsZScgPyBudWxsIDogdGhpcy5fZWxlbWVudFxuICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGxcbiAgICB0aGlzLl9vYnNlcnZlciA9IG51bGxcbiAgICB0aGlzLl9wcmV2aW91c1Njcm9sbERhdGEgPSB7XG4gICAgICB2aXNpYmxlRW50cnlUb3A6IDAsXG4gICAgICBwYXJlbnRTY3JvbGxUb3A6IDBcbiAgICB9XG4gICAgdGhpcy5yZWZyZXNoKCkgLy8gaW5pdGlhbGl6ZVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlXG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuICByZWZyZXNoKCkge1xuICAgIHRoaXMuX2luaXRpYWxpemVUYXJnZXRzQW5kT2JzZXJ2YWJsZXMoKVxuICAgIHRoaXMuX21heWJlRW5hYmxlU21vb3RoU2Nyb2xsKClcblxuICAgIGlmICh0aGlzLl9vYnNlcnZlcikge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX29ic2VydmVyID0gdGhpcy5fZ2V0TmV3T2JzZXJ2ZXIoKVxuICAgIH1cblxuICAgIGZvciAoY29uc3Qgc2VjdGlvbiBvZiB0aGlzLl9vYnNlcnZhYmxlU2VjdGlvbnMudmFsdWVzKCkpIHtcbiAgICAgIHRoaXMuX29ic2VydmVyLm9ic2VydmUoc2VjdGlvbilcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKVxuICAgIHN1cGVyLmRpc3Bvc2UoKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuICBfY29uZmlnQWZ0ZXJNZXJnZShjb25maWcpIHtcbiAgICAvLyBUT0RPOiBvbiB2NiB0YXJnZXQgc2hvdWxkIGJlIGdpdmVuIGV4cGxpY2l0bHkgJiByZW1vdmUgdGhlIHt0YXJnZXQ6ICdzcy10YXJnZXQnfSBjYXNlXG4gICAgY29uZmlnLnRhcmdldCA9IGdldEVsZW1lbnQoY29uZmlnLnRhcmdldCkgfHwgZG9jdW1lbnQuYm9keVxuXG4gICAgLy8gVE9ETzogdjYgT25seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29ucy4gVXNlIHJvb3RNYXJnaW4gb25seVxuICAgIGNvbmZpZy5yb290TWFyZ2luID0gY29uZmlnLm9mZnNldCA/IGAke2NvbmZpZy5vZmZzZXR9cHggMHB4IC0zMCVgIDogY29uZmlnLnJvb3RNYXJnaW5cblxuICAgIGlmICh0eXBlb2YgY29uZmlnLnRocmVzaG9sZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZy50aHJlc2hvbGQgPSBjb25maWcudGhyZXNob2xkLnNwbGl0KCcsJykubWFwKHZhbHVlID0+IE51bWJlci5wYXJzZUZsb2F0KHZhbHVlKSlcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfbWF5YmVFbmFibGVTbW9vdGhTY3JvbGwoKSB7XG4gICAgaWYgKCF0aGlzLl9jb25maWcuc21vb3RoU2Nyb2xsKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB1bnJlZ2lzdGVyIGFueSBwcmV2aW91cyBsaXN0ZW5lcnNcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2NvbmZpZy50YXJnZXQsIEVWRU5UX0NMSUNLKVxuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2NvbmZpZy50YXJnZXQsIEVWRU5UX0NMSUNLLCBTRUxFQ1RPUl9UQVJHRVRfTElOS1MsIGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IG9ic2VydmFibGVTZWN0aW9uID0gdGhpcy5fb2JzZXJ2YWJsZVNlY3Rpb25zLmdldChldmVudC50YXJnZXQuaGFzaClcbiAgICAgIGlmIChvYnNlcnZhYmxlU2VjdGlvbikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLl9yb290RWxlbWVudCB8fCB3aW5kb3dcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gb2JzZXJ2YWJsZVNlY3Rpb24ub2Zmc2V0VG9wIC0gdGhpcy5fZWxlbWVudC5vZmZzZXRUb3BcbiAgICAgICAgaWYgKHJvb3Quc2Nyb2xsVG8pIHtcbiAgICAgICAgICByb290LnNjcm9sbFRvKHsgdG9wOiBoZWlnaHQsIGJlaGF2aW9yOiAnc21vb3RoJyB9KVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hyb21lIDYwIGRvZXNuJ3Qgc3VwcG9ydCBgc2Nyb2xsVG9gXG4gICAgICAgIHJvb3Quc2Nyb2xsVG9wID0gaGVpZ2h0XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIF9nZXROZXdPYnNlcnZlcigpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgcm9vdDogdGhpcy5fcm9vdEVsZW1lbnQsXG4gICAgICB0aHJlc2hvbGQ6IHRoaXMuX2NvbmZpZy50aHJlc2hvbGQsXG4gICAgICByb290TWFyZ2luOiB0aGlzLl9jb25maWcucm9vdE1hcmdpblxuICAgIH1cblxuICAgIHJldHVybiBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB0aGlzLl9vYnNlcnZlckNhbGxiYWNrKGVudHJpZXMpLCBvcHRpb25zKVxuICB9XG5cbiAgLy8gVGhlIGxvZ2ljIG9mIHNlbGVjdGlvblxuICBfb2JzZXJ2ZXJDYWxsYmFjayhlbnRyaWVzKSB7XG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGVudHJ5ID0+IHRoaXMuX3RhcmdldExpbmtzLmdldChgIyR7ZW50cnkudGFyZ2V0LmlkfWApXG4gICAgY29uc3QgYWN0aXZhdGUgPSBlbnRyeSA9PiB7XG4gICAgICB0aGlzLl9wcmV2aW91c1Njcm9sbERhdGEudmlzaWJsZUVudHJ5VG9wID0gZW50cnkudGFyZ2V0Lm9mZnNldFRvcFxuICAgICAgdGhpcy5fcHJvY2Vzcyh0YXJnZXRFbGVtZW50KGVudHJ5KSlcbiAgICB9XG5cbiAgICBjb25zdCBwYXJlbnRTY3JvbGxUb3AgPSAodGhpcy5fcm9vdEVsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5zY3JvbGxUb3BcbiAgICBjb25zdCB1c2VyU2Nyb2xsc0Rvd24gPSBwYXJlbnRTY3JvbGxUb3AgPj0gdGhpcy5fcHJldmlvdXNTY3JvbGxEYXRhLnBhcmVudFNjcm9sbFRvcFxuICAgIHRoaXMuX3ByZXZpb3VzU2Nyb2xsRGF0YS5wYXJlbnRTY3JvbGxUb3AgPSBwYXJlbnRTY3JvbGxUb3BcblxuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgaWYgKCFlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsXG4gICAgICAgIHRoaXMuX2NsZWFyQWN0aXZlQ2xhc3ModGFyZ2V0RWxlbWVudChlbnRyeSkpXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgY29uc3QgZW50cnlJc0xvd2VyVGhhblByZXZpb3VzID0gZW50cnkudGFyZ2V0Lm9mZnNldFRvcCA+PSB0aGlzLl9wcmV2aW91c1Njcm9sbERhdGEudmlzaWJsZUVudHJ5VG9wXG4gICAgICAvLyBpZiB3ZSBhcmUgc2Nyb2xsaW5nIGRvd24sIHBpY2sgdGhlIGJpZ2dlciBvZmZzZXRUb3BcbiAgICAgIGlmICh1c2VyU2Nyb2xsc0Rvd24gJiYgZW50cnlJc0xvd2VyVGhhblByZXZpb3VzKSB7XG4gICAgICAgIGFjdGl2YXRlKGVudHJ5KVxuICAgICAgICAvLyBpZiBwYXJlbnQgaXNuJ3Qgc2Nyb2xsZWQsIGxldCdzIGtlZXAgdGhlIGZpcnN0IHZpc2libGUgaXRlbSwgYnJlYWtpbmcgdGhlIGl0ZXJhdGlvblxuICAgICAgICBpZiAoIXBhcmVudFNjcm9sbFRvcCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gaWYgd2UgYXJlIHNjcm9sbGluZyB1cCwgcGljayB0aGUgc21hbGxlc3Qgb2Zmc2V0VG9wXG4gICAgICBpZiAoIXVzZXJTY3JvbGxzRG93biAmJiAhZW50cnlJc0xvd2VyVGhhblByZXZpb3VzKSB7XG4gICAgICAgIGFjdGl2YXRlKGVudHJ5KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9pbml0aWFsaXplVGFyZ2V0c0FuZE9ic2VydmFibGVzKCkge1xuICAgIHRoaXMuX3RhcmdldExpbmtzID0gbmV3IE1hcCgpXG4gICAgdGhpcy5fb2JzZXJ2YWJsZVNlY3Rpb25zID0gbmV3IE1hcCgpXG5cbiAgICBjb25zdCB0YXJnZXRMaW5rcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfVEFSR0VUX0xJTktTLCB0aGlzLl9jb25maWcudGFyZ2V0KVxuXG4gICAgZm9yIChjb25zdCBhbmNob3Igb2YgdGFyZ2V0TGlua3MpIHtcbiAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBhbmNob3IgaGFzIGFuIGlkIGFuZCBpcyBub3QgZGlzYWJsZWRcbiAgICAgIGlmICghYW5jaG9yLmhhc2ggfHwgaXNEaXNhYmxlZChhbmNob3IpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9ic2VydmFibGVTZWN0aW9uID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShkZWNvZGVVUkkoYW5jaG9yLmhhc2gpLCB0aGlzLl9lbGVtZW50KVxuXG4gICAgICAvLyBlbnN1cmUgdGhhdCB0aGUgb2JzZXJ2YWJsZVNlY3Rpb24gZXhpc3RzICYgaXMgdmlzaWJsZVxuICAgICAgaWYgKGlzVmlzaWJsZShvYnNlcnZhYmxlU2VjdGlvbikpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0TGlua3Muc2V0KGRlY29kZVVSSShhbmNob3IuaGFzaCksIGFuY2hvcilcbiAgICAgICAgdGhpcy5fb2JzZXJ2YWJsZVNlY3Rpb25zLnNldChhbmNob3IuaGFzaCwgb2JzZXJ2YWJsZVNlY3Rpb24pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3Byb2Nlc3ModGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9jbGVhckFjdGl2ZUNsYXNzKHRoaXMuX2NvbmZpZy50YXJnZXQpXG4gICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpXG4gICAgdGhpcy5fYWN0aXZhdGVQYXJlbnRzKHRhcmdldClcblxuICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0FDVElWQVRFLCB7IHJlbGF0ZWRUYXJnZXQ6IHRhcmdldCB9KVxuICB9XG5cbiAgX2FjdGl2YXRlUGFyZW50cyh0YXJnZXQpIHtcbiAgICAvLyBBY3RpdmF0ZSBkcm9wZG93biBwYXJlbnRzXG4gICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QRE9XTl9JVEVNKSkge1xuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUsIHRhcmdldC5jbG9zZXN0KFNFTEVDVE9SX0RST1BET1dOKSlcbiAgICAgICAgLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGxpc3RHcm91cCBvZiBTZWxlY3RvckVuZ2luZS5wYXJlbnRzKHRhcmdldCwgU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVApKSB7XG4gICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmtzIHBhcmVudHMgYXMgYWN0aXZlXG4gICAgICAvLyBXaXRoIGJvdGggPHVsPiBhbmQgPG5hdj4gbWFya3VwIGEgcGFyZW50IGlzIHRoZSBwcmV2aW91cyBzaWJsaW5nIG9mIGFueSBuYXYgYW5jZXN0b3JcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBTZWxlY3RvckVuZ2luZS5wcmV2KGxpc3RHcm91cCwgU0VMRUNUT1JfTElOS19JVEVNUykpIHtcbiAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9jbGVhckFjdGl2ZUNsYXNzKHBhcmVudCkge1xuICAgIHBhcmVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKVxuXG4gICAgY29uc3QgYWN0aXZlTm9kZXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKGAke1NFTEVDVE9SX1RBUkdFVF9MSU5LU30uJHtDTEFTU19OQU1FX0FDVElWRX1gLCBwYXJlbnQpXG4gICAgZm9yIChjb25zdCBub2RlIG9mIGFjdGl2ZU5vZGVzKSB7XG4gICAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUpXG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gU2Nyb2xsU3B5LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCB8fCBjb25maWcuc3RhcnRzV2l0aCgnXycpIHx8IGNvbmZpZyA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICB9XG5cbiAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSwgKCkgPT4ge1xuICBmb3IgKGNvbnN0IHNweSBvZiBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfU1BZKSkge1xuICAgIFNjcm9sbFNweS5nZXRPckNyZWF0ZUluc3RhbmNlKHNweSlcbiAgfVxufSlcblxuLyoqXG4gKiBqUXVlcnlcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oU2Nyb2xsU3B5KVxuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGxTcHlcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCB0YWIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50LmpzJ1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyLmpzJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZS5qcydcbmltcG9ydCB7IGRlZmluZUpRdWVyeVBsdWdpbiwgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQsIGlzRGlzYWJsZWQgfSBmcm9tICcuL3V0aWwvaW5kZXguanMnXG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTkFNRSA9ICd0YWInXG5jb25zdCBEQVRBX0tFWSA9ICdicy50YWInXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuXG5jb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSA9IGBjbGljayR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0tFWURPV04gPSBga2V5ZG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0xPQURfREFUQV9BUEkgPSBgbG9hZCR7RVZFTlRfS0VZfWBcblxuY29uc3QgQVJST1dfTEVGVF9LRVkgPSAnQXJyb3dMZWZ0J1xuY29uc3QgQVJST1dfUklHSFRfS0VZID0gJ0Fycm93UmlnaHQnXG5jb25zdCBBUlJPV19VUF9LRVkgPSAnQXJyb3dVcCdcbmNvbnN0IEFSUk9XX0RPV05fS0VZID0gJ0Fycm93RG93bidcbmNvbnN0IEhPTUVfS0VZID0gJ0hvbWUnXG5jb25zdCBFTkRfS0VZID0gJ0VuZCdcblxuY29uc3QgQ0xBU1NfTkFNRV9BQ1RJVkUgPSAnYWN0aXZlJ1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnXG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSAnc2hvdydcbmNvbnN0IENMQVNTX0RST1BET1dOID0gJ2Ryb3Bkb3duJ1xuXG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUgPSAnLmRyb3Bkb3duLXRvZ2dsZSdcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOX01FTlUgPSAnLmRyb3Bkb3duLW1lbnUnXG5jb25zdCBOT1RfU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFID0gYDpub3QoJHtTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEV9KWBcblxuY29uc3QgU0VMRUNUT1JfVEFCX1BBTkVMID0gJy5saXN0LWdyb3VwLCAubmF2LCBbcm9sZT1cInRhYmxpc3RcIl0nXG5jb25zdCBTRUxFQ1RPUl9PVVRFUiA9ICcubmF2LWl0ZW0sIC5saXN0LWdyb3VwLWl0ZW0nXG5jb25zdCBTRUxFQ1RPUl9JTk5FUiA9IGAubmF2LWxpbmske05PVF9TRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEV9LCAubGlzdC1ncm91cC1pdGVtJHtOT1RfU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFfSwgW3JvbGU9XCJ0YWJcIl0ke05PVF9TRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEV9YFxuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwidGFiXCJdLCBbZGF0YS1icy10b2dnbGU9XCJwaWxsXCJdLCBbZGF0YS1icy10b2dnbGU9XCJsaXN0XCJdJyAvLyBUT0RPOiBjb3VsZCBvbmx5IGJlIGB0YWJgIGluIHY2XG5jb25zdCBTRUxFQ1RPUl9JTk5FUl9FTEVNID0gYCR7U0VMRUNUT1JfSU5ORVJ9LCAke1NFTEVDVE9SX0RBVEFfVE9HR0xFfWBcblxuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEVfQUNUSVZFID0gYC4ke0NMQVNTX05BTUVfQUNUSVZFfVtkYXRhLWJzLXRvZ2dsZT1cInRhYlwiXSwgLiR7Q0xBU1NfTkFNRV9BQ1RJVkV9W2RhdGEtYnMtdG9nZ2xlPVwicGlsbFwiXSwgLiR7Q0xBU1NfTkFNRV9BQ1RJVkV9W2RhdGEtYnMtdG9nZ2xlPVwibGlzdFwiXWBcblxuLyoqXG4gKiBDbGFzcyBkZWZpbml0aW9uXG4gKi9cblxuY2xhc3MgVGFiIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuICAgIHRoaXMuX3BhcmVudCA9IHRoaXMuX2VsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9UQUJfUEFORUwpXG5cbiAgICBpZiAoIXRoaXMuX3BhcmVudCkge1xuICAgICAgcmV0dXJuXG4gICAgICAvLyBUT0RPOiBzaG91bGQgdGhyb3cgZXhjZXB0aW9uIGluIHY2XG4gICAgICAvLyB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2VsZW1lbnQub3V0ZXJIVE1MfSBoYXMgbm90IGEgdmFsaWQgcGFyZW50ICR7U0VMRUNUT1JfSU5ORVJfRUxFTX1gKVxuICAgIH1cblxuICAgIC8vIFNldCB1cCBpbml0aWFsIGFyaWEgYXR0cmlidXRlc1xuICAgIHRoaXMuX3NldEluaXRpYWxBdHRyaWJ1dGVzKHRoaXMuX3BhcmVudCwgdGhpcy5fZ2V0Q2hpbGRyZW4oKSlcblxuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9LRVlET1dOLCBldmVudCA9PiB0aGlzLl9rZXlkb3duKGV2ZW50KSlcbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgc2hvdygpIHsgLy8gU2hvd3MgdGhpcyBlbGVtIGFuZCBkZWFjdGl2YXRlIHRoZSBhY3RpdmUgc2libGluZyBpZiBleGlzdHNcbiAgICBjb25zdCBpbm5lckVsZW0gPSB0aGlzLl9lbGVtZW50XG4gICAgaWYgKHRoaXMuX2VsZW1Jc0FjdGl2ZShpbm5lckVsZW0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBTZWFyY2ggZm9yIGFjdGl2ZSB0YWIgb24gc2FtZSBwYXJlbnQgdG8gZGVhY3RpdmF0ZSBpdFxuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2dldEFjdGl2ZUVsZW0oKVxuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gYWN0aXZlID9cbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKGFjdGl2ZSwgRVZFTlRfSElERSwgeyByZWxhdGVkVGFyZ2V0OiBpbm5lckVsZW0gfSkgOlxuICAgICAgbnVsbFxuXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIoaW5uZXJFbGVtLCBFVkVOVF9TSE9XLCB7IHJlbGF0ZWRUYXJnZXQ6IGFjdGl2ZSB9KVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkIHx8IChoaWRlRXZlbnQgJiYgaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9kZWFjdGl2YXRlKGFjdGl2ZSwgaW5uZXJFbGVtKVxuICAgIHRoaXMuX2FjdGl2YXRlKGlubmVyRWxlbSwgYWN0aXZlKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuICBfYWN0aXZhdGUoZWxlbWVudCwgcmVsYXRlZEVsZW0pIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSlcblxuICAgIHRoaXMuX2FjdGl2YXRlKFNlbGVjdG9yRW5naW5lLmdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudCkpIC8vIFNlYXJjaCBhbmQgYWN0aXZhdGUvc2hvdyB0aGUgcHJvcGVyIHNlY3Rpb25cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgIT09ICd0YWInKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKVxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCB0cnVlKVxuICAgICAgdGhpcy5fdG9nZ2xlRHJvcERvd24oZWxlbWVudCwgdHJ1ZSlcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKGVsZW1lbnQsIEVWRU5UX1NIT1dOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRFbGVtXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIGVsZW1lbnQsIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSkpXG4gIH1cblxuICBfZGVhY3RpdmF0ZShlbGVtZW50LCByZWxhdGVkRWxlbSkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKVxuICAgIGVsZW1lbnQuYmx1cigpXG5cbiAgICB0aGlzLl9kZWFjdGl2YXRlKFNlbGVjdG9yRW5naW5lLmdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudCkpIC8vIFNlYXJjaCBhbmQgZGVhY3RpdmF0ZSB0aGUgc2hvd24gc2VjdGlvbiB0b29cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgIT09ICd0YWInKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIGZhbHNlKVxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJylcbiAgICAgIHRoaXMuX3RvZ2dsZURyb3BEb3duKGVsZW1lbnQsIGZhbHNlKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIoZWxlbWVudCwgRVZFTlRfSElEREVOLCB7IHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRFbGVtIH0pXG4gICAgfVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgZWxlbWVudCwgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFKSlcbiAgfVxuXG4gIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgaWYgKCEoW0FSUk9XX0xFRlRfS0VZLCBBUlJPV19SSUdIVF9LRVksIEFSUk9XX1VQX0tFWSwgQVJST1dfRE9XTl9LRVksIEhPTUVfS0VZLCBFTkRfS0VZXS5pbmNsdWRlcyhldmVudC5rZXkpKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkvLyBzdG9wUHJvcGFnYXRpb24vcHJldmVudERlZmF1bHQgYm90aCBhZGRlZCB0byBzdXBwb3J0IHVwL2Rvd24ga2V5cyB3aXRob3V0IHNjcm9sbGluZyB0aGUgcGFnZVxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5fZ2V0Q2hpbGRyZW4oKS5maWx0ZXIoZWxlbWVudCA9PiAhaXNEaXNhYmxlZChlbGVtZW50KSlcbiAgICBsZXQgbmV4dEFjdGl2ZUVsZW1lbnRcblxuICAgIGlmIChbSE9NRV9LRVksIEVORF9LRVldLmluY2x1ZGVzKGV2ZW50LmtleSkpIHtcbiAgICAgIG5leHRBY3RpdmVFbGVtZW50ID0gY2hpbGRyZW5bZXZlbnQua2V5ID09PSBIT01FX0tFWSA/IDAgOiBjaGlsZHJlbi5sZW5ndGggLSAxXVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpc05leHQgPSBbQVJST1dfUklHSFRfS0VZLCBBUlJPV19ET1dOX0tFWV0uaW5jbHVkZXMoZXZlbnQua2V5KVxuICAgICAgbmV4dEFjdGl2ZUVsZW1lbnQgPSBnZXROZXh0QWN0aXZlRWxlbWVudChjaGlsZHJlbiwgZXZlbnQudGFyZ2V0LCBpc05leHQsIHRydWUpXG4gICAgfVxuXG4gICAgaWYgKG5leHRBY3RpdmVFbGVtZW50KSB7XG4gICAgICBuZXh0QWN0aXZlRWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSlcbiAgICAgIFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKG5leHRBY3RpdmVFbGVtZW50KS5zaG93KClcbiAgICB9XG4gIH1cblxuICBfZ2V0Q2hpbGRyZW4oKSB7IC8vIGNvbGxlY3Rpb24gb2YgaW5uZXIgZWxlbWVudHNcbiAgICByZXR1cm4gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9JTk5FUl9FTEVNLCB0aGlzLl9wYXJlbnQpXG4gIH1cblxuICBfZ2V0QWN0aXZlRWxlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0Q2hpbGRyZW4oKS5maW5kKGNoaWxkID0+IHRoaXMuX2VsZW1Jc0FjdGl2ZShjaGlsZCkpIHx8IG51bGxcbiAgfVxuXG4gIF9zZXRJbml0aWFsQXR0cmlidXRlcyhwYXJlbnQsIGNoaWxkcmVuKSB7XG4gICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RFeGlzdHMocGFyZW50LCAncm9sZScsICd0YWJsaXN0JylcblxuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMuX3NldEluaXRpYWxBdHRyaWJ1dGVzT25DaGlsZChjaGlsZClcbiAgICB9XG4gIH1cblxuICBfc2V0SW5pdGlhbEF0dHJpYnV0ZXNPbkNoaWxkKGNoaWxkKSB7XG4gICAgY2hpbGQgPSB0aGlzLl9nZXRJbm5lckVsZW1lbnQoY2hpbGQpXG4gICAgY29uc3QgaXNBY3RpdmUgPSB0aGlzLl9lbGVtSXNBY3RpdmUoY2hpbGQpXG4gICAgY29uc3Qgb3V0ZXJFbGVtID0gdGhpcy5fZ2V0T3V0ZXJFbGVtZW50KGNoaWxkKVxuICAgIGNoaWxkLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIGlzQWN0aXZlKVxuXG4gICAgaWYgKG91dGVyRWxlbSAhPT0gY2hpbGQpIHtcbiAgICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmTm90RXhpc3RzKG91dGVyRWxlbSwgJ3JvbGUnLCAncHJlc2VudGF0aW9uJylcbiAgICB9XG5cbiAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJylcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyhjaGlsZCwgJ3JvbGUnLCAndGFiJylcblxuICAgIC8vIHNldCBhdHRyaWJ1dGVzIHRvIHRoZSByZWxhdGVkIHBhbmVsIHRvb1xuICAgIHRoaXMuX3NldEluaXRpYWxBdHRyaWJ1dGVzT25UYXJnZXRQYW5lbChjaGlsZClcbiAgfVxuXG4gIF9zZXRJbml0aWFsQXR0cmlidXRlc09uVGFyZ2V0UGFuZWwoY2hpbGQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBTZWxlY3RvckVuZ2luZS5nZXRFbGVtZW50RnJvbVNlbGVjdG9yKGNoaWxkKVxuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmTm90RXhpc3RzKHRhcmdldCwgJ3JvbGUnLCAndGFicGFuZWwnKVxuXG4gICAgaWYgKGNoaWxkLmlkKSB7XG4gICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyh0YXJnZXQsICdhcmlhLWxhYmVsbGVkYnknLCBgJHtjaGlsZC5pZH1gKVxuICAgIH1cbiAgfVxuXG4gIF90b2dnbGVEcm9wRG93bihlbGVtZW50LCBvcGVuKSB7XG4gICAgY29uc3Qgb3V0ZXJFbGVtID0gdGhpcy5fZ2V0T3V0ZXJFbGVtZW50KGVsZW1lbnQpXG4gICAgaWYgKCFvdXRlckVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX0RST1BET1dOKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlID0gKHNlbGVjdG9yLCBjbGFzc05hbWUpID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKHNlbGVjdG9yLCBvdXRlckVsZW0pXG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lLCBvcGVuKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZShTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUsIENMQVNTX05BTUVfQUNUSVZFKVxuICAgIHRvZ2dsZShTRUxFQ1RPUl9EUk9QRE9XTl9NRU5VLCBDTEFTU19OQU1FX1NIT1cpXG4gICAgb3V0ZXJFbGVtLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIG9wZW4pXG4gIH1cblxuICBfc2V0QXR0cmlidXRlSWZOb3RFeGlzdHMoZWxlbWVudCwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGlmICghZWxlbWVudC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSlcbiAgICB9XG4gIH1cblxuICBfZWxlbUlzQWN0aXZlKGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9BQ1RJVkUpXG4gIH1cblxuICAvLyBUcnkgdG8gZ2V0IHRoZSBpbm5lciBlbGVtZW50ICh1c3VhbGx5IHRoZSAubmF2LWxpbmspXG4gIF9nZXRJbm5lckVsZW1lbnQoZWxlbSkge1xuICAgIHJldHVybiBlbGVtLm1hdGNoZXMoU0VMRUNUT1JfSU5ORVJfRUxFTSkgPyBlbGVtIDogU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9JTk5FUl9FTEVNLCBlbGVtKVxuICB9XG5cbiAgLy8gVHJ5IHRvIGdldCB0aGUgb3V0ZXIgZWxlbWVudCAodXN1YWxseSB0aGUgLm5hdi1pdGVtKVxuICBfZ2V0T3V0ZXJFbGVtZW50KGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbS5jbG9zZXN0KFNFTEVDVE9SX09VVEVSKSB8fCBlbGVtXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBUYWIuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCB8fCBjb25maWcuc3RhcnRzV2l0aCgnXycpIHx8IGNvbmZpZyA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICB9XG5cbiAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAoWydBJywgJ0FSRUEnXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpLnNob3coKVxufSlcblxuLyoqXG4gKiBJbml0aWFsaXplIG9uIGZvY3VzXG4gKi9cbkV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX0xPQURfREFUQV9BUEksICgpID0+IHtcbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEVfQUNUSVZFKSkge1xuICAgIFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQpXG4gIH1cbn0pXG4vKipcbiAqIGpRdWVyeVxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihUYWIpXG5cbmV4cG9ydCBkZWZhdWx0IFRhYlxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwIHRvYXN0LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudC5qcydcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlci5qcydcbmltcG9ydCB7IGVuYWJsZURpc21pc3NUcmlnZ2VyIH0gZnJvbSAnLi91dGlsL2NvbXBvbmVudC1mdW5jdGlvbnMuanMnXG5pbXBvcnQgeyBkZWZpbmVKUXVlcnlQbHVnaW4sIHJlZmxvdyB9IGZyb20gJy4vdXRpbC9pbmRleC5qcydcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBOQU1FID0gJ3RvYXN0J1xuY29uc3QgREFUQV9LRVkgPSAnYnMudG9hc3QnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuXG5jb25zdCBFVkVOVF9NT1VTRU9WRVIgPSBgbW91c2VvdmVyJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfTU9VU0VPVVQgPSBgbW91c2VvdXQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9GT0NVU0lOID0gYGZvY3VzaW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9GT0NVU09VVCA9IGBmb2N1c291dCR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWBcblxuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnXG5jb25zdCBDTEFTU19OQU1FX0hJREUgPSAnaGlkZScgLy8gQGRlcHJlY2F0ZWQgLSBrZXB0IGhlcmUgb25seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XSU5HID0gJ3Nob3dpbmcnXG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgYXV0b2hpZGU6ICdib29sZWFuJyxcbiAgZGVsYXk6ICdudW1iZXInXG59XG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGFuaW1hdGlvbjogdHJ1ZSxcbiAgYXV0b2hpZGU6IHRydWUsXG4gIGRlbGF5OiA1MDAwXG59XG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvblxuICovXG5cbmNsYXNzIFRvYXN0IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQsIGNvbmZpZylcblxuICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsXG4gICAgdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiA9IGZhbHNlXG4gICAgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiA9IGZhbHNlXG4gICAgdGhpcy5fc2V0TGlzdGVuZXJzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcbiAgc2hvdygpIHtcbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XKVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9jbGVhclRpbWVvdXQoKVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0ZBREUpXG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XSU5HKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04pXG5cbiAgICAgIHRoaXMuX21heWJlU2NoZWR1bGVIaWRlKClcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9ISURFKSAvLyBAZGVwcmVjYXRlZFxuICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1csIENMQVNTX05BTUVfU0hPV0lORylcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NvbmZpZy5hbmltYXRpb24pXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5pc1Nob3duKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpXG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfSElERSkgLy8gQGRlcHJlY2F0ZWRcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1dJTkcsIENMQVNTX05BTUVfU0hPVylcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTilcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XSU5HKVxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NvbmZpZy5hbmltYXRpb24pXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuX2NsZWFyVGltZW91dCgpXG5cbiAgICBpZiAodGhpcy5pc1Nob3duKCkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICBpc1Nob3duKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX21heWJlU2NoZWR1bGVIaWRlKCkge1xuICAgIGlmICghdGhpcy5fY29uZmlnLmF1dG9oaWRlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiB8fCB0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKVxuICAgIH0sIHRoaXMuX2NvbmZpZy5kZWxheSlcbiAgfVxuXG4gIF9vbkludGVyYWN0aW9uKGV2ZW50LCBpc0ludGVyYWN0aW5nKSB7XG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICBjYXNlICdtb3VzZW92ZXInOlxuICAgICAgY2FzZSAnbW91c2VvdXQnOiB7XG4gICAgICAgIHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gPSBpc0ludGVyYWN0aW5nXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2ZvY3VzaW4nOlxuICAgICAgY2FzZSAnZm9jdXNvdXQnOiB7XG4gICAgICAgIHRoaXMuX2hhc0tleWJvYXJkSW50ZXJhY3Rpb24gPSBpc0ludGVyYWN0aW5nXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNJbnRlcmFjdGluZykge1xuICAgICAgdGhpcy5fY2xlYXJUaW1lb3V0KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IG5leHRFbGVtZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldFxuICAgIGlmICh0aGlzLl9lbGVtZW50ID09PSBuZXh0RWxlbWVudCB8fCB0aGlzLl9lbGVtZW50LmNvbnRhaW5zKG5leHRFbGVtZW50KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fbWF5YmVTY2hlZHVsZUhpZGUoKVxuICB9XG5cbiAgX3NldExpc3RlbmVycygpIHtcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VPVkVSLCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCB0cnVlKSlcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VPVVQsIGV2ZW50ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24oZXZlbnQsIGZhbHNlKSlcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfRk9DVVNJTiwgZXZlbnQgPT4gdGhpcy5fb25JbnRlcmFjdGlvbihldmVudCwgdHJ1ZSkpXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0ZPQ1VTT1VULCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCBmYWxzZSkpXG4gIH1cblxuICBfY2xlYXJUaW1lb3V0KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KVxuICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsXG4gIH1cblxuICAvLyBTdGF0aWNcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBUb2FzdC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZylcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBEYXRhIEFQSSBpbXBsZW1lbnRhdGlvblxuICovXG5cbmVuYWJsZURpc21pc3NUcmlnZ2VyKFRvYXN0KVxuXG4vKipcbiAqIGpRdWVyeVxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihUb2FzdClcblxuZXhwb3J0IGRlZmF1bHQgVG9hc3RcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCBpbmRleC51bWQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgQWxlcnQgZnJvbSAnLi9zcmMvYWxlcnQuanMnXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vc3JjL2J1dHRvbi5qcydcbmltcG9ydCBDYXJvdXNlbCBmcm9tICcuL3NyYy9jYXJvdXNlbC5qcydcbmltcG9ydCBDb2xsYXBzZSBmcm9tICcuL3NyYy9jb2xsYXBzZS5qcydcbmltcG9ydCBEcm9wZG93biBmcm9tICcuL3NyYy9kcm9wZG93bi5qcydcbmltcG9ydCBNb2RhbCBmcm9tICcuL3NyYy9tb2RhbC5qcydcbmltcG9ydCBPZmZjYW52YXMgZnJvbSAnLi9zcmMvb2ZmY2FudmFzLmpzJ1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi9zcmMvcG9wb3Zlci5qcydcbmltcG9ydCBTY3JvbGxTcHkgZnJvbSAnLi9zcmMvc2Nyb2xsc3B5LmpzJ1xuaW1wb3J0IFRhYiBmcm9tICcuL3NyYy90YWIuanMnXG5pbXBvcnQgVG9hc3QgZnJvbSAnLi9zcmMvdG9hc3QuanMnXG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuL3NyYy90b29sdGlwLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEFsZXJ0LFxuICBCdXR0b24sXG4gIENhcm91c2VsLFxuICBDb2xsYXBzZSxcbiAgRHJvcGRvd24sXG4gIE1vZGFsLFxuICBPZmZjYW52YXMsXG4gIFBvcG92ZXIsXG4gIFNjcm9sbFNweSxcbiAgVGFiLFxuICBUb2FzdCxcbiAgVG9vbHRpcFxufVxuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjcuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMy0wOC0yOFQxMzozN1pcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgdHJhYy0xNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG5cdFx0Ly8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG5cdFx0Ly8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cblx0XHQvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG5cdFx0Ly8gU3VwcG9ydDogUXRXZWIgPD0zLjguNSwgV2ViS2l0IDw9NTM0LjM0LCB3a2h0bWx0b3BkZiB0b29sIDw9MC4xMi41XG5cdFx0Ly8gUGx1cyBmb3Igb2xkIFdlYktpdCwgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIGNvbGxlY3Rpb25zXG5cdFx0Ly8gKGUuZy4sIGB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIikgPT09IFwiZnVuY3Rpb25cImApLiAoZ2gtNDc1Nilcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCIgJiZcblx0XHRcdHR5cGVvZiBvYmouaXRlbSAhPT0gXCJmdW5jdGlvblwiO1xuXHR9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXIgdmVyc2lvbiA9IFwiMy43LjFcIixcblxuXHRyaHRtbFN1ZmZpeCA9IC9IVE1MJC9pLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXG5cdC8vIFJldHJpZXZlIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuXHR0ZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbm9kZSxcblx0XHRcdHJldCA9IFwiXCIsXG5cdFx0XHRpID0gMCxcblx0XHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRcdHJldCArPSBqUXVlcnkudGV4dCggbm9kZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH1cblx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnRFbGVtZW50LnRleHRDb250ZW50O1xuXHRcdH1cblx0XHRpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHRcdH1cblxuXHRcdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0aXNYTUxEb2M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdFx0ZG9jRWxlbSA9IGVsZW0gJiYgKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZVxuXHRcdC8vIGRvY3VtZW50IGZyYWdtZW50cy5cblx0XHRyZXR1cm4gIXJodG1sU3VmZml4LnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHBvcCA9IGFyci5wb3A7XG5cblxudmFyIHNvcnQgPSBhcnIuc29ydDtcblxuXG52YXIgc3BsaWNlID0gYXJyLnNwbGljZTtcblxuXG52YXIgd2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIjtcblxuXG52YXIgcnRyaW1DU1MgPSBuZXcgUmVnRXhwKFxuXHRcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLFxuXHRcImdcIlxuKTtcblxuXG5cblxuLy8gTm90ZTogYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxualF1ZXJ5LmNvbnRhaW5zID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdHZhciBidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblxuXHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHQvLyBJRSBkb2Vzbid0IGhhdmUgYGNvbnRhaW5zYCBvbiBTVkcuXG5cdFx0YS5jb250YWlucyA/XG5cdFx0XHRhLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0KSApO1xufTtcblxuXG5cblxuLy8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cbi8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xudmFyIHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXHg4MC1cXHVGRkZGXFx3LV0vZztcblxuZnVuY3Rpb24gZmNzc2VzY2FwZSggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHR9XG5cblx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdH1cblxuXHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdHJldHVybiBcIlxcXFxcIiArIGNoO1xufVxuXG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuXG5cblxudmFyIHByZWZlcnJlZERvYyA9IGRvY3VtZW50LFxuXHRwdXNoTmF0aXZlID0gcHVzaDtcblxuKCBmdW5jdGlvbigpIHtcblxudmFyIGksXG5cdEV4cHIsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXHRwdXNoID0gcHVzaE5hdGl2ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdGRvY3VtZW50LFxuXHRkb2N1bWVudEVsZW1lbnQsXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdG1hdGNoZXMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0galF1ZXJ5LmV4cGFuZG8sXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8XCIgK1xuXHRcdFwibG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJsZWFkaW5nQ29tYmluYXRvciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0SUQ6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRDTEFTUzogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRUQUc6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRBVFRSOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRQU0VVRE86IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdENISUxEOiBuZXcgUmVnRXhwKFxuXHRcdFx0XCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdGJvb2w6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0bmVlZHNDb250ZXh0OiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0aWYgKCBub25IZXggKSB7XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0cmV0dXJuIG5vbkhleDtcblx0XHR9XG5cblx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdHJldHVybiBoaWdoIDwgMCA/XG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXM7IHNlZSBgc2V0RG9jdW1lbnRgLlxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRS9FZGdlLlxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgbm9kZU5hbWUoIGVsZW0sIFwiZmllbGRzZXRcIiApO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7XG5cdFx0YXBwbHk6IGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9LFxuXHRcdGNhbGw6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApICk7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBmaW5kKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRwdXNoLmNhbGwoIHJlc3VsdHMsIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRmaW5kLmNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRwdXNoLmNhbGwoIHJlc3VsdHMsIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggIW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCBybGVhZGluZ0NvbWJpbmF0b3IudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW5cblx0XHRcdFx0XHQvLyBzdHJpY3QtY29tcGFyaW5nIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IGpRdWVyeS5lc2NhcGVTZWxlY3RvciggbmlkICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXNcblx0XHQvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL2lzc3Vlcy8xNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBqUXVlcnkgc2VsZWN0b3IgbW9kdWxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApIHx8IG5vZGVOYW1lKCBlbGVtLCBcImJ1dHRvblwiICkgKSAmJlxuXHRcdFx0ZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExK1xuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIGpRdWVyeSBzZWxlY3RvciBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW25vZGVdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbmZ1bmN0aW9uIHNldERvY3VtZW50KCBub2RlICkge1xuXHR2YXIgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhalF1ZXJ5LmlzWE1MRG9jKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IGlPUyA3IG9ubHksIElFIDkgLSAxMStcblx0Ly8gT2xkZXIgYnJvd3NlcnMgZGlkbid0IHN1cHBvcnQgdW5wcmVmaXhlZCBgbWF0Y2hlc2AuXG5cdG1hdGNoZXMgPSBkb2N1bWVudEVsZW1lbnQubWF0Y2hlcyB8fFxuXHRcdGRvY3VtZW50RWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2N1bWVudEVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3I7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnNcblx0Ly8gKHNlZSB0cmFjLTEzOTM2KS5cblx0Ly8gTGltaXQgdGhlIGZpeCB0byBJRSAmIEVkZ2UgTGVnYWN5OyBkZXNwaXRlIEVkZ2UgMTUrIGltcGxlbWVudGluZyBgbWF0Y2hlc2AsXG5cdC8vIGFsbCBJRSA5KyBhbmQgRWRnZSBMZWdhY3kgdmVyc2lvbnMgaW1wbGVtZW50IGBtc01hdGNoZXNTZWxlY3RvcmAgYXMgd2VsbC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3IgJiZcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0cHJlZmVycmVkRG9jICE9IGRvY3VtZW50ICYmXG5cdFx0KCBzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyApICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGpRdWVyeS5leHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHxcblx0XHRcdCFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggalF1ZXJ5LmV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUuXG5cdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRyZXR1cm4gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gSUUvRWRnZSBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGVcIiApO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogQ2hyb21lIDEwNSAtIDExMSBvbmx5LCBTYWZhcmkgMTUuNCAtIDE2LjMgb25seVxuXHQvLyBNYWtlIHN1cmUgdGhlIGA6aGFzKClgIGFyZ3VtZW50IGlzIHBhcnNlZCB1bmZvcmdpdmluZ2x5LlxuXHQvLyBXZSBpbmNsdWRlIGAqYCBpbiB0aGUgdGVzdCB0byBkZXRlY3QgYnVnZ3kgaW1wbGVtZW50YXRpb25zIHRoYXQgYXJlXG5cdC8vIF9zZWxlY3RpdmVseV8gZm9yZ2l2aW5nIChzcGVjaWZpY2FsbHkgd2hlbiB0aGUgbGlzdCBpbmNsdWRlcyBhdCBsZWFzdFxuXHQvLyBvbmUgdmFsaWQgc2VsZWN0b3IpLlxuXHQvLyBOb3RlIHRoYXQgd2UgdHJlYXQgY29tcGxldGUgbGFjayBvZiBzdXBwb3J0IGZvciBgOmhhcygpYCBhcyBpZiBpdCB3ZXJlXG5cdC8vIHNwZWMtY29tcGxpYW50IHN1cHBvcnQsIHdoaWNoIGlzIGZpbmUgYmVjYXVzZSB1c2Ugb2YgYDpoYXMoKWAgaW4gc3VjaFxuXHQvLyBlbnZpcm9ubWVudHMgd2lsbCBmYWlsIGluIHRoZSBxU0EgcGF0aCBhbmQgZmFsbCBiYWNrIHRvIGpRdWVyeSB0cmF2ZXJzYWxcblx0Ly8gYW55d2F5LlxuXHRzdXBwb3J0LmNzc0hhcyA9IGFzc2VydCggZnVuY3Rpb24oKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIFwiOmhhcygqLDpqcWZha2UpXCIgKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlci5JRCA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kLklEID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlci5JRCA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmQuSUQgPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZC5UQUcgPSBmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZC5DTEFTUyA9IGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdHZhciBpbnB1dDtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPVxuXHRcdFx0XCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBkaXNhYmxlZD0nZGlzYWJsZWQnPlwiICtcblx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdC8vIFN1cHBvcnQ6IGlPUyA8PTcgLSA4IG9ubHlcblx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5IGluIHNvbWUgWE1MIGRvY3VtZW50c1xuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgPD03IC0gOCBvbmx5XG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgOCBvbmx5XG5cdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLiMuK1srfl1cIiApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTEwNSssIEZpcmVmb3ggPD0xMDQrLCBTYWZhcmkgPD0xNS40K1xuXHRcdC8vIEluIHNvbWUgb2YgdGhlIGRvY3VtZW50IGtpbmRzLCB0aGVzZSBzZWxlY3RvcnMgd291bGRuJ3Qgd29yayBuYXRpdmVseS5cblx0XHQvLyBUaGlzIGlzIHByb2JhYmx5IE9LIGJ1dCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2Ugd2FudCB0byBtYWludGFpblxuXHRcdC8vIGhhbmRsaW5nIHRoZW0gdGhyb3VnaCBqUXVlcnkgdHJhdmVyc2FsIGluIGpRdWVyeSAzLnguXG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmNoZWNrZWRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MTA1KywgRmlyZWZveCA8PTEwNCssIFNhZmFyaSA8PTE1LjQrXG5cdFx0Ly8gSW4gc29tZSBvZiB0aGUgZG9jdW1lbnQga2luZHMsIHRoZXNlIHNlbGVjdG9ycyB3b3VsZG4ndCB3b3JrIG5hdGl2ZWx5LlxuXHRcdC8vIFRoaXMgaXMgcHJvYmFibHkgT0sgYnV0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3ZSB3YW50IHRvIG1haW50YWluXG5cdFx0Ly8gaGFuZGxpbmcgdGhlbSB0aHJvdWdoIGpRdWVyeSB0cmF2ZXJzYWwgaW4galF1ZXJ5IDMueC5cblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0Ly8gYXJvdW5kIHRoZSBpc3N1ZS5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIlwiICk7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqbmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKj1cIiArXG5cdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdH1cblx0fSApO1xuXG5cdGlmICggIXN1cHBvcnQuY3NzSGFzICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDEwNSAtIDExMCssIFNhZmFyaSAxNS40IC0gMTYuMytcblx0XHQvLyBPdXIgcmVndWxhciBgdHJ5LWNhdGNoYCBtZWNoYW5pc20gZmFpbHMgdG8gZGV0ZWN0IG5hdGl2ZWx5LXVuc3VwcG9ydGVkXG5cdFx0Ly8gcHNldWRvLWNsYXNzZXMgaW5zaWRlIGA6aGFzKClgIChzdWNoIGFzIGA6aGFzKDpjb250YWlucyhcIkZvb1wiKSlgKVxuXHRcdC8vIGluIGJyb3dzZXJzIHRoYXQgcGFyc2UgdGhlIGA6aGFzKClgIGFyZ3VtZW50IGFzIGEgZm9yZ2l2aW5nIHNlbGVjdG9yIGxpc3QuXG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy8jcmVsYXRpb25hbCBub3cgcmVxdWlyZXMgdGhlIGFyZ3VtZW50XG5cdFx0Ly8gdG8gYmUgcGFyc2VkIHVuZm9yZ2l2aW5nbHksIGJ1dCBicm93c2VycyBoYXZlIG5vdCB5ZXQgZnVsbHkgYWRqdXN0ZWQuXG5cdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmhhc1wiICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRmaW5kLmNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGZpbmQuY29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBhICkgLSBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59XG5cbmZpbmQubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIGZpbmQoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5maW5kLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRzZXREb2N1bWVudCggZWxlbSApO1xuXG5cdGlmICggZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZpbmQoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5maW5kLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuXG5maW5kLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIHRyYWMtMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRpZiAoIHZhbCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcbn07XG5cbmZpbmQuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0Ly9cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCtcblx0Ly8gVGVzdGluZyBmb3IgZGV0ZWN0aW5nIGR1cGxpY2F0ZXMgaXMgdW5wcmVkaWN0YWJsZSBzbyBpbnN0ZWFkIGFzc3VtZSB3ZSBjYW4ndFxuXHQvLyBkZXBlbmQgb24gZHVwbGljYXRlIGRldGVjdGlvbiBpbiBhbGwgYnJvd3NlcnMgd2l0aG91dCBhIHN0YWJsZSBzb3J0LlxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5zb3J0U3RhYmxlO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHNsaWNlLmNhbGwoIHJlc3VsdHMsIDAgKTtcblx0c29ydC5jYWxsKCByZXN1bHRzLCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHNwbGljZS5jYWxsKCByZXN1bHRzLCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbmpRdWVyeS5mbi51bmlxdWVTb3J0ID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LnVuaXF1ZVNvcnQoIHNsaWNlLmFwcGx5KCB0aGlzICkgKSApO1xufTtcblxuRXhwciA9IGpRdWVyeS5leHByID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdEFUVFI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiIClcblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRDSElMRDogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRmaW5kLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRmaW5kLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0UFNFVURPOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFsgNiBdICYmIG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByLkNISUxELnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRUQUc6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIGV4cGVjdGVkTm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBlbGVtLCBleHBlY3RlZE5vZGVOYW1lICk7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdENMQVNTOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQoIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICtcblx0XHRcdFx0XHRcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkgKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHxcblx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdEFUVFI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBmaW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCI9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCA9PT0gY2hlY2s7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCIhPVwiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQgIT09IGNoZWNrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiXj1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCIqPVwiICkge1xuXHRcdFx0XHRcdHJldHVybiBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiJD1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwifj1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiIClcblx0XHRcdFx0XHRcdC5pbmRleE9mKCBjaGVjayApID4gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCJ8PVwiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0Q0hJTEQ6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBub2RlWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlTmFtZSggbm9kZSwgbmFtZSApIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKCBwYXJlbnRbIGV4cGFuZG8gXSA9IHt9ICk7XG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSBvdXRlckNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGVOYW1lKCBub2RlLCBuYW1lICkgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0UFNFVURPOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0ZmluZC5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIGpRdWVyeSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZi5jYWxsKCBzZWVkLCBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdG5vdDogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0Ly8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9pc3N1ZXMvMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRoYXM6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZmluZCggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRjb250YWluczogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgalF1ZXJ5LnRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRsYW5nOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0ZmluZC5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcInhtbDpsYW5nXCIgKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSggXCJsYW5nXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKCBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHR0YXJnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdHJvb3Q6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50RWxlbWVudDtcblx0XHR9LFxuXG5cdFx0Zm9jdXM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiZcblx0XHRcdFx0ZG9jdW1lbnQuaGFzRm9jdXMoKSAmJlxuXHRcdFx0XHQhISggZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCApO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRlbmFibGVkOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRkaXNhYmxlZDogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdGNoZWNrZWQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmICEhZWxlbS5jaGVja2VkICkgfHxcblx0XHRcdFx0KCBub2RlTmFtZSggZWxlbSwgXCJvcHRpb25cIiApICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRzZWxlY3RlZDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcblx0XHRcdC8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byB0cmVhdCB0aGUgZGVmYXVsdCBvcHRpb24gYXNcblx0XHRcdC8vIHNlbGVjdGVkIHdoZW4gaW4gYW4gb3B0Z3JvdXAuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0ZW1wdHk6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3MuZW1wdHkoIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdGhlYWRlcjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdGlucHV0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0YnV0dG9uOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8XG5cdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImJ1dHRvblwiICk7XG5cdFx0fSxcblxuXHRcdHRleHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8MTAgb25seVxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyXG5cdFx0XHRcdC8vIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdGZpcnN0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRsYXN0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0gKSxcblxuXHRcdGVxOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRldmVuOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0b2RkOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0bHQ6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaTtcblxuXHRcdFx0aWYgKCBhcmd1bWVudCA8IDAgKSB7XG5cdFx0XHRcdGkgPSBhcmd1bWVudCArIGxlbmd0aDtcblx0XHRcdH0gZWxzZSBpZiAoIGFyZ3VtZW50ID4gbGVuZ3RoICkge1xuXHRcdFx0XHRpID0gbGVuZ3RoO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aSA9IGFyZ3VtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0Z3Q6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3MubnRoID0gRXhwci5wc2V1ZG9zLmVxO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbmZ1bmN0aW9uIHRva2VuaXplKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKCBtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWyAwIF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKCB0b2tlbnMgPSBbXSApICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoICggbWF0Y2ggPSBybGVhZGluZ0NvbWJpbmF0b3IuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbIDAgXS5yZXBsYWNlKCBydHJpbUNTUywgXCIgXCIgKVxuXHRcdFx0fSApO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKCBtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkgKSAmJiAoICFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KCBtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSApICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRpZiAoIHBhcnNlT25seSApIHtcblx0XHRyZXR1cm4gc29GYXIubGVuZ3RoO1xuXHR9XG5cblx0cmV0dXJuIHNvRmFyID9cblx0XHRmaW5kLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn1cblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1sgaSBdLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgbm9kZU5hbWUoIGVsZW0sIHNraXAgKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gb3V0ZXJDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAoIG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzWyBpIF0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbIDAgXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRmaW5kKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLCBtYXRjaGVyT3V0LFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8XG5cdFx0XHRcdG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXM7XG5cblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cblx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyXG5cdFx0XHQvLyBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0bWF0Y2hlck91dCA9IHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRyZXN1bHRzO1xuXG5cdFx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXJJbjtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICggZWxlbSA9IHRlbXBbIGkgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbIGkgXSBdID0gISggbWF0Y2hlckluWyBwb3N0TWFwWyBpIF0gXSA9IGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKCBtYXRjaGVySW5bIGkgXSA9IGVsZW0gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAoIG1hdGNoZXJPdXQgPSBbXSApLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSAmJlxuXHRcdFx0XHRcdFx0KCB0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YuY2FsbCggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdCggY2hlY2tDb250ZXh0ID0gY29udGV4dCApLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50XG5cdFx0XHQvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL2lzc3Vlcy8yOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0XHQuY29uY2F0KCB7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSApXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAoIHRva2VucyA9IHRva2Vucy5zbGljZSggaiApICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kLlRBRyggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBpT1MgPD03IC0gOSBvbmx5XG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmdcblx0XHRcdC8vIGVsZW1lbnRzIGJ5IGlkLiAoc2VlIHRyYWMtMTQxNDIpXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cHVzaC5jYWxsKCByZXN1bHRzLCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5mdW5jdGlvbiBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFsgaSBdICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufVxuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggalF1ZXJ5J3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBqUXVlcnkgc2VsZWN0b3IgY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbmZ1bmN0aW9uIHNlbGVjdCggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmQuSUQoXG5cdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRjb250ZXh0XG5cdFx0XHQpIHx8IFtdIClbIDAgXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHIubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmXG5cdFx0XHRcdFx0XHR0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIC0gNC4xK1xuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCAtIDQuMStcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxualF1ZXJ5LmZpbmQgPSBmaW5kO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlID0galF1ZXJ5LnVuaXF1ZVNvcnQ7XG5cbi8vIFRoZXNlIGhhdmUgYWx3YXlzIGJlZW4gcHJpdmF0ZSwgYnV0IHRoZXkgdXNlZCB0byBiZSBkb2N1bWVudGVkIGFzIHBhcnQgb2Zcbi8vIFNpenpsZSBzbyBsZXQncyBtYWludGFpbiB0aGVtIGZvciBub3cgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHB1cnBvc2VzLlxuZmluZC5jb21waWxlID0gY29tcGlsZTtcbmZpbmQuc2VsZWN0ID0gc2VsZWN0O1xuZmluZC5zZXREb2N1bWVudCA9IHNldERvY3VtZW50O1xuZmluZC50b2tlbml6ZSA9IHRva2VuaXplO1xuXG5maW5kLmVzY2FwZSA9IGpRdWVyeS5lc2NhcGVTZWxlY3RvcjtcbmZpbmQuZ2V0VGV4dCA9IGpRdWVyeS50ZXh0O1xuZmluZC5pc1hNTCA9IGpRdWVyeS5pc1hNTERvYztcbmZpbmQuc2VsZWN0b3JzID0galF1ZXJ5LmV4cHI7XG5maW5kLnN1cHBvcnQgPSBqUXVlcnkuc3VwcG9ydDtcbmZpbmQudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWVTb3J0O1xuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxufSApKCk7XG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKHRyYWMtOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKHRyYWMtMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIGpRdWVyeSNmaW5kXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MuZXJyb3IgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgZXJyb3IsIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0RXJyb3JIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5lcnJvciA9IGpRdWVyeS5EZWZlcnJlZC5nZXRFcnJvckhvb2soKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFRoZSBkZXByZWNhdGVkIGFsaWFzIG9mIHRoZSBhYm92ZS4gV2hpbGUgdGhlIG5hbWUgc3VnZ2VzdHNcblx0XHRcdFx0XHRcdFx0XHQvLyByZXR1cm5pbmcgdGhlIHN0YWNrLCBub3QgYW4gZXJyb3IgaW5zdGFuY2UsIGpRdWVyeSBqdXN0IHBhc3Nlc1xuXHRcdFx0XHRcdFx0XHRcdC8vIGl0IGRpcmVjdGx5IHRvIGBjb25zb2xlLndhcm5gIHNvIGJvdGggd2lsbCB3b3JrOyBhbiBpbnN0YW5jZVxuXHRcdFx0XHRcdFx0XHRcdC8vIGp1c3QgYmV0dGVyIGNvb3BlcmF0ZXMgd2l0aCBzb3VyY2UgbWFwcy5cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5lcnJvciA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBwcmltYXJ5IERlZmVycmVkXG5cdFx0XHRwcmltYXJ5ID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdHByaW1hcnkucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIHByaW1hcnkuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgcHJpbWFyeS5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBwcmltYXJ5LnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBwcmltYXJ5LnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIHByaW1hcnkucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByaW1hcnkucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG4vLyBJZiBgalF1ZXJ5LkRlZmVycmVkLmdldEVycm9ySG9va2AgaXMgZGVmaW5lZCwgYGFzeW5jRXJyb3JgIGlzIGFuIGVycm9yXG4vLyBjYXB0dXJlZCBiZWZvcmUgdGhlIGFzeW5jIGJhcnJpZXIgdG8gZ2V0IHRoZSBvcmlnaW5hbCBlcnJvciBjYXVzZVxuLy8gd2hpY2ggbWF5IG90aGVyd2lzZSBiZSBoaWRkZW4uXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgYXN5bmNFcnJvciApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsXG5cdFx0XHRlcnJvci5zdGFjaywgYXN5bmNFcnJvciApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgdHJhYy02NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKHRyYWMtOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlIHRyYWMtODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKHRyYWMtMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKHRyYWMtMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICh0cmFjLTE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICh0cmFjLTEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAodHJhYy0xNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKHRyYWMtMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyIHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICh0cmFjLTEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAodHJhYy02OTExLCB0cmFjLTgxNjUsIHRyYWMtMTEzODIsIHRyYWMtMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAodHJhYy0xMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBpc1NldHVwICkge1xuXG5cdC8vIE1pc3NpbmcgYGlzU2V0dXBgIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhaXNTZXR1cCApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0aWYgKCAhc2F2ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmdcblx0XHRcdFx0Ly8gdGhlIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cdFx0XHRcdFx0c2F2ZWRbIDAgXSxcblx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnQgYnkgYWxsIGpRdWVyeSBoYW5kbGVycyB3aGlsZSBhbGxvd2luZ1xuXHRcdFx0XHQvLyBuYXRpdmUgaGFuZGxlcnMgb24gdGhlIHNhbWUgZWxlbWVudCB0byBydW4uIE9uIHRhcmdldCwgdGhpcyBpcyBhY2hpZXZlZFxuXHRcdFx0XHQvLyBieSBzdG9wcGluZyBpbW1lZGlhdGUgcHJvcGFnYXRpb24ganVzdCBvbiB0aGUgalF1ZXJ5IGV2ZW50LiBIb3dldmVyLFxuXHRcdFx0XHQvLyB0aGUgbmF0aXZlIGV2ZW50IGlzIHJlLXdyYXBwZWQgYnkgYSBqUXVlcnkgb25lIG9uIGVhY2ggbGV2ZWwgb2YgdGhlXG5cdFx0XHRcdC8vIHByb3BhZ2F0aW9uIHNvIHRoZSBvbmx5IHdheSB0byBzdG9wIGl0IGZvciBqUXVlcnkgaXMgdG8gc3RvcCBpdCBmb3Jcblx0XHRcdFx0Ly8gZXZlcnlvbmUgdmlhIG5hdGl2ZSBgc3RvcFByb3BhZ2F0aW9uKClgLiBUaGlzIGlzIG5vdCBhIHByb2JsZW0gZm9yXG5cdFx0XHRcdC8vIGZvY3VzL2JsdXIgd2hpY2ggZG9uJ3QgYnViYmxlLCBidXQgaXQgZG9lcyBhbHNvIHN0b3AgY2xpY2sgb24gY2hlY2tib3hlc1xuXHRcdFx0XHQvLyBhbmQgcmFkaW9zLiBXZSBhY2NlcHQgdGhpcyBsaW1pdGF0aW9uLlxuXHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0ZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKHRyYWMtNTA0LCB0cmFjLTEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cdHdoaWNoOiB0cnVlXG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXG5cdGZ1bmN0aW9uIGZvY3VzTWFwcGVkSGFuZGxlciggbmF0aXZlRXZlbnQgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5kb2N1bWVudE1vZGUgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGZvY3VzaW4vZm9jdXNvdXQgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50c1xuXHRcdFx0Ly8gZm9jdXMvYmx1ci4gVGhpcyBpcyBiZWNhdXNlIHRoZSBmb3JtZXIgYXJlIHN5bmNocm9ub3VzIGluIElFIHdoaWxlIHRoZSBsYXR0ZXJcblx0XHRcdC8vIGFyZSBhc3luYy4gSW4gb3RoZXIgYnJvd3NlcnMsIGFsbCB0aG9zZSBoYW5kbGVycyBhcmUgaW52b2tlZCBzeW5jaHJvbm91c2x5LlxuXG5cdFx0XHQvLyBgaGFuZGxlYCBmcm9tIHByaXZhdGUgZGF0YSB3b3VsZCBhbHJlYWR5IHdyYXAgdGhlIGV2ZW50LCBidXQgd2UgbmVlZFxuXHRcdFx0Ly8gdG8gY2hhbmdlIHRoZSBgdHlwZWAgaGVyZS5cblx0XHRcdHZhciBoYW5kbGUgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiaGFuZGxlXCIgKSxcblx0XHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXHRcdFx0ZXZlbnQudHlwZSA9IG5hdGl2ZUV2ZW50LnR5cGUgPT09IFwiZm9jdXNpblwiID8gXCJmb2N1c1wiIDogXCJibHVyXCI7XG5cdFx0XHRldmVudC5pc1NpbXVsYXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIEZpcnN0LCBoYW5kbGUgZm9jdXNpbi9mb2N1c291dFxuXHRcdFx0aGFuZGxlKCBuYXRpdmVFdmVudCApO1xuXG5cdFx0XHQvLyAuLi50aGVuLCBoYW5kbGUgZm9jdXMvYmx1clxuXHRcdFx0Ly9cblx0XHRcdC8vIGZvY3VzL2JsdXIgZG9uJ3QgYnViYmxlIHdoaWxlIGZvY3VzaW4vZm9jdXNvdXQgZG87IHNpbXVsYXRlIHRoZSBmb3JtZXIgYnkgb25seVxuXHRcdFx0Ly8gaW52b2tpbmcgdGhlIGhhbmRsZXIgYXQgdGhlIGxvd2VyIGxldmVsLlxuXHRcdFx0aWYgKCBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgKSB7XG5cblx0XHRcdFx0Ly8gVGhlIHNldHVwIHBhcnQgY2FsbHMgYGxldmVyYWdlTmF0aXZlYCwgd2hpY2gsIGluIHR1cm4sIGNhbGxzXG5cdFx0XHRcdC8vIGBqUXVlcnkuZXZlbnQuYWRkYCwgc28gZXZlbnQgaGFuZGxlIHdpbGwgYWxyZWFkeSBoYXZlIGJlZW4gc2V0XG5cdFx0XHRcdC8vIGJ5IHRoaXMgcG9pbnQuXG5cdFx0XHRcdGhhbmRsZSggZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3Igbm9uLUlFIGJyb3dzZXJzLCBhdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50XG5cdFx0XHQvLyB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXQuXG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGRlbGVnYXRlVHlwZSwgbmF0aXZlRXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApICk7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIGF0dGFjaGVzO1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIHRydWUgKTtcblxuXHRcdFx0aWYgKCBkb2N1bWVudC5kb2N1bWVudE1vZGUgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHRcdFx0XHQvLyBXZSB1c2UgdGhlIHNhbWUgbmF0aXZlIGhhbmRsZXIgZm9yIGZvY3VzaW4gJiBmb2N1cyAoYW5kIGZvY3Vzb3V0ICYgYmx1cilcblx0XHRcdFx0Ly8gc28gd2UgbmVlZCB0byBjb29yZGluYXRlIHNldHVwICYgdGVhcmRvd24gcGFydHMgYmV0d2VlbiB0aG9zZSBldmVudHMuXG5cdFx0XHRcdC8vIFVzZSBgZGVsZWdhdGVUeXBlYCBhcyB0aGUga2V5IGFzIGB0eXBlYCBpcyBhbHJlYWR5IHVzZWQgYnkgYGxldmVyYWdlTmF0aXZlYC5cblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIGRlbGVnYXRlVHlwZSApO1xuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHR0aGlzLmFkZEV2ZW50TGlzdGVuZXIoIGRlbGVnYXRlVHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgYXR0YWNoZXM7XG5cblx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmdldCggdGhpcywgZGVsZWdhdGVUeXBlICkgLSAxO1xuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHR0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoIGRlbGVnYXRlVHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCB0aGlzLCBkZWxlZ2F0ZVR5cGUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIGRlbGVnYXRlVHlwZSwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gaW5kaWNhdGUgc3RhbmRhcmQgdGVhcmRvd24gc2hvdWxkIGJlIGFwcGxpZWRcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBTdXBwcmVzcyBuYXRpdmUgZm9jdXMgb3IgYmx1ciBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlXG5cdFx0Ly8gYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGV2ZW50LnRhcmdldCwgdHlwZSApO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuXHQvLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG5cdC8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG5cdC8vXG5cdC8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuXHQvLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcblx0Ly8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG5cdC8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5cdC8vXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0Ly8gVG8gcHJlc2VydmUgcmVsYXRpdmUgZm9jdXNpbi9mb2N1cyAmIGZvY3Vzb3V0L2JsdXIgZXZlbnQgb3JkZXIgZ3VhcmFudGVlZCBvbiB0aGUgMy54IGJyYW5jaCxcblx0Ly8gYXR0YWNoIGEgc2luZ2xlIGhhbmRsZXIgZm9yIGJvdGggZXZlbnRzIGluIElFLlxuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZGVsZWdhdGVUeXBlIF0gPSB7XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdGRhdGFIb2xkZXIgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUgPyB0aGlzIDogZG9jLFxuXHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmdldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHRcdC8vIFdlIHVzZSB0aGUgc2FtZSBuYXRpdmUgaGFuZGxlciBmb3IgZm9jdXNpbiAmIGZvY3VzIChhbmQgZm9jdXNvdXQgJiBibHVyKVxuXHRcdFx0Ly8gc28gd2UgbmVlZCB0byBjb29yZGluYXRlIHNldHVwICYgdGVhcmRvd24gcGFydHMgYmV0d2VlbiB0aG9zZSBldmVudHMuXG5cdFx0XHQvLyBVc2UgYGRlbGVnYXRlVHlwZWAgYXMgdGhlIGtleSBhcyBgdHlwZWAgaXMgYWxyZWFkeSB1c2VkIGJ5IGBsZXZlcmFnZU5hdGl2ZWAuXG5cdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0aWYgKCBkb2N1bWVudC5kb2N1bWVudE1vZGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBmb2N1c01hcHBlZEhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZGF0YVByaXYuc2V0KCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdH0sXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdGRhdGFIb2xkZXIgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUgPyB0aGlzIDogZG9jLFxuXHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmdldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlICkgLSAxO1xuXG5cdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0aWYgKCBkb2N1bWVudC5kb2N1bWVudE1vZGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBmb2N1c01hcHBlZEhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUsIGF0dGFjaGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8IVxcW0NEQVRBXFxbfFxcXVxcXT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuZ2V0KCBzcmMgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGVzdCwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGZsYXQoIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAodHJhYy04MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZS1lbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVW53cmFwIGEgQ0RBVEEgc2VjdGlvbiBjb250YWluaW5nIHNjcmlwdCBjb250ZW50cy4gVGhpcyBzaG91bGRuJ3QgYmVcblx0XHRcdFx0XHRcdFx0Ly8gbmVlZGVkIGFzIGluIFhNTCBkb2N1bWVudHMgdGhleSdyZSBhbHJlYWR5IG5vdCB2aXNpYmxlIHdoZW5cblx0XHRcdFx0XHRcdFx0Ly8gaW5zcGVjdGluZyBlbGVtZW50IGNvbnRlbnRzIGFuZCBpbiBIVE1MIGRvY3VtZW50cyB0aGV5IGhhdmUgbm9cblx0XHRcdFx0XHRcdFx0Ly8gbWVhbmluZyBidXQgd2UncmUgcHJlc2VydmluZyB0aGF0IGxvZ2ljIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIGJlIHJlbW92ZWQgY29tcGxldGVseSBpbiA0LjAuIFNlZSBnaC00OTA0LlxuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IGpRdWVyeSNmaW5kIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6XG5cdFx0XHQvLyBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciByY3VzdG9tUHJvcCA9IC9eLS0vO1xuXG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICh0cmFjLTE1MDk4LCB0cmFjLTE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAodHJhYy04OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA3MCtcblx0XHQvLyBPbmx5IEZpcmVmb3ggaW5jbHVkZXMgYm9yZGVyIHdpZHRoc1xuXHRcdC8vIGluIGNvbXB1dGVkIGRpbWVuc2lvbnMuIChnaC00NTI5KVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDtib3JkZXItY29sbGFwc2U6c2VwYXJhdGVcIjtcblx0XHRcdFx0dHIuc3R5bGUuY3NzVGV4dCA9IFwiYm94LXNpemluZzpjb250ZW50LWJveDtib3JkZXI6MXB4IHNvbGlkXCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBIZWlnaHQgc2V0IHRocm91Z2ggY3NzVGV4dCBkb2VzIG5vdCBnZXQgYXBwbGllZC5cblx0XHRcdFx0Ly8gQ29tcHV0ZWQgaGVpZ2h0IHRoZW4gY29tZXMgYmFjayBhcyAwLlxuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA4IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSW4gb3VyIGJvZHlCYWNrZ3JvdW5kLmh0bWwgaWZyYW1lLFxuXHRcdFx0XHQvLyBkaXNwbGF5IGZvciBhbGwgZGl2IGVsZW1lbnRzIGlzIHNldCB0byBcImlubGluZVwiLFxuXHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgYSBwcm9ibGVtIG9ubHkgaW4gQW5kcm9pZCA4IENocm9tZSA4Ni5cblx0XHRcdFx0Ly8gRW5zdXJpbmcgdGhlIGRpdiBpcyBgZGlzcGxheTogYmxvY2tgXG5cdFx0XHRcdC8vIGdldHMgYXJvdW5kIHRoaXMgaXNzdWUuXG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gKCBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlclRvcFdpZHRoLCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCwgMTAgKSApID09PSB0ci5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgdHJhYy0xMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoZ2gtMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdC8vIElFIG9ubHkgc3VwcG9ydHMgYFwiZmxvYXRcImAgaW4gYGdldFByb3BlcnR5VmFsdWVgOyBpbiBjb21wdXRlZCBzdHlsZXNcblx0XHQvLyBpdCdzIG9ubHkgYXZhaWxhYmxlIGFzIGBcImNzc0Zsb2F0XCJgLiBXZSBubyBsb25nZXIgbW9kaWZ5IHByb3BlcnRpZXNcblx0XHQvLyBzZW50IHRvIGAuY3NzKClgIGFwYXJ0IGZyb20gY2FtZWxDYXNpbmcsIHNvIHdlIG5lZWQgdG8gY2hlY2sgYm90aC5cblx0XHQvLyBOb3JtYWxseSwgdGhpcyB3b3VsZCBjcmVhdGUgZGlmZmVyZW5jZSBpbiBiZWhhdmlvcjogaWZcblx0XHQvLyBgZ2V0UHJvcGVydHlWYWx1ZWAgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcsIHRoZSB2YWx1ZSByZXR1cm5lZFxuXHRcdC8vIGJ5IGAuY3NzKClgIHdvdWxkIGJlIGB1bmRlZmluZWRgLiBUaGlzIGlzIHVzdWFsbHkgdGhlIGNhc2UgZm9yXG5cdFx0Ly8gZGlzY29ubmVjdGVkIGVsZW1lbnRzLiBIb3dldmVyLCBpbiBJRSBldmVuIGRpc2Nvbm5lY3RlZCBlbGVtZW50c1xuXHRcdC8vIHdpdGggbm8gc3R5bGVzIHJldHVybiBgXCJub25lXCJgIGZvciBgZ2V0UHJvcGVydHlWYWx1ZSggXCJmbG9hdFwiIClgXG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIGlzQ3VzdG9tUHJvcCAmJiByZXQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMTA1KywgQ2hyb21lIDw9MTA1K1xuXHRcdFx0Ly8gU3BlYyByZXF1aXJlcyB0cmltbWluZyB3aGl0ZXNwYWNlIGZvciBjdXN0b20gcHJvcGVydGllcyAoZ2gtNDkyNikuXG5cdFx0XHQvLyBGaXJlZm94IG9ubHkgdHJpbXMgbGVhZGluZyB3aGl0ZXNwYWNlLiBDaHJvbWUganVzdCBjb2xsYXBzZXNcblx0XHRcdC8vIGJvdGggbGVhZGluZyAmIHRyYWlsaW5nIHdoaXRlc3BhY2UgdG8gYSBzaW5nbGUgc3BhY2UuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gRmFsbCBiYWNrIHRvIGB1bmRlZmluZWRgIGlmIGVtcHR5IHN0cmluZyByZXR1cm5lZC5cblx0XHRcdC8vIFRoaXMgY29sbGFwc2VzIGEgbWlzc2luZyBkZWZpbml0aW9uIHdpdGggcHJvcGVydHkgZGVmaW5lZFxuXHRcdFx0Ly8gYW5kIHNldCB0byBhbiBlbXB0eSBzdHJpbmcgYnV0IHRoZXJlJ3Mgbm8gc3RhbmRhcmQgQVBJXG5cdFx0XHQvLyBhbGxvd2luZyB1cyB0byBkaWZmZXJlbnRpYXRlIHRoZW0gd2l0aG91dCBhIHBlcmZvcm1hbmNlIHBlbmFsdHlcblx0XHRcdC8vIGFuZCByZXR1cm5pbmcgYHVuZGVmaW5lZGAgYWxpZ25zIHdpdGggb2xkZXIgalF1ZXJ5LlxuXHRcdFx0Ly9cblx0XHRcdC8vIHJ0cmltQ1NTIHRyZWF0cyBVKzAwMEQgQ0FSUklBR0UgUkVUVVJOIGFuZCBVKzAwMEMgRk9STSBGRUVEXG5cdFx0XHQvLyBhcyB3aGl0ZXNwYWNlIHdoaWxlIENTUyBkb2VzIG5vdCwgYnV0IHRoaXMgaXMgbm90IGEgcHJvYmxlbVxuXHRcdFx0Ly8gYmVjYXVzZSBDU1MgcHJlcHJvY2Vzc2luZyByZXBsYWNlcyB0aGVtIHdpdGggVSswMDBBIExJTkUgRkVFRFxuXHRcdFx0Ly8gKHdoaWNoICppcyogQ1NTIHdoaXRlc3BhY2UpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpbnB1dC1wcmVwcm9jZXNzaW5nXG5cdFx0XHRyZXQgPSByZXQucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApIHx8IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDAsXG5cdFx0bWFyZ2luRGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdC8vIENvdW50IG1hcmdpbiBkZWx0YSBzZXBhcmF0ZWx5IHRvIG9ubHkgYWRkIGl0IGFmdGVyIHNjcm9sbCBndXR0ZXIgYWRqdXN0bWVudC5cblx0XHQvLyBUaGlzIGlzIG5lZWRlZCB0byBtYWtlIG5lZ2F0aXZlIG1hcmdpbnMgd29yayB3aXRoIGBvdXRlckhlaWdodCggdHJ1ZSApYCAoZ2gtMzk4MikuXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRtYXJnaW5EZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGEgKyBtYXJnaW5EZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXG5cdFx0YXNwZWN0UmF0aW86IHRydWUsXG5cdFx0Ym9yZGVySW1hZ2VTbGljZTogdHJ1ZSxcblx0XHRjb2x1bW5Db3VudDogdHJ1ZSxcblx0XHRmbGV4R3JvdzogdHJ1ZSxcblx0XHRmbGV4U2hyaW5rOiB0cnVlLFxuXHRcdGZvbnRXZWlnaHQ6IHRydWUsXG5cdFx0Z3JpZEFyZWE6IHRydWUsXG5cdFx0Z3JpZENvbHVtbjogdHJ1ZSxcblx0XHRncmlkQ29sdW1uRW5kOiB0cnVlLFxuXHRcdGdyaWRDb2x1bW5TdGFydDogdHJ1ZSxcblx0XHRncmlkUm93OiB0cnVlLFxuXHRcdGdyaWRSb3dFbmQ6IHRydWUsXG5cdFx0Z3JpZFJvd1N0YXJ0OiB0cnVlLFxuXHRcdGxpbmVIZWlnaHQ6IHRydWUsXG5cdFx0b3BhY2l0eTogdHJ1ZSxcblx0XHRvcmRlcjogdHJ1ZSxcblx0XHRvcnBoYW5zOiB0cnVlLFxuXHRcdHNjYWxlOiB0cnVlLFxuXHRcdHdpZG93czogdHJ1ZSxcblx0XHR6SW5kZXg6IHRydWUsXG5cdFx0em9vbTogdHJ1ZSxcblxuXHRcdC8vIFNWRy1yZWxhdGVkXG5cdFx0ZmlsbE9wYWNpdHk6IHRydWUsXG5cdFx0Zmxvb2RPcGFjaXR5OiB0cnVlLFxuXHRcdHN0b3BPcGFjaXR5OiB0cnVlLFxuXHRcdHN0cm9rZU1pdGVybGltaXQ6IHRydWUsXG5cdFx0c3Ryb2tlT3BhY2l0eTogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAodHJhYy03MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgdHJhYy05MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKHRyYWMtNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICh0cmFjLTEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsICh0cmFjLTEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY3VyLCBjdXJWYWx1ZSwgY2xhc3NOYW1lLCBpLCBmaW5hbFZhbHVlO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzTmFtZXMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0Y3VyID0gdGhpcy5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY3VyLCBjdXJWYWx1ZSwgY2xhc3NOYW1lLCBpLCBmaW5hbFZhbHVlO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc05hbWVzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCB0aGlzICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gdGhpcy5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY2xhc3NOYW1lLCBpLCBzZWxmLFxuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAodHJhYy0xNDY4NiwgdHJhYy0xNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKHRyYWMtMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCBwYXJzZXJFcnJvckVsZW07XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHt9XG5cblx0cGFyc2VyRXJyb3JFbGVtID0geG1sICYmIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiIClbIDAgXTtcblx0aWYgKCAheG1sIHx8IHBhcnNlckVycm9yRWxlbSApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgKFxuXHRcdFx0cGFyc2VyRXJyb3JFbGVtID9cblx0XHRcdFx0alF1ZXJ5Lm1hcCggcGFyc2VyRXJyb3JFbGVtLmNoaWxkTm9kZXMsIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWwudGV4dENvbnRlbnQ7XG5cdFx0XHRcdH0gKS5qb2luKCBcIlxcblwiICkgOlxuXHRcdFx0XHRkYXRhXG5cdFx0KSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICh0cmFjLTk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICh0cmFjLTk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKHRyYWMtNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKS5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gdHJhYy03NjUzLCB0cmFjLTgxMjUsIHRyYWMtODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAodHJhYy0xMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyB0cmFjLTk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICh0cmFjLTEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0IHRyYWMtMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICh0cmFjLTE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gdHJhYy05NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdCBidXQgbm90IGlmIGpzb25wXG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJqc29uXCIsIHMuZGF0YVR5cGVzICkgPCAwICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICh0cmFjLTExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyB0cmFjLTE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSB0cmFjLTg2MDUsIHRyYWMtMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vIHRyYWMtMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCgge1xuXHRcdHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsXG5cdFx0Y29udGVudDogdHlwZSxcblx0XHRcIlwiOiBcIm91dGVyXCIgKyBuYW1lXG5cdH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXNcblx0XHRcdC5vbiggXCJtb3VzZWVudGVyXCIsIGZuT3ZlciApXG5cdFx0XHQub24oIFwibW91c2VsZWF2ZVwiLCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcbi8vIFJlcXVpcmUgdGhhdCB0aGUgXCJ3aGl0ZXNwYWNlIHJ1blwiIHN0YXJ0cyBmcm9tIGEgbm9uLXdoaXRlc3BhY2Vcbi8vIHRvIGF2b2lkIE8oTl4yKSBiZWhhdmlvciB3aGVuIHRoZSBlbmdpbmUgd291bGQgdHJ5IG1hdGNoaW5nIFwiXFxzKyRcIiBhdCBlYWNoIHNwYWNlIHBvc2l0aW9uLlxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8KFteXFxzXFx1RkVGRlxceEEwXSlbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICh0cmFjLTcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICh0cmFjLTEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiJdfQ==
