/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

function initializeHttpRequestEventSecretManager(element) {
  if (!element) {
    return;
  }
  var vueMultiselect = Vue.component('vue-multiselect', window.VueMultiselect["default"]);
  var v = new Vue({
    el: element,
    components: {
      'vue-multiselect': vueMultiselect
    },
    data: function data() {
      var secretData = JSON.parse(element.dataset.secretData);
      var workflowTypeId = $('[data-workflow-type-unique-id]').data('workflow-type-unique-id');
      var activityId = $('[data-activity-id]').data('activity-id');
      var antiforgeryHeaderName = $('[data-antiforgery-header-name]').data('antiforgery-header-name');
      var antiforgeryToken = $('[data-antiforgery-token]').data('antiforgery-token');
      var headers = {};
      headers[antiforgeryHeaderName] = antiforgeryToken;
      return {
        secrets: secretData.secrets,
        selected: secretData.selected,
        workflowTypeId: workflowTypeId,
        activityId: activityId,
        linkUrl: secretData.linkUrl,
        createUrl: secretData.createUrl,
        headers: headers,
        linkSecretErrorMessage: secretData.linkSecretErrorMessage,
        createSecretErrorMessage: secretData.createSecretErrorMessage
      };
    },
    computed: {
      isLinked: function isLinked() {
        return this.selected.name === 'None' || this.selected.activityId === this.activityId && this.selected.workflowTypeId === this.workflowTypeId;
      },
      hasSecret: function hasSecret() {
        return this.selected.name !== 'None';
      }
    },
    methods: {
      create: function create(secretName) {
        var self = this;
        $.ajax({
          url: self.createUrl,
          method: 'POST',
          headers: self.headers,
          data: {
            secretName: secretName,
            workflowTypeId: self.workflowTypeId,
            activityId: self.activityId,
            tokenLifeSpan: $('#token-lifespan').val()
          },
          success: function success(data) {
            self.secrets.push(data);
            self.selected = data;
          },
          error: function error() {
            alert(self.linkSecretErrorMessage);
          }
        });
      },
      linkSecret: function linkSecret() {
        var self = this;
        $.ajax({
          url: self.linkUrl,
          method: 'POST',
          headers: self.headers,
          data: {
            secretName: self.selected.name,
            workflowTypeId: self.workflowTypeId,
            activityId: self.activityId,
            tokenLifeSpan: $('#token-lifespan').val()
          },
          success: function success(data) {
            self.selected.workflowTypeId = data.workflowTypeId;
            self.selected.activityId = data.activityId;
          },
          error: function error() {
            alert(self.linkSecretErrorMessage);
          }
        });
      }
    }
  });
}
///<reference path="../../../Assets/Lib/jquery/typings.d.ts" />
$(function () {
  var generateWorkflowUrl = function generateWorkflowUrl() {
    var workflowTypeId = $('[data-workflow-type-id]').data('workflow-type-id');
    var activityId = $('[data-activity-id]').data('activity-id');
    var tokenLifeSpan = $('#token-lifespan').val();
    var generateUrl = $('[data-generate-url]').data('generate-url') + "?workflowTypeId=".concat(workflowTypeId, "&activityId=").concat(activityId, "&tokenLifeSpan=").concat(tokenLifeSpan);
    var antiforgeryHeaderName = $('[data-antiforgery-header-name]').data('antiforgery-header-name');
    var antiforgeryToken = $('[data-antiforgery-token]').data('antiforgery-token');
    var headers = {};
    headers[antiforgeryHeaderName] = antiforgeryToken;
    $.post({
      url: generateUrl,
      headers: headers
    }).done(function (url) {
      $('#workflow-url-text').val(url);
    });
  };
  $('#generate-url-button').on('click', function (e) {
    generateWorkflowUrl();
  });
  if ($('#workflow-url-text').val() == '') {
    generateWorkflowUrl();
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
