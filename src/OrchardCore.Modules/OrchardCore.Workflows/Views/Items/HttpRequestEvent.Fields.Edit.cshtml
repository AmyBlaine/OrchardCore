@using Microsoft.AspNetCore.Antiforgery
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using OrchardCore.Mvc.Core.Utilities
@using OrchardCore.Secrets
@using OrchardCore.Workflows.Http.Models
@using OrchardCore.Workflows.Http.ViewModels

@model HttpRequestEventViewModel
@inject IAntiforgery Antiforgery
@inject ISecretService SecretService

@{
    var secretBindings = await SecretService.GetSecretBindingsAsync();
    var bindings = secretBindings.Where(kvp => String.Equals(nameof(HttpRequestEventSecret), kvp.Value.Type, StringComparison.OrdinalIgnoreCase));

    var defaultSecret = new HttpRequestEventSecret { Name = "None", WorkflowTypeId = String.Empty };
    var secrets = new List<HttpRequestEventSecret>() { defaultSecret };
    foreach (var binding in bindings)
    {
        secrets.Add(await SecretService.GetSecretAsync<HttpRequestEventSecret>(binding.Key));
    }

    HttpRequestEventSecret selectedSecret = null;
    if (!String.IsNullOrEmpty(Model.UrlSecret))
    {
        var existing = secrets.FirstOrDefault(secret => String.Equals(secret.Name, Model.UrlSecret, StringComparison.OrdinalIgnoreCase));
        if (existing is not null)
        {
            selectedSecret = existing;
        }
    }

    var data = new
    {
        secrets = secrets,
        selected = selectedSecret ??= defaultSecret,
        linkUrl = Url.Action("LinkSecret", "HttpWorkflow"),
        createUrl = Url.Action("CreateSecret", "Httpworkflow"),
        linkError = T["Error linking secret"],
        createError = T["Error creating secret"],
    };

    var jData = JsonConvert.SerializeObject(data, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
}

<div class="mb-3" asp-validation-class-for="HttpMethod">
    <label asp-for="HttpMethod">@T["HTTP Method"]</label>
    <select asp-for="HttpMethod" class="form-select" asp-items="HttpRequestEventViewModel.GetAvailableHttpMethods()"></select>
    <span asp-validation-for="HttpMethod"></span>
    <span class="hint">@T["The HTTP method to match."]</span>
</div>

<div id="@Html.IdFor(m => m.UrlSecret)" class="mb-3" data-secret-data="@jData" v-cloak>
    <label asp-for="UrlSecret">@T["URL Secret"]</label>
    <input name="@Html.NameFor(m => m.UrlSecret)" type="hidden" v-bind:value="selected.name" />

    <vue-multiselect v-model="selected" class="mb-1"
                     placeholder="@T["Type to search"]"
                     select-label="@T["Select"]"
                     deselect-label="@T["Remove"]"
                     :options="secrets"
                     :multiple="false"
                     :show-labels="false"
                     :close-on-select="true"
                     :allow-empty="false"
                     track-by="name"
                     label="name"
                     :taggable="true"
                     tag-position="bottom"
                     tag-placeholder="@T["Press enter to create a new secret"]"
                     @@tag="create">
    </vue-multiselect>

    <span v-show="hasSecret" class="hint">@T["The secret of the URL whose token will be dynamically generated."]</span>
    <span v-show="!isLinked" class="hint"><i class="fa fa-exclamation-triangle"></i> @T["This secret is not linked to this workflow activity."]</span>
    <button v-show="!isLinked" type="button" class="ml-3 btn btn-primary btn-sm" v-on:click="linkSecret()">@T["Link"]</button>

    <div v-show="!hasSecret">
        @{
            var antiforgeryTokenSet = Antiforgery.GetTokens(Context);
        }
        <div class="input-group">
            <span class="input-group-text" id="basic-addon3">@Url.GetBaseUrl()</span>
            <input asp-for="Url" type="text" id="workflow-url-text" class="form-control" readonly />
            <button class="btn btn-primary" type="button" id="generate-url-button" title="@T["Generate a new URL"]" data-generate-url="@Url.Action("GenerateUrl", "HttpWorkflow")" data-antiforgery-token="@antiforgeryTokenSet.RequestToken" data-antiforgery-header-name="@antiforgeryTokenSet.HeaderName">@T["Regenerate"]</button>
            <span class="btn btn-secondary" onclick="select_all_and_copy(document.getElementById('workflow-url-text'))"><i class="fa-solid fa-copy" aria-hidden="true"></i> @T["Copy"]</span>
        </div>
        <span class="hint">@T["The plain text URL."]</span>
        <span class="hint"><i class="fa-solid fa-exclamation-triangle" aria-hidden="true"></i> @T["Anyone that invokes this URL will trigger this workflow. Keep it in a safe place."]</span>
    </div>
</div>

<div class="mb-3">
    <input type="checkbox" asp-for="ValidateAntiforgeryToken" />
    <label asp-for="ValidateAntiforgeryToken">@T["Validate Antiforgery Token"]</label>
    <span class="hint dashed">@T["Uncheck this option if the request comes from a service that invokes this URL as a webhook. If this URL is requested from a form, then keep this option checked to ensure the form values have not been tampered with."]</span>
</div>

<div class="mb-3">
    <label asp-for="TokenLifeSpan">@T["Token Life Span"]</label>
    <input type="number" asp-for="TokenLifeSpan" id="token-lifespan" class="form-control" />
    <span class="hint"><i class="fa-solid fa-exclamation-triangle" aria-hidden="true"></i> @T["Hit the <b>Regenerate</b> button after changing this value."]</span>
    <span class="hint">@T["Number of days to expire the token. 0 for the token to never expire"]</span>
</div>

<script depends-on="jQuery,vuejs,vue-multiselect" asp-src="~/OrchardCore.Workflows/Scripts/orchard.http-request-event-editor.min.js" debug-src="~/OrchardCore.Workflows/Scripts/orchard.http-request-event-editor.js" at="Foot"></script>
<script asp-src="~/OrchardCore.Workflows/Scripts/crossbrowserclipboardcopy.min.js" debug-src="~/OrchardCore.Workflows/Scripts/crossbrowserclipboardcopy.js" at="Foot"></script>
<style asp-name="http-request-event-editor" depends-on="vue-multiselect" asp-src="~/OrchardCore.Workflows/Styles/orchard.http-request-event-editor.min.css" debug-src="~/OrchardCore.Workflows/Styles/orchard.http-request-event-editor.css"></style>

<script at="Foot">
    initializeHttpRequestEventSecretManager(document.getElementById('@Html.IdFor(m => m.UrlSecret)'));
</script>
