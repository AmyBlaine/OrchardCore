@using Microsoft.Extensions.DependencyInjection
@using OrchardCore
@using OrchardCore.Forms.ViewModels
@using OrchardCore.Workflows.Http.Services
@model FormPartEditViewModel

@{
    @* The Forms module does not require the Workflows module so this service may not be available. *@
    var httpRequestEventSecretService = Context.RequestServices.GetService<IHttpRequestEventSecretService>();
}

@if (httpRequestEventSecretService is not null)
{
    <div class="@Orchard.GetWrapperCssClasses()">
        <div class="@Orchard.GetEndCssClasses()">
            <div class="mb-3" asp-validation-class-for="ActionSecret">
                <label asp-for="ActionSecret">@T["Action Secret"]</label>
                @await Component.InvokeAsync(
            "SelectSecret",
            new
            {
            secretType = "HttpRequestEventSecret",
            selectedSecret = Model.ActionSecret,
            htmlId = Html.IdFor(m => m.ActionSecret),
            htmlName = Html.NameFor(m => m.ActionSecret),
            required  = false,
            })
                <span asp-validation-for="ActionSecret"></span>
                <span class="hint">@T["The action secret if the form needs to be submitted to a secure http request event workflow activity."]</span>
            </div>
        </div>
    </div>
}

<div class="@Orchard.GetWrapperCssClasses() plain-text">
    @if (httpRequestEventSecretService is null)
    {
        <label asp-for="Action" class="@Orchard.GetLabelCssClasses()">@T["Action"]</label>
    }
    <div class="@Orchard.GetEndCssClasses()">
        <input type="text" asp-for="Action" class="form-control content-preview-text" />
        <span class="hint">@T["The plain text URL to submit the form to."]</span>
    </div>
</div>

<div class="@Orchard.GetWrapperCssClasses()">
    <label asp-for="Method" class="@Orchard.GetLabelCssClasses()">@T["Method"]</label>
    <div class="@Orchard.GetEndCssClasses()">
        <select asp-for="Method" class="form-select content-preview-select">
            <option value="POST">POST</option>
            <option value="GET">GET</option>
        </select>
        <span class="hint">@T["The HTTP method to use when submitting the form."]</span>
    </div>
</div>

<div class="@Orchard.GetWrapperCssClasses()">
    <label asp-for="EncType" class="@Orchard.GetLabelCssClasses()">@T["EncType"]</label>
    <div class="@Orchard.GetEndCssClasses()">
        <select asp-for="EncType" class="form-select content-preview-select">
            <option value="application/x-www-form-urlencoded">application/x-www-form-urlencoded	</option>
            <option value="multipart/form-data">multipart/form-data</option>
            <option value="text/plain">text/plain</option>
        </select>
        <span class="hint">@T["The enctype to use when submitting the form using POST method."]</span>
    </div>
</div>

<div class="@Orchard.GetWrapperCssClasses()">
    <div class="@Orchard.GetEndCssClasses(true)">
        <div class="form-check">
            <input asp-for="EnableAntiForgeryToken" class="form-check-input" />
            <label asp-for="EnableAntiForgeryToken" class="form-check-label">@T["Anti Forgery Token"]</label>
            <span class="hint">@T["Check to generate an Anti Forgery Token in the form."]</span>
        </div>
    </div>
</div>

<script at="Foot">
    $(function () {
        $('#@Html.IdFor(m => m.ActionSecret)').on('change', function () {
            if (this.value === '') {
                $('#@Html.IdFor(m => m.Action)').closest('.plain-text').show();
                $('#@Html.IdFor(m => m.ActionSecret)').siblings('.hint').hide();
            } else {
                $('#@Html.IdFor(m => m.Action)').closest('.plain-text').hide();
                $('#@Html.IdFor(m => m.ActionSecret)').siblings('.hint').show();
            }
        }).trigger('change');
    });
</script>
