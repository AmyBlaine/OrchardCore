@using System.Security.Cryptography.X509Certificates

@model X509SecretViewModel

<div class="mb-3" asp-validation-class-for="StoreLocation">
    <label asp-for="StoreLocation" class="form-label">@T["Certificate Store Location"]</label>
    <select asp-for="StoreLocation" class="form-select">
        <option value="">@T["None"]</option>

        @foreach (StoreLocation location in Enum.GetValues(typeof(StoreLocation)))
        {
            <option value="@location" selected="@(Model.StoreLocation == location)">@location.ToString()</option>
        }
    </select>
    <span asp-validation-for="StoreLocation"></span>
    <span class="hint">@T["Select the certificate location."]</span>
</div>

<div class="mb-3 certificate" asp-validation-class-for="StoreName">
    <label asp-for="StoreName" class="form-label">@T["Certificate Store Name"]</label>
    <select asp-for="StoreName" class="form-select">
        <option value="">@T["None"]</option>

        @foreach (StoreName store in Enum.GetValues(typeof(StoreName)))
        {
            <option value="@store" selected="@(Model.StoreName == store)">@store.ToString()</option>
        }
    </select>
    <span asp-validation-for="StoreName"></span>
    <span class="hint">@T["Select the certificate store."]</span>
</div>

<div class="mb-3 certificate" asp-validation-class-for="Thumbprint">
    @if (Model.AvailableCertificates.Count != 0)
    {
        <label asp-for="Thumbprint" class="form-label">@T["Certificate"]</label>
        <select asp-for="Thumbprint" class="form-select">
            <option value="">@T["None"]</option>

            @foreach (var certificate in Model.AvailableCertificates)
            {
                var selectedCertificate = Model.Thumbprint == certificate.ThumbPrint
                && Model.StoreLocation.HasValue && Model.StoreLocation.Value == certificate.StoreLocation
                && Model.StoreName.HasValue && Model.StoreName == certificate.StoreName;
                if (string.IsNullOrWhiteSpace(certificate.ThumbPrint))
                {
                    <option value="" data-StoreLocation="@certificate.StoreLocation" data-StoreName="@certificate.StoreName" selected="@(selectedCertificate)"></option>
                    continue;
                }
                var friendlyName = certificate.FriendlyName;
                if (string.IsNullOrWhiteSpace(friendlyName) && !string.IsNullOrWhiteSpace(certificate.ThumbPrint))
                {
                    friendlyName = "No Friendly Name";
                }
                <option value="@certificate.ThumbPrint" data-StoreLocation="@certificate.StoreLocation" data-StoreName="@certificate.StoreName" selected="@(selectedCertificate)">
                    @friendlyName [@certificate.NotBefore.ToString("dd/MM/yy") - @certificate.NotAfter.ToString("dd/MM/yy")] @certificate.Subject
                </option>
            }
        </select>
        <span asp-validation-for="Thumbprint"></span>
        <span class="hint">@T["Select the certificate."]</span>
    }
    else
    {
        <div class="alert alert-warning" asp-validation-for="CertificateThumbprint">@T["You need to add a certificate to your server for setting up this 'X509Secret'."]</div>
    }
</div>
