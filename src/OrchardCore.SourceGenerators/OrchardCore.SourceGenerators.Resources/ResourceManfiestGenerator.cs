using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace OrchardCore.SourceGenerators.Resources;

[Generator]
public class ResourceManfiestGenerator : ISourceGenerator
{
    private static readonly string _resourcesFile = "resources.json";
    private static readonly string[] _newLine = ["\r\n", "\n"];

    public void Execute(GeneratorExecutionContext context)
    {
        var sourceBuilder = new StringBuilder(@"// <auto-generated />
using System;
using System.IO;
using OrchardCore.ResourceManagement;

namespace OrchardCore.Resources
{
    public static class ResourceManifestGenerator
    {
        private const string CodeMirrorVersion = ""5.65.7"";
        private const string MonacoEditorVersion = ""0.46.0"";
        private const string CloudflareUrl = ""https: //cdnjs.cloudflare.com/ajax/libs/"";
        private const string CodeMirrorUrl = CloudflareUrl + ""codemirror/"" + CodeMirrorVersion + ""/"";

        public static ResourceManifest Build(string tenantPrefix)
        {
            var manifest = new ResourceManifest();

");

        const string minificationFileExtension = ".min";

        var resourceName = $"OrchardCore.SourceGenerators.Resources.{_resourcesFile}";
        var resourceStream = Assembly.GetExecutingAssembly()
            .GetManifestResourceStream(resourceName);
        using (var reader = new StreamReader(Assembly.GetExecutingAssembly().GetManifestResourceStream($"OrchardCore.SourceGenerators.Resources.{_resourcesFile}")))
        {
            var content = reader.ReadToEnd();
            var resources = JsonSerializer.Deserialize<Resources>(content);

            foreach (var resource in resources.Scripts)
            {
                resource.Type = ResourceType.Script;

                CreateResource(resource);
            }

            foreach (var resource in resources.Styles)
            {
                resource.Type = ResourceType.Style;

                CreateResource(resource);
            }
        }

        sourceBuilder.Append(@"            manifest
                .DefineScript(""monaco-loader"")
                .SetUrl(""~/OrchardCore.Resources/Scripts/monaco/vs/loader.js"")
                .SetPosition(ResourcePosition.Last)
                .SetVersion(MonacoEditorVersion);

            manifest
                .DefineScript(""monaco"")
                .SetAttribute(""data-tenant-prefix"", tenantPrefix)
                .SetUrl(""~/OrchardCore.Resources/Scripts/monaco/ocmonaco.js"")
                .SetDependencies(""monaco-loader"")
                .SetVersion(MonacoEditorVersion);

            return manifest;
                }
            }
        }");

        context.AddSource("ResourceManifestGenerator.g.cs", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));

        void CreateResource(Resource resource)
        {
            if (resource.Type == ResourceType.Script)
            {
                sourceBuilder.AppendLine($@"            manifest
                .DefineScript(""{resource.Name}"")");
            }
            else
            {
                sourceBuilder.AppendLine($@"            manifest
                .DefineStyle(""{resource.Name}"")");
            }

            if (resource.Dependencies != null)
            {
                sourceBuilder.AppendLine($@"                .SetDependencies({string.Join(',', resource.Dependencies.Select(d => "\"" + d + "\""))})");
            }

            if (!string.IsNullOrEmpty(resource.Url))
            {
                if (resource.Url.Contains(minificationFileExtension))
                {
                    sourceBuilder.AppendLine($@"                .SetUrl(""{resource.Url}"", ""{resource.Url.Replace(minificationFileExtension, string.Empty)}"")");
                }
                else
                {
                    sourceBuilder.AppendLine($@"                .SetUrl(""{resource.Url}"")");
                }
            }

            if (!string.IsNullOrEmpty(resource.Cdn))
            {
                if (resource.Cdn.Contains(minificationFileExtension))
                {
                    sourceBuilder.AppendLine($@"                .SetCdn(""{resource.Cdn}"", ""{resource.Cdn.Replace(minificationFileExtension, string.Empty)}"")");
                }
                else
                {
                    sourceBuilder.AppendLine($@"                .SetCdn(""{resource.Cdn}"")");
                }
            }

            if (resource.CdnIntegrity != null)
            {
                sourceBuilder.AppendLine($@"                .SetCdnIntegrity({string.Join(',', resource.CdnIntegrity.Select(c => "\"" + c + "\""))})");
            }

            sourceBuilder.AppendLine($@"                .SetVersion(""{resource.Version}"")");

            if (sourceBuilder.ToString().EndsWith(_newLine[0]))
            {
                sourceBuilder.Remove(sourceBuilder.Length - 2, 2);
            }

            if (sourceBuilder.ToString().EndsWith(_newLine[1]))
            {
                sourceBuilder.Remove(sourceBuilder.Length - 1, 1);
            }

            sourceBuilder.AppendLine(";");
            sourceBuilder.AppendLine();
        }
    }

    public void Initialize(GeneratorInitializationContext context)
    {
    }
}
