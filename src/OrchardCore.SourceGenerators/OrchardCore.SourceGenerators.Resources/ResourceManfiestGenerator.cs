using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace OrchardCore.SourceGenerators.Resources;

[Generator]
public class ResourceManfiestGenerator : ISourceGenerator
{
    private static readonly string _resourcesFile = "resources.json";
    private static readonly string[] _newLine = ["\r\n", "\n"];

    public void Execute(GeneratorExecutionContext context)
    {
        var sourceBuilder = new StringBuilder(@"// <auto-generated />
using System;
using System.IO;
using OrchardCore.ResourceManagement;

namespace OrchardCore.Resources
{
    public static class ResourceManifestGenerator
    {
        private const string CodeMirrorVersion = ""5.65.7"";
        private const string MonacoEditorVersion = ""0.46.0"";
        private const string CloudflareUrl = ""https://cdnjs.cloudflare.com/ajax/libs/"";
        private const string CodeMirrorUrl = CloudflareUrl + ""codemirror/"" + CodeMirrorVersion + ""/"";

        public static ResourceManifest Build(string tenantPrefix)
        {
            var manifest = new ResourceManifest();

");

        const string minificationFileExtension = ".min";

        var resourceName = $"OrchardCore.SourceGenerators.Resources.{_resourcesFile}";
        var resourceStream = Assembly.GetExecutingAssembly()
            .GetManifestResourceStream(resourceName);
        using (var reader = new StreamReader(Assembly.GetExecutingAssembly().GetManifestResourceStream($"OrchardCore.SourceGenerators.Resources.{_resourcesFile}")))
        {
            var content = reader.ReadToEnd();
            var resources = JsonSerializer.Deserialize<Resources>(content);

            foreach (var resource in resources.Scripts)
            {
                resource.Type = ResourceType.Script;

                CreateResource(resource);
            }

            foreach (var resource in resources.Styles)
            {
                resource.Type = ResourceType.Style;

                CreateResource(resource);
            }
        }

        sourceBuilder.Append("\t\t\t");
        sourceBuilder.Append(@"manifest
                .DefineScript(""monaco-loader"")
                .SetUrl(""~/OrchardCore.Resources/Scripts/monaco/vs/loader.js"")
                .SetPosition(ResourcePosition.Last)
                .SetVersion(MonacoEditorVersion);

            manifest
                .DefineScript(""monaco"")
                .SetAttribute(""data-tenant-prefix"", tenantPrefix)
                .SetUrl(""~/OrchardCore.Resources/Scripts/monaco/ocmonaco.js"")
                .SetDependencies(""monaco-loader"")
                .SetVersion(MonacoEditorVersion);

            return manifest;
        }
    }
}");

        context.AddSource("ResourceManifestGenerator.g.cs", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));

        void CreateResource(Resource resource)
        {
            var resourceType = resource.Type == ResourceType.Script
                ? "Script"
                : "Style";
            var isCodeMirrorResource = resource.Name.StartsWith("codemirror");

            sourceBuilder.AppendLine("\t\t\tmanifest");
            sourceBuilder.AppendLine($"\t\t\t\t.Define{resourceType}({GetQuoteString(resource.Name)})");

            if (resource.Dependencies != null)
            {
                sourceBuilder.AppendLine($"\t\t\t\t.SetDependencies({GetArrayElementsAsString(resource.Dependencies)})");
            }

            if (!string.IsNullOrEmpty(resource.Url))
            {
                sourceBuilder.AppendLine(resource.Url.Contains(minificationFileExtension)
                    ? $"\t\t\t\t.SetUrl({GetQuoteString(resource.Url)}, {GetQuoteString(GetDebugUrl(resource.Url))})"
                    : $"\t\t\t\t.SetUrl({GetQuoteString(resource.Url)})");
            }

            if (!string.IsNullOrEmpty(resource.Cdn))
            {
                var cdn = isCodeMirrorResource
                    ? $"CodeMirrorUrl + {GetQuoteString(resource.Cdn)}"
                    : GetQuoteString(resource.Cdn);

                var cdnDebug = isCodeMirrorResource
                    ? $"CodeMirrorUrl + {GetQuoteString(GetDebugUrl(resource.Cdn))}"
                    : GetQuoteString(GetDebugUrl(resource.Cdn));

                sourceBuilder.AppendLine(resource.CdnIntegrity.Length == 1
                    ? $"\t\t\t\t.SetCdn({cdn})"
                    : $"\t\t\t\t.SetCdn({cdn}, {cdnDebug})");
            }

            if (resource.CdnIntegrity != null)
            {
                sourceBuilder.AppendLine($"\t\t\t\t.SetCdnIntegrity({GetArrayElementsAsString(resource.CdnIntegrity)})");
            }

            sourceBuilder.AppendLine($"\t\t\t\t.SetVersion({(isCodeMirrorResource ? "CodeMirrorVersion" : GetQuoteString(resource.Version))})");

            if (sourceBuilder.ToString().EndsWith(_newLine[0]))
            {
                sourceBuilder.Remove(sourceBuilder.Length - 2, 2);
            }

            if (sourceBuilder.ToString().EndsWith(_newLine[1]))
            {
                sourceBuilder.Remove(sourceBuilder.Length - 1, 1);
            }

            sourceBuilder.AppendLine(";");
            sourceBuilder.AppendLine();

            static string GetDebugUrl(string url) => url.Replace(minificationFileExtension, string.Empty);

            static string GetArrayElementsAsString(string[] array) => string.Join(", ", array.Select(v => GetQuoteString(v)));

            static string GetQuoteString(string value) => "\"" + value + "\"";
        }
    }

    public void Initialize(GeneratorInitializationContext context)
    {
    }
}
